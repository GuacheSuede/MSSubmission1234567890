16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libbson/src/bson/bson-iter.c","args_hash":10433645398913005206,"includes":[{"line":20,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libbson/src/bson/bson-types.h"}],"dependencies":[],"skipped_by_preprocessor":["2251:1-2253:7","2283:1-2285:7","2344:1-2349:6"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4,5,6,7,8,9,11,12,14,15,16,18,20,22,24,26,28,30,31,32,33,35,36,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,59,60,61,62,65,66,67,68,69,70,71,72,74,75,76,78,79,80,81,82,83,85,86,87,88,89,90,91,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,110,111,112,113,114,115,116,117,118,120],"uses":[]},{"id":1,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10,13,17,19,21,23,25,27,29,34,40,56,57,58,63,64,73,77,94,119],"uses":[]},{"id":2,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[38],"uses":[]},{"id":3,"usr":17060207641113325606,"detailed_name":"timeval","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[84],"uses":["1725:27-1725:34|-1|1|4"]},{"id":4,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[93],"uses":[]},{"id":5,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[109],"uses":[]}],"funcs":[{"id":0,"usr":14739945219647912942,"detailed_name":"int bson_iter_init(int *iter, const int *bson)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_init --\n\n       Initializes @iter to be used to iterate @bson.\n\n Returns:\n       true if bson_iter_t was initialized. otherwise false.\n\n Side effects:\n       @iter is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"43:1-43:15|-1|1|2","extent":"42:1-67:2|-1|1|0","bases":[],"derived":[],"vars":[0,1],"uses":[],"callees":[]},{"id":1,"usr":5739574021235115417,"detailed_name":"int bson_iter_init_from_data(int *iter, const int *data, int length)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_init_from_data --\n\n       Initializes @iter to be used to iterate @data of length @length\n\n Returns:\n       true if bson_iter_t was initialized. otherwise false.\n\n Side effects:\n       @iter is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"87:1-87:25|-1|1|2","extent":"86:1-126:2|-1|1|0","bases":[],"derived":[],"vars":[2,3,4],"uses":[],"callees":[]},{"id":2,"usr":8901257303461163228,"detailed_name":"int bson_iter_recurse(const int *iter, int *child)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_recurse --\n\n       Creates a new sub-iter looking at the document or array that @iter\n       is currently pointing at.\n\n Returns:\n       true if successful and @child was initialized.\n\n Side effects:\n       @child is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"147:1-147:18|-1|1|2","extent":"146:1-177:2|-1|1|0","bases":[],"derived":[],"vars":[5,6,7],"uses":[],"callees":[]},{"id":3,"usr":5895417703678079613,"detailed_name":"int bson_iter_init_find(int *iter, const int *bson, const char *key)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_init_find --\n\n       Initializes a #bson_iter_t and moves the iter to the first field\n       matching @key.\n\n Returns:\n       true if the field named @key was found; otherwise false.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"198:1-198:20|-1|1|2","extent":"197:1-207:2|-1|1|0","bases":[],"derived":[],"vars":[8,9,10],"uses":[],"callees":[]},{"id":4,"usr":14835743065980561298,"detailed_name":"int bson_iter_init_find_w_len(int *iter, const int *bson, const char *key, int keylen)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_init_find_w_len --\n\n       Initializes a #bson_iter_t and moves the iter to the first field\n       matching @key.\n\n Returns:\n       true if the field named @key was found; otherwise false.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"228:1-228:26|-1|1|2","extent":"227:1-239:2|-1|1|0","bases":[],"derived":[],"vars":[11,12,13,14],"uses":[],"callees":[]},{"id":5,"usr":10951666815190491606,"detailed_name":"int bson_iter_init_find_case(int *iter, const int *bson, const char *key)","short_name_offset":4,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_init_find_case --\n\n       A case-insensitive version of bson_iter_init_find().\n\n Returns:\n       true if the field was found and @iter is observing that field.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"259:1-259:25|-1|1|2","extent":"258:1-268:2|-1|1|0","bases":[],"derived":[],"vars":[15,16,17],"uses":[],"callees":[]},{"id":6,"usr":14255707633589550885,"detailed_name":"int bson_iter_find_w_len(int *iter, const char *key, int keylen)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_find_w_len --\n\n       Searches through @iter starting from the current position for a key\n       matching @key. @keylen indicates the length of @key, or -1 to\n       determine the length with strlen().\n\n Returns:\n       true if the field @key was found.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"290:1-290:21|-1|1|2","extent":"289:1-309:2|-1|1|0","bases":[],"derived":[],"vars":[18,19,20,21],"uses":[],"callees":[]},{"id":7,"usr":2116054080551151829,"detailed_name":"int bson_iter_find(int *iter, const char *key)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_find --\n\n       Searches through @iter starting from the current position for a key\n       matching @key. This is a case-sensitive search meaning \"KEY\" and\n       \"key\" would NOT match.\n\n Returns:\n       true if @key is found.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"331:1-331:15|-1|1|2","extent":"330:1-338:2|-1|1|0","bases":[],"derived":[],"vars":[22,23],"uses":[],"callees":[]},{"id":8,"usr":10417375842388998538,"detailed_name":"int bson_iter_find_case(int *iter, const char *key)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_find_case --\n\n       Searches through @iter starting from the current position for a key\n       matching @key. This is a case-insensitive search meaning \"KEY\" and\n       \"key\" would match.\n\n Returns:\n       true if @key is found.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"360:1-360:20|-1|1|2","extent":"359:1-373:2|-1|1|0","bases":[],"derived":[],"vars":[24,25],"uses":[],"callees":[]},{"id":9,"usr":14426241733994573235,"detailed_name":"int bson_iter_find_descendant(int *iter, const char *dotkey, int *descendant)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_find_descendant --\n\n       Locates a descendant using the \"parent.child.key\" notation. This\n       operates similar to bson_iter_find() except that it can recurse\n       into children documents using the dot notation.\n\n Returns:\n       true if the descendant was found and @descendant was initialized.\n\n Side effects:\n       @descendant may be initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"395:1-395:26|-1|1|2","extent":"394:1-427:2|-1|1|0","bases":[],"derived":[],"vars":[26,27,28,29],"uses":[],"callees":[]},{"id":10,"usr":10710699168156900494,"detailed_name":"const char *bson_iter_key(const int *iter)","short_name_offset":12,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_key --\n\n       Retrieves the key of the current field. The resulting key is valid\n       while @iter is valid.\n\n Returns:\n       A string that should not be modified or freed.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"448:1-448:14|-1|1|2","extent":"447:1-453:2|-1|1|0","bases":[],"derived":[],"vars":[30],"uses":[],"callees":[]},{"id":11,"usr":104607424692086289,"detailed_name":"int bson_iter_type(const int *iter)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_type --\n\n       Retrieves the type of the current field.  It may be useful to check\n       the type using the BSON_ITER_HOLDS_*() macros.\n\n Returns:\n       A bson_type_t.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"474:1-474:15|-1|1|2","extent":"473:1-481:2|-1|1|0","bases":[],"derived":[],"vars":[31],"uses":[],"callees":[]},{"id":12,"usr":13755457110754784233,"detailed_name":"static int _bson_iter_next_internal(int *iter, int next_keylen, const char **key, int *bson_type, int *unsupported)","short_name_offset":11,"short_name_size":24,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _bson_iter_next_internal --\n\n       Internal function to advance @iter to the next field and retrieve\n       the key and BSON type before error-checking. @next_keylen is\n       the key length of the next field being iterated or 0 if this is\n       not known.\n\n Return:\n       true if an element was decoded, else false.\n\n Side effects:\n       @key and @bson_type are set.\n\n       If the return value is false:\n        - @iter is invalidated: @iter->raw is NULLed\n        - @unsupported is set to true if the bson type is unsupported\n        - otherwise if the BSON is corrupt, @iter->err_off is nonzero\n        - otherwise @bson_type is set to BSON_TYPE_EOD\n\n--------------------------------------------------------------------------","declarations":[],"spell":"510:1-510:25|-1|1|2","extent":"509:1-832:2|-1|1|0","bases":[],"derived":[],"vars":[32,33,34,35,36,37,38],"uses":[],"callees":[]},{"id":13,"usr":14899872218640271928,"detailed_name":"int bson_iter_next(int *iter)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_next --\n\n       Advances @iter to the next field of the underlying BSON document.\n       If all fields have been exhausted, then %false is returned.\n\n       It is a programming error to use @iter after this function has\n       returned false.\n\n Returns:\n       true if the iter was advanced to the next record.\n       otherwise false and @iter should be considered invalid.\n\n Side effects:\n       @iter may be invalidated.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"857:1-857:15|-1|1|2","extent":"856:1-864:2|-1|1|0","bases":[],"derived":[],"vars":[39,40],"uses":[],"callees":[]},{"id":14,"usr":15981569116786808290,"detailed_name":"void bson_iter_binary(const int *iter, int *subtype, int *binary_len, const int **binary)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_binary --\n\n       Retrieves the BSON_TYPE_BINARY field. The subtype is stored in\n       @subtype.  The length of @binary in bytes is stored in @binary_len.\n\n       @binary should not be modified or freed and is only valid while\n       @iter's bson_t is valid and unmodified.\n\n Parameters:\n       @iter: A bson_iter_t\n       @subtype: A location for the binary subtype.\n       @binary_len: A location for the length of @binary.\n       @binary: A location for a pointer to the binary data.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"894:1-894:17|-1|1|2","extent":"893:1-936:2|-1|1|0","bases":[],"derived":[],"vars":[41,42,43,44],"uses":[],"callees":[]},{"id":15,"usr":11451025563928455905,"detailed_name":"int bson_iter_bool(const int *iter)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_bool --\n\n       Retrieves the current field of type BSON_TYPE_BOOL.\n\n Returns:\n       true or false, dependent on bson document.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"956:1-956:15|-1|1|2","extent":"955:1-965:2|-1|1|0","bases":[],"derived":[],"vars":[45],"uses":[],"callees":[]},{"id":16,"usr":6371275048374795634,"detailed_name":"int bson_iter_as_bool(const int *iter)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_as_bool --\n\n       If @iter is on a boolean field, returns the boolean. If it is on a\n       non-boolean field such as int32, int64, or double, it will convert\n       the value to a boolean.\n\n       Zero is false, and non-zero is true.\n\n Returns:\n       true or false, dependent on field type.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"989:1-989:18|-1|1|2","extent":"988:1-1010:2|-1|1|0","bases":[],"derived":[],"vars":[46],"uses":[],"callees":[]},{"id":17,"usr":12340470147212874533,"detailed_name":"double bson_iter_double(const int *iter)","short_name_offset":7,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_double --\n\n       Retrieves the current field of type BSON_TYPE_DOUBLE.\n\n Returns:\n       A double.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1030:1-1030:17|-1|1|2","extent":"1029:1-1039:2|-1|1|0","bases":[],"derived":[],"vars":[47],"uses":[],"callees":[]},{"id":18,"usr":3899905123678742484,"detailed_name":"double bson_iter_as_double(const int *iter)","short_name_offset":7,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_as_double --\n\n       If @iter is on a field of type BSON_TYPE_DOUBLE,\n       returns the double. If it is on an integer field\n       such as int32, int64, or bool, it will convert\n       the value to a double.\n\n\n Returns:\n       A double.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1063:1-1063:20|-1|1|2","extent":"1062:1-1079:2|-1|1|0","bases":[],"derived":[],"vars":[48],"uses":[],"callees":[]},{"id":19,"usr":11698552905726008968,"detailed_name":"int bson_iter_int32(const int *iter)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_int32 --\n\n       Retrieves the value of the field of type BSON_TYPE_INT32.\n\n Returns:\n       A 32-bit signed integer.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1099:1-1099:16|-1|1|2","extent":"1098:1-1108:2|-1|1|0","bases":[],"derived":[],"vars":[49],"uses":[],"callees":[]},{"id":20,"usr":13718951200254170061,"detailed_name":"int bson_iter_int64(const int *iter)","short_name_offset":4,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_int64 --\n\n       Retrieves a 64-bit signed integer for the current BSON_TYPE_INT64\n       field.\n\n Returns:\n       A 64-bit signed integer.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1128:1-1128:16|-1|1|2","extent":"1127:1-1137:2|-1|1|0","bases":[],"derived":[],"vars":[50],"uses":[],"callees":[]},{"id":21,"usr":5972302566244991969,"detailed_name":"int bson_iter_as_int64(const int *iter)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_as_int64 --\n\n       If @iter is not an int64 field, it will try to convert the value to\n       an int64. Such field types include:\n\n        - bool\n        - double\n        - int32\n\n Returns:\n       An int64_t.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1162:1-1162:19|-1|1|2","extent":"1161:1-1178:2|-1|1|0","bases":[],"derived":[],"vars":[51],"uses":[],"callees":[]},{"id":22,"usr":4136037613123042078,"detailed_name":"int bson_iter_decimal128(const int *iter, int *dec)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_decimal128 --\n\n       This function retrieves the current field of type\n%BSON_TYPE_DECIMAL128.\n       The result is valid while @iter is valid, and is stored in @dec.\n\n Returns:\n\n       True on success, false on failure.\n\n Side Effects:\n    None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1200:1-1200:21|-1|1|2","extent":"1199:1-1211:2|-1|1|0","bases":[],"derived":[],"vars":[52,53],"uses":[],"callees":[]},{"id":23,"usr":2141607612673875472,"detailed_name":"const int *bson_iter_oid(const int *iter)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_oid --\n\n       Retrieves the current field of type %BSON_TYPE_OID. The result is\n       valid while @iter is valid.\n\n Returns:\n       A bson_oid_t that should not be modified or freed.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1232:1-1232:14|-1|1|2","extent":"1231:1-1241:2|-1|1|0","bases":[],"derived":[],"vars":[54],"uses":[],"callees":[]},{"id":24,"usr":15559008392031831152,"detailed_name":"const char *bson_iter_regex(const int *iter, const char **options)","short_name_offset":12,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_regex --\n\n       Fetches the current field from the iter which should be of type\n       BSON_TYPE_REGEX.\n\n Returns:\n       Regex from @iter. This should not be modified or freed.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1262:1-1262:16|-1|1|2","extent":"1261:1-1280:2|-1|1|0","bases":[],"derived":[],"vars":[55,56,57,58],"uses":[],"callees":[]},{"id":25,"usr":752656287375890152,"detailed_name":"const char *bson_iter_utf8(const int *iter, int *length)","short_name_offset":12,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_utf8 --\n\n       Retrieves the current field of type %BSON_TYPE_UTF8 as a UTF-8\n       encoded string.\n\n Parameters:\n       @iter: A bson_iter_t.\n       @length: A location for the length of the string.\n\n Returns:\n       A string that should not be modified or freed.\n\n Side effects:\n       @length will be set to the result strings length if non-NULL.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1305:1-1305:15|-1|1|2","extent":"1304:1-1323:2|-1|1|0","bases":[],"derived":[],"vars":[59,60],"uses":[],"callees":[]},{"id":26,"usr":2324124906641259241,"detailed_name":"char *bson_iter_dup_utf8(const int *iter, int *length)","short_name_offset":6,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_dup_utf8 --\n\n       Copies the current UTF-8 element into a newly allocated string. The\n       string should be freed using bson_free() when the caller is\n       finished with it.\n\n Returns:\n       A newly allocated char* that should be freed with bson_free().\n\n Side effects:\n       @length will be set to the result strings length if non-NULL.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1345:1-1345:19|-1|1|2","extent":"1344:1-1365:2|-1|1|0","bases":[],"derived":[],"vars":[61,62,63,64],"uses":[],"callees":[]},{"id":27,"usr":12417387827062331238,"detailed_name":"const char *bson_iter_code(const int *iter, int *length)","short_name_offset":12,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_code --\n\n       Retrieves the current field of type %BSON_TYPE_CODE. The length of\n       the resulting string is stored in @length.\n\n Parameters:\n       @iter: A bson_iter_t.\n       @length: A location for the code length.\n\n Returns:\n       A NUL-terminated string containing the code which should not be\n       modified or freed.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1391:1-1391:15|-1|1|2","extent":"1390:1-1409:2|-1|1|0","bases":[],"derived":[],"vars":[65,66],"uses":[],"callees":[]},{"id":28,"usr":14288852459036602605,"detailed_name":"const char *bson_iter_codewscope(const int *iter, int *length, int *scope_len, const int **scope)","short_name_offset":12,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_codewscope --\n\n       Similar to bson_iter_code() but with a scope associated encoded as\n       a BSON document. @scope should not be modified or freed. It is\n       valid while @iter is valid.\n\n Parameters:\n       @iter: A #bson_iter_t.\n       @length: A location for the length of resulting string.\n       @scope_len: A location for the length of @scope.\n       @scope: A location for the scope encoded as BSON.\n\n Returns:\n       A NUL-terminated string that should not be modified or freed.\n\n Side effects:\n       @length is set to the resulting string length in bytes.\n       @scope_len is set to the length of @scope in bytes.\n       @scope is set to the scope documents buffer which can be\n       turned into a bson document with bson_init_static().\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1440:1-1440:21|-1|1|2","extent":"1439:1-1477:2|-1|1|0","bases":[],"derived":[],"vars":[67,68,69,70],"uses":[],"callees":[]},{"id":29,"usr":12574466342793565466,"detailed_name":"void bson_iter_dbpointer(const int *iter, int *collection_len, const char **collection, const int **oid)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_dbpointer --\n\n       Retrieves a BSON_TYPE_DBPOINTER field. @collection_len will be set\n       to the length of the collection name. The collection name will be\n       placed into @collection. The oid will be placed into @oid.\n\n       @collection and @oid should not be modified.\n\n Parameters:\n       @iter: A #bson_iter_t.\n       @collection_len: A location for the length of @collection.\n       @collection: A location for the collection name.\n       @oid: A location for the oid.\n\n Returns:\n       None.\n\n Side effects:\n       @collection_len is set to the length of @collection in bytes\n       excluding the null byte.\n       @collection is set to the collection name, including a terminating\n       null byte.\n       @oid is initialized with the oid.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1511:1-1511:20|-1|1|2","extent":"1510:1-1545:2|-1|1|0","bases":[],"derived":[],"vars":[71,72,73,74],"uses":[],"callees":[]},{"id":30,"usr":13988175527141894190,"detailed_name":"const char *bson_iter_symbol(const int *iter, int *length)","short_name_offset":12,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_symbol --\n\n       Retrieves the symbol of the current field of type BSON_TYPE_SYMBOL.\n\n Parameters:\n       @iter: A bson_iter_t.\n       @length: A location for the length of the symbol.\n\n Returns:\n       A string containing the symbol as UTF-8. The value should not be\n       modified or freed.\n\n Side effects:\n       @length is set to the resulting strings length in bytes,\n       excluding the null byte.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1571:1-1571:17|-1|1|2","extent":"1570:1-1589:2|-1|1|0","bases":[],"derived":[],"vars":[75,76,77],"uses":[],"callees":[]},{"id":31,"usr":4896982618120452524,"detailed_name":"int bson_iter_date_time(const int *iter)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_date_time --\n\n       Fetches the number of milliseconds elapsed since the UNIX epoch.\n       This value can be negative as times before 1970 are valid.\n\n Returns:\n       A signed 64-bit integer containing the number of milliseconds.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1610:1-1610:20|-1|1|2","extent":"1609:1-1619:2|-1|1|0","bases":[],"derived":[],"vars":[78],"uses":[],"callees":[]},{"id":32,"usr":14566297343262593947,"detailed_name":"int bson_iter_time_t(const int *iter)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_time_t --\n\n       Retrieves the current field of type BSON_TYPE_DATE_TIME as a\n       time_t.\n\n Returns:\n       A #time_t of the number of seconds since UNIX epoch in UTC.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1640:1-1640:17|-1|1|2","extent":"1639:1-1649:2|-1|1|0","bases":[],"derived":[],"vars":[79],"uses":[],"callees":[]},{"id":33,"usr":9339595502567743243,"detailed_name":"void bson_iter_timestamp(const int *iter, int *timestamp, int *increment)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_timestamp --\n\n       Fetches the current field if it is a BSON_TYPE_TIMESTAMP.\n\n Parameters:\n       @iter: A #bson_iter_t.\n       @timestamp: a location for the timestamp.\n       @increment: A location for the increment.\n\n Returns:\n       None.\n\n Side effects:\n       @timestamp is initialized.\n       @increment is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1675:1-1675:20|-1|1|2","extent":"1674:1-1699:2|-1|1|0","bases":[],"derived":[],"vars":[80,81,82],"uses":[],"callees":[]},{"id":34,"usr":7775377219228639894,"detailed_name":"void bson_iter_timeval(const int *iter, struct timeval *tv)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_timeval --\n\n       Retrieves the current field of type BSON_TYPE_DATE_TIME and stores\n       it into the struct timeval provided. tv->tv_sec is set to the\n       number of seconds since the UNIX epoch in UTC.\n\n       Since BSON_TYPE_DATE_TIME does not support fractions of a second,\n       tv->tv_usec will always be set to zero.\n\n Returns:\n       None.\n\n Side effects:\n       @tv is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1724:1-1724:18|-1|1|2","extent":"1723:1-1735:2|-1|1|0","bases":[],"derived":[],"vars":[83,84],"uses":[],"callees":[]},{"id":35,"usr":9827553754665540622,"detailed_name":"void bson_iter_document(const int *iter, int *document_len, const int **document)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\nbson_iter_document:\n@iter: a bson_iter_t.\n@document_len: A location for the document length.\n@document: A location for a pointer to the document buffer.\n\n\n\n--------------------------------------------------------------------------\n\nbson_iter_document --\n\n      Retrieves the data to the document BSON structure and stores the\n      length of the document buffer in @document_len and the document\n      buffer in @document.\n\n      If you would like to iterate over the child contents, you might\n      consider creating a bson_t on the stack such as the following. It\n      allows you to call functions taking a const bson_t* only.\n\n         bson_t b;\n         uint32_t len;\n         const uint8_t *data;\n\n         bson_iter_document(iter, &len, &data);\n\n         if (bson_init_static (&b, data, len)) {\n            ...\n         }\n\n      There is no need to cleanup the bson_t structure as no data can be\n      modified in the process of its use (as it is static/const).\n\nReturns:\n      None.\n\nSide effects:\n      @document_len is initialized.\n      @document is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1782:1-1782:19|-1|1|2","extent":"1781:1-1798:2|-1|1|0","bases":[],"derived":[],"vars":[85,86,87],"uses":[],"callees":[]},{"id":36,"usr":5534116928117887849,"detailed_name":"void bson_iter_array(const int *iter, int *array_len, const int **array)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\nbson_iter_array:\n@iter: a #bson_iter_t.\n@array_len: A location for the array length.\n@array: A location for a pointer to the array buffer.\n\n\n--------------------------------------------------------------------------\n\nbson_iter_array --\n\n      Retrieves the data to the array BSON structure and stores the\n      length of the array buffer in @array_len and the array buffer in\n      @array.\n\n      If you would like to iterate over the child contents, you might\n      consider creating a bson_t on the stack such as the following. It\n      allows you to call functions taking a const bson_t* only.\n\n         bson_t b;\n         uint32_t len;\n         const uint8_t *data;\n\n         bson_iter_array (iter, &len, &data);\n\n         if (bson_init_static (&b, data, len)) {\n            ...\n         }\n\n      There is no need to cleanup the #bson_t structure as no data can be\n      modified in the process of its use.\n\nReturns:\n      None.\n\nSide effects:\n      @array_len is initialized.\n      @array is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1844:1-1844:16|-1|1|2","extent":"1843:1-1860:2|-1|1|0","bases":[],"derived":[],"vars":[88,89,90],"uses":[],"callees":[]},{"id":37,"usr":5838757092366977565,"detailed_name":"int bson_iter_visit_all(int *iter, const int *visitor, void *data)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1893:1-1893:20|-1|1|2","extent":"1892:1-2155:2|-1|1|0","bases":[],"derived":[],"vars":[91,92,93,94],"uses":[],"callees":[]},{"id":38,"usr":13577071366954193771,"detailed_name":"void bson_iter_overwrite_bool(int *iter, int value)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_overwrite_bool --\n\n       Overwrites the current BSON_TYPE_BOOLEAN field with a new value.\n       This is performed in-place and therefore no keys are moved.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2176:1-2176:25|-1|1|2","extent":"2175:1-2184:2|-1|1|0","bases":[],"derived":[],"vars":[95,96],"uses":[],"callees":[]},{"id":39,"usr":9800220114459815300,"detailed_name":"void bson_iter_overwrite_oid(int *iter, const int *value)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2188:1-2188:24|-1|1|2","extent":"2187:1-2196:2|-1|1|0","bases":[],"derived":[],"vars":[97,98],"uses":[],"callees":[]},{"id":40,"usr":14491256342111976344,"detailed_name":"void bson_iter_overwrite_timestamp(int *iter, int timestamp, int increment)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2200:1-2200:30|-1|1|2","extent":"2199:1-2212:2|-1|1|0","bases":[],"derived":[],"vars":[99,100,101],"uses":[],"callees":[]},{"id":41,"usr":15328941641647328856,"detailed_name":"void bson_iter_overwrite_date_time(int *iter, int value)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2216:1-2216:30|-1|1|2","extent":"2215:1-2224:2|-1|1|0","bases":[],"derived":[],"vars":[102,103],"uses":[],"callees":[]},{"id":42,"usr":3536874790744168152,"detailed_name":"void bson_iter_overwrite_int32(int *iter, int value)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_overwrite_int32 --\n\n       Overwrites the current BSON_TYPE_INT32 field with a new value.\n       This is performed in-place and therefore no keys are moved.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2245:1-2245:26|-1|1|2","extent":"2244:1-2256:2|-1|1|0","bases":[],"derived":[],"vars":[104,105],"uses":[],"callees":[]},{"id":43,"usr":16550223369368189127,"detailed_name":"void bson_iter_overwrite_int64(int *iter, int value)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_overwrite_int64 --\n\n       Overwrites the current BSON_TYPE_INT64 field with a new value.\n       This is performed in-place and therefore no keys are moved.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2277:1-2277:26|-1|1|2","extent":"2276:1-2288:2|-1|1|0","bases":[],"derived":[],"vars":[106,107],"uses":[],"callees":[]},{"id":44,"usr":654608728497928991,"detailed_name":"void bson_iter_overwrite_double(int *iter, double value)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_overwrite_double --\n\n       Overwrites the current BSON_TYPE_DOUBLE field with a new value.\n       This is performed in-place and therefore no keys are moved.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2309:1-2309:27|-1|1|2","extent":"2308:1-2318:2|-1|1|0","bases":[],"derived":[],"vars":[108,109],"uses":[],"callees":[]},{"id":45,"usr":14267758420177779828,"detailed_name":"void bson_iter_overwrite_decimal128(int *iter, int *value)","short_name_offset":5,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_overwrite_decimal128 --\n\n       Overwrites the current BSON_TYPE_DECIMAL128 field with a new value.\n       This is performed in-place and therefore no keys are moved.\n\n Returns:\n    None.\n\n Side effects:\n    None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2338:1-2338:31|-1|1|2","extent":"2337:1-2353:2|-1|1|0","bases":[],"derived":[],"vars":[110,111],"uses":[],"callees":[]},{"id":46,"usr":6663432279231785544,"detailed_name":"const int *bson_iter_value(int *iter)","short_name_offset":11,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_iter_value --\n\n       Retrieves a bson_value_t containing the boxed value of the current\n       element. The result of this function valid until the state of\n       iter has been changed (through the use of bson_iter_next()).\n\n Returns:\n       A bson_value_t that should not be modified or freed. If you need\n       to hold on to the value, use bson_value_copy().\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2376:1-2376:16|-1|1|2","extent":"2375:1-2472:2|-1|1|0","bases":[],"derived":[],"vars":[112],"uses":[],"callees":[]},{"id":47,"usr":10116449328139004836,"detailed_name":"int bson_iter_key_len(const int *iter)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2475:1-2475:18|-1|1|2","extent":"2474:1-2486:2|-1|1|0","bases":[],"derived":[],"vars":[113],"uses":[],"callees":[]},{"id":48,"usr":1304110709659479902,"detailed_name":"int bson_iter_init_from_data_at_offset(int *iter, const int *data, int length, int offset, int keylen)","short_name_offset":4,"short_name_size":34,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2489:1-2489:35|-1|1|2","extent":"2488:1-2522:2|-1|1|0","bases":[],"derived":[],"vars":[114,115,116,117,118,119],"uses":[],"callees":[]},{"id":49,"usr":7895871498294464853,"detailed_name":"int bson_iter_offset(int *iter)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"2525:1-2525:17|-1|1|2","extent":"2524:1-2528:2|-1|1|0","bases":[],"derived":[],"vars":[120],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":11604103142615520858,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"43:30-43:34|0|3|2","extent":"43:17-43:34|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":3784065395895430859,"detailed_name":"const int *bson","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"44:31-44:35|0|3|2","extent":"44:17-44:35|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":2,"usr":12228423639464762923,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"87:40-87:44|1|3|2","extent":"87:27-87:44|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":3,"usr":3686247333821710063,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"88:42-88:46|1|3|2","extent":"88:27-88:46|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":4,"usr":3082010406907714946,"detailed_name":"int length","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"89:34-89:40|1|3|2","extent":"89:27-89:40|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":5,"usr":8497076337917092250,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"147:39-147:43|2|3|2","extent":"147:20-147:43|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":6,"usr":18016116008301053673,"detailed_name":"int *child","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"148:33-148:38|2|3|2","extent":"148:20-148:38|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":7,"usr":3275821368515618313,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"150:19-150:23|2|3|2","extent":"150:4-150:23|2|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":8,"usr":6882430338715563937,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"198:35-198:39|3|3|2","extent":"198:22-198:39|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":9,"usr":7681955726920239537,"detailed_name":"const int *bson","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"199:36-199:40|3|3|2","extent":"199:22-199:40|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":10,"usr":17264001132709556989,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"200:34-200:37|3|3|2","extent":"200:22-200:37|3|3|0","type":1,"uses":["204:17-204:20|3|3|12"],"kind":253,"storage":1},{"id":11,"usr":6464883817531435933,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"228:41-228:45|4|3|2","extent":"228:28-228:45|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":12,"usr":14339561814382334992,"detailed_name":"const int *bson","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"229:42-229:46|4|3|2","extent":"229:28-229:46|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":13,"usr":5714735760293872897,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"230:40-230:43|4|3|2","extent":"230:28-230:43|4|3|0","type":1,"uses":["235:17-235:20|4|3|12"],"kind":253,"storage":1},{"id":14,"usr":3031745872655329068,"detailed_name":"int keylen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"231:32-231:38|4|3|2","extent":"231:28-231:38|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":15,"usr":14107432617983085911,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"259:40-259:44|5|3|2","extent":"259:27-259:44|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":16,"usr":15059710556809918346,"detailed_name":"const int *bson","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"260:41-260:45|5|3|2","extent":"260:27-260:45|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":17,"usr":6216957392626319123,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"261:39-261:42|5|3|2","extent":"261:27-261:42|5|3|0","type":1,"uses":["265:17-265:20|5|3|12"],"kind":253,"storage":1},{"id":18,"usr":11685070505217066234,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"290:36-290:40|6|3|2","extent":"290:23-290:40|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":19,"usr":614918859905048295,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"291:35-291:38|6|3|2","extent":"291:23-291:38|6|3|0","type":1,"uses":["297:30-297:33|6|3|12"],"kind":253,"storage":1},{"id":20,"usr":13426572483913750719,"detailed_name":"int keylen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"292:27-292:33|6|3|2","extent":"292:23-292:33|6|3|0","type":0,"uses":["296:8-296:14|6|3|12","297:7-297:13|6|3|20"],"kind":253,"storage":1},{"id":21,"usr":2099593718063687274,"detailed_name":"const char *ikey","short_name_offset":12,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"294:16-294:20|6|3|2","extent":"294:4-294:20|6|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":22,"usr":10621752260089201842,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"331:30-331:34|7|3|2","extent":"331:17-331:34|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":23,"usr":2649844954270883956,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"332:29-332:32|7|3|2","extent":"332:17-332:32|7|3|0","type":1,"uses":["335:17-335:20|7|3|12"],"kind":253,"storage":1},{"id":24,"usr":14715923986290142184,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"360:35-360:39|8|3|2","extent":"360:22-360:39|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":25,"usr":1896770202846809139,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"361:34-361:37|8|3|2","extent":"361:22-361:37|8|3|0","type":1,"uses":["364:17-364:20|8|3|12"],"kind":253,"storage":1},{"id":26,"usr":15970178005832372180,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"395:41-395:45|9|3|2","extent":"395:28-395:45|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":27,"usr":4508553828320418111,"detailed_name":"const char *dotkey","short_name_offset":12,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"396:40-396:46|9|3|2","extent":"396:28-396:46|9|3|0","type":1,"uses":["404:17-404:23|9|3|12","407:23-407:29|9|3|12"],"kind":253,"storage":1},{"id":28,"usr":14488111634070940261,"detailed_name":"int *descendant","short_name_offset":5,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"397:41-397:51|9|3|2","extent":"397:28-397:51|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":29,"usr":4415969278535108869,"detailed_name":"const char *dot","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"400:16-400:19|9|3|2","extent":"400:4-400:19|9|3|0","type":1,"uses":["407:9-407:12|9|3|20","414:12-414:15|9|3|12"],"kind":13,"storage":1},{"id":30,"usr":6553931890211796320,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"448:35-448:39|10|3|2","extent":"448:16-448:39|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":31,"usr":3044283739822920584,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"474:36-474:40|11|3|2","extent":"474:17-474:40|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":32,"usr":8218771386790232452,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"510:40-510:44|12|3|2","extent":"510:27-510:44|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":33,"usr":13302679996469589530,"detailed_name":"int next_keylen","short_name_offset":4,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"511:36-511:47|12|3|2","extent":"511:27-511:47|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":34,"usr":14015945635084502796,"detailed_name":"const char **key","short_name_offset":13,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"512:40-512:43|12|3|2","extent":"512:27-512:43|12|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":35,"usr":7692364274567929380,"detailed_name":"int *bson_type","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"513:37-513:46|12|3|2","extent":"513:27-513:46|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":36,"usr":13721032578968738494,"detailed_name":"int *unsupported","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"514:33-514:44|12|3|2","extent":"514:27-514:44|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":37,"usr":2573013828699774294,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"516:19-516:23|12|3|2","extent":"516:4-516:23|12|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":38,"usr":10006787778452809369,"detailed_name":"unsigned int len","short_name_offset":13,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"518:17-518:20|12|3|2","extent":"518:4-518:20|12|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":39,"usr":15020722043480009464,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"857:30-857:34|13|3|2","extent":"857:17-857:34|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":40,"usr":3454354792349202210,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"860:16-860:19|13|3|2","extent":"860:4-860:19|13|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":41,"usr":10101000066766445937,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"894:38-894:42|14|3|2","extent":"894:19-894:42|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":42,"usr":2024444592804367302,"detailed_name":"int *subtype","short_name_offset":5,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"895:35-895:42|14|3|2","extent":"895:19-895:42|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":43,"usr":5104768586597285,"detailed_name":"int *binary_len","short_name_offset":5,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"896:29-896:39|14|3|2","extent":"896:19-896:39|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":44,"usr":12194263856198470379,"detailed_name":"const int **binary","short_name_offset":12,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"897:35-897:41|14|3|2","extent":"897:19-897:41|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":45,"usr":7640296858111684964,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"956:36-956:40|15|3|2","extent":"956:17-956:40|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":46,"usr":11022157573199775330,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"989:39-989:43|16|3|2","extent":"989:20-989:43|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":47,"usr":15284981878295699610,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1030:38-1030:42|17|3|2","extent":"1030:19-1030:42|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":48,"usr":11810380945221390637,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1063:41-1063:45|18|3|2","extent":"1063:22-1063:45|18|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":49,"usr":16862936169107807336,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1099:37-1099:41|19|3|2","extent":"1099:18-1099:41|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":50,"usr":5869453038363258275,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1128:37-1128:41|20|3|2","extent":"1128:18-1128:41|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":51,"usr":8318336940509554555,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1162:40-1162:44|21|3|2","extent":"1162:21-1162:44|21|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":52,"usr":9436187752567653332,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1200:42-1200:46|22|3|2","extent":"1200:23-1200:46|22|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":53,"usr":11770728300424116941,"detailed_name":"int *dec","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1201:42-1201:45|22|3|2","extent":"1201:23-1201:45|22|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":54,"usr":4560137868617146910,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1232:35-1232:39|23|3|2","extent":"1232:16-1232:39|23|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":55,"usr":8096358704655622916,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1262:37-1262:41|24|3|2","extent":"1262:18-1262:41|24|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":56,"usr":12464157332948138883,"detailed_name":"const char **options","short_name_offset":13,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1263:31-1263:38|24|3|2","extent":"1263:18-1263:38|24|3|0","type":1,"uses":["1275:8-1275:15|24|3|12","1276:8-1276:15|24|3|12"],"kind":253,"storage":1},{"id":57,"usr":13954406783914346708,"detailed_name":"const char *ret","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1265:16-1265:19|24|3|2","extent":"1265:4-1265:19|24|3|0","type":1,"uses":["1279:11-1279:14|24|3|12"],"kind":13,"storage":1},{"id":58,"usr":5757129241261217728,"detailed_name":"const char *ret_options","short_name_offset":12,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"1266:16-1266:27|24|3|2","extent":"1266:4-1266:27|24|3|0","type":1,"uses":["1276:18-1276:29|24|3|12"],"kind":13,"storage":1},{"id":59,"usr":7577831861744781685,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1305:36-1305:40|25|3|2","extent":"1305:17-1305:40|25|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":60,"usr":7786426080627195515,"detailed_name":"int *length","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1306:27-1306:33|25|3|2","extent":"1306:17-1306:33|25|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":61,"usr":9264679561798480075,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1345:40-1345:44|26|3|2","extent":"1345:21-1345:44|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":62,"usr":18050200539728361418,"detailed_name":"int *length","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1346:31-1346:37|26|3|2","extent":"1346:21-1346:37|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":63,"usr":16422692880617795288,"detailed_name":"const char *str","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1349:16-1349:19|26|3|2","extent":"1349:4-1349:19|26|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":64,"usr":9065239862371361807,"detailed_name":"char *ret","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1350:10-1350:13|26|3|2","extent":"1350:4-1350:13|26|3|0","type":1,"uses":["1364:11-1364:14|26|3|12"],"kind":13,"storage":1},{"id":65,"usr":5174979572145400400,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1391:36-1391:40|27|3|2","extent":"1391:17-1391:40|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":66,"usr":10796915983784628128,"detailed_name":"int *length","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1392:27-1392:33|27|3|2","extent":"1392:17-1392:33|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":67,"usr":17530942987761521379,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1440:42-1440:46|28|3|2","extent":"1440:23-1440:46|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":68,"usr":15655567577845616174,"detailed_name":"int *length","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1441:33-1441:39|28|3|2","extent":"1441:23-1441:39|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":69,"usr":17178394919130401239,"detailed_name":"int *scope_len","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1442:33-1442:42|28|3|2","extent":"1442:23-1442:42|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":70,"usr":8704246809826437582,"detailed_name":"const int **scope","short_name_offset":12,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1443:39-1443:44|28|3|2","extent":"1443:23-1443:44|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":71,"usr":422663325054673645,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1511:41-1511:45|29|3|2","extent":"1511:22-1511:45|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":72,"usr":2347563203275446944,"detailed_name":"int *collection_len","short_name_offset":5,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"1512:32-1512:46|29|3|2","extent":"1512:22-1512:46|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":73,"usr":8374620362894597937,"detailed_name":"const char **collection","short_name_offset":13,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"1513:35-1513:45|29|3|2","extent":"1513:22-1513:45|29|3|0","type":1,"uses":["1518:8-1518:18|29|3|12","1537:11-1537:21|29|3|12"],"kind":253,"storage":1},{"id":74,"usr":18428247349876416110,"detailed_name":"const int **oid","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1514:41-1514:44|29|3|2","extent":"1514:22-1514:44|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":75,"usr":17291045479743343548,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1571:38-1571:42|30|3|2","extent":"1571:19-1571:42|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":76,"usr":12355899721535194459,"detailed_name":"int *length","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1572:29-1572:35|30|3|2","extent":"1572:19-1572:35|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":77,"usr":8073299027343061296,"detailed_name":"const char *ret","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1574:16-1574:19|30|3|2","extent":"1574:4-1574:19|30|3|0","type":1,"uses":["1588:11-1588:14|30|3|12"],"kind":13,"storage":1},{"id":78,"usr":11694439568877649853,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1610:41-1610:45|31|3|2","extent":"1610:22-1610:45|31|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":79,"usr":13316597646496678411,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1640:38-1640:42|32|3|2","extent":"1640:19-1640:42|32|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":80,"usr":13137701720370928991,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1675:41-1675:45|33|3|2","extent":"1675:22-1675:45|33|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":81,"usr":6071195638660948062,"detailed_name":"int *timestamp","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1676:32-1676:41|33|3|2","extent":"1676:22-1676:41|33|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":82,"usr":2519199331632165910,"detailed_name":"int *increment","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1677:32-1677:41|33|3|2","extent":"1677:22-1677:41|33|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":83,"usr":16448494204951317053,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1724:39-1724:43|34|3|2","extent":"1724:20-1724:43|34|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":84,"usr":1409999998556654576,"detailed_name":"struct timeval *tv","short_name_offset":16,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1725:36-1725:38|34|3|2","extent":"1725:20-1725:38|34|3|0","type":3,"uses":[],"kind":253,"storage":1},{"id":85,"usr":6405991635242275684,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1782:40-1782:44|35|3|2","extent":"1782:21-1782:44|35|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":86,"usr":17940277975927979612,"detailed_name":"int *document_len","short_name_offset":5,"short_name_size":12,"hover":"","comments":"","declarations":[],"spell":"1783:31-1783:43|35|3|2","extent":"1783:21-1783:43|35|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":87,"usr":11452699465762132429,"detailed_name":"const int **document","short_name_offset":12,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1784:37-1784:45|35|3|2","extent":"1784:21-1784:45|35|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":88,"usr":15499110792160834294,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1844:37-1844:41|36|3|2","extent":"1844:18-1844:41|36|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":89,"usr":8713748067304513437,"detailed_name":"int *array_len","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1845:28-1845:37|36|3|2","extent":"1845:18-1845:37|36|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":90,"usr":15724875939766705248,"detailed_name":"const int **array","short_name_offset":12,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1846:34-1846:39|36|3|2","extent":"1846:18-1846:39|36|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":91,"usr":13026075467386834596,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1893:35-1893:39|37|3|2","extent":"1893:22-1893:39|37|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":92,"usr":16968495200237428804,"detailed_name":"const int *visitor","short_name_offset":11,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1894:44-1894:51|37|3|2","extent":"1894:22-1894:51|37|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":93,"usr":7784770920341824975,"detailed_name":"void *data","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1895:28-1895:32|37|3|2","extent":"1895:22-1895:32|37|3|0","type":4,"uses":[],"kind":253,"storage":1},{"id":94,"usr":6826313093691818002,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1898:16-1898:19|37|3|2","extent":"1898:4-1898:19|37|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":95,"usr":16385735210645649041,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2176:40-2176:44|38|3|2","extent":"2176:27-2176:44|38|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":96,"usr":16065552869847102660,"detailed_name":"int value","short_name_offset":4,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2177:32-2177:37|38|3|2","extent":"2177:27-2177:37|38|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":97,"usr":18270580391250776960,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2188:39-2188:43|39|3|2","extent":"2188:26-2188:43|39|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":98,"usr":10383926419840281698,"detailed_name":"const int *value","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2188:63-2188:68|39|3|2","extent":"2188:45-2188:68|39|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":99,"usr":3517778843621532944,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2200:45-2200:49|40|3|2","extent":"2200:32-2200:49|40|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":100,"usr":3957668457230923231,"detailed_name":"int timestamp","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"2201:41-2201:50|40|3|2","extent":"2201:32-2201:50|40|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":101,"usr":18177865927431931013,"detailed_name":"int increment","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"2202:41-2202:50|40|3|2","extent":"2202:32-2202:50|40|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":102,"usr":17858568076945806766,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2216:45-2216:49|41|3|2","extent":"2216:32-2216:49|41|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":103,"usr":7339764676740275858,"detailed_name":"int value","short_name_offset":4,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2216:59-2216:64|41|3|2","extent":"2216:51-2216:64|41|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":104,"usr":14871409522515184683,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2245:41-2245:45|42|3|2","extent":"2245:28-2245:45|42|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":105,"usr":2597218761004718022,"detailed_name":"int value","short_name_offset":4,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2246:36-2246:41|42|3|2","extent":"2246:28-2246:41|42|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":106,"usr":6959986232764214504,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2277:41-2277:45|43|3|2","extent":"2277:28-2277:45|43|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":107,"usr":11174163874572240237,"detailed_name":"int value","short_name_offset":4,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2278:36-2278:41|43|3|2","extent":"2278:28-2278:41|43|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":108,"usr":1828872168696957778,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2309:42-2309:46|44|3|2","extent":"2309:29-2309:46|44|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":109,"usr":6148239959787893392,"detailed_name":"double value","short_name_offset":7,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2310:36-2310:41|44|3|2","extent":"2310:29-2310:41|44|3|0","type":5,"uses":["2315:7-2315:12|44|3|20","2315:34-2315:39|44|3|12"],"kind":253,"storage":1},{"id":110,"usr":12644118656019640616,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2338:46-2338:50|45|3|2","extent":"2338:33-2338:50|45|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":111,"usr":361344564615569574,"detailed_name":"int *value","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"2339:52-2339:57|45|3|2","extent":"2339:33-2339:57|45|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":112,"usr":1784381664413732018,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2376:31-2376:35|46|3|2","extent":"2376:18-2376:35|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":113,"usr":1431049635047941723,"detailed_name":"const int *iter","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2475:39-2475:43|47|3|2","extent":"2475:20-2475:43|47|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":114,"usr":12647504305082721749,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2489:50-2489:54|48|3|2","extent":"2489:37-2489:54|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":115,"usr":15437674966329051787,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2490:52-2490:56|48|3|2","extent":"2490:37-2490:56|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":116,"usr":14340439296090343426,"detailed_name":"int length","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"2491:44-2491:50|48|3|2","extent":"2491:37-2491:50|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":117,"usr":8439407670745084608,"detailed_name":"int offset","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"2492:46-2492:52|48|3|2","extent":"2492:37-2492:52|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":118,"usr":17339964810790559048,"detailed_name":"int keylen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"2493:46-2493:52|48|3|2","extent":"2493:37-2493:52|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":119,"usr":3499670945552805724,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"2495:16-2495:19|48|3|2","extent":"2495:4-2495:19|48|3|0","type":1,"uses":[],"kind":13,"storage":1},{"id":120,"usr":7688301525551928259,"detailed_name":"int *iter","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"2525:32-2525:36|49|3|2","extent":"2525:19-2525:36|49|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":121,"usr":14227008974467441791,"detailed_name":"ITER_TYPE","short_name_offset":0,"short_name_size":9,"hover":"#define ITER_TYPE(i) ((bson_type_t) * ((i)->raw + (i)->type))","comments":"","declarations":[],"spell":"23:9-23:18|-1|1|2","extent":"23:9-23:62|-1|1|0","uses":["156:8-156:17|-1|1|4","158:15-158:24|-1|1|4","560:17-560:26|-1|1|4","904:8-904:17|-1|1|4","960:8-960:17|-1|1|4","993:18-993:27|-1|1|4","1034:8-1034:17|-1|1|4","1067:18-1067:27|-1|1|4","1103:8-1103:17|-1|1|4","1132:8-1132:17|-1|1|4","1166:18-1166:27|-1|1|4","1205:8-1205:17|-1|1|4","1236:8-1236:17|-1|1|4","1270:8-1270:17|-1|1|4","1310:8-1310:17|-1|1|4","1396:8-1396:17|-1|1|4","1449:8-1449:17|-1|1|4","1526:8-1526:17|-1|1|4","1579:8-1579:17|-1|1|4","1614:8-1614:17|-1|1|4","1644:8-1644:17|-1|1|4","1685:8-1685:17|-1|1|4","1729:8-1729:17|-1|1|4","1793:8-1793:17|-1|1|4","1855:8-1855:17|-1|1|4","2181:8-2181:17|-1|1|4","2192:8-2192:17|-1|1|4","2207:8-2207:17|-1|1|4","2220:8-2220:17|-1|1|4","2250:8-2250:17|-1|1|4","2282:8-2282:17|-1|1|4","2314:8-2314:17|-1|1|4","2343:8-2343:17|-1|1|4","2383:24-2383:33|-1|1|4"],"kind":255,"storage":0},{"id":122,"usr":2213254906919905856,"detailed_name":"VISIT_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_FIELD(name) visitor->visit_##name && visitor->visit_##name","comments":"","declarations":[],"spell":"1863:9-1863:20|-1|1|2","extent":"1863:9-1863:73|-1|1|0","uses":[],"kind":255,"storage":0},{"id":123,"usr":717148015451189859,"detailed_name":"VISIT_AFTER","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_AFTER VISIT_FIELD (after)","comments":"","declarations":[],"spell":"1864:9-1864:20|-1|1|2","extent":"1864:9-1864:40|-1|1|0","uses":["2137:11-2137:22|-1|1|4"],"kind":255,"storage":0},{"id":124,"usr":18385244454819670355,"detailed_name":"VISIT_BEFORE","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_BEFORE VISIT_FIELD (before)","comments":"","declarations":[],"spell":"1865:9-1865:21|-1|1|2","extent":"1865:9-1865:42|-1|1|0","uses":["1910:11-1910:23|-1|1|4"],"kind":255,"storage":0},{"id":125,"usr":6115339617513784223,"detailed_name":"VISIT_CORRUPT","short_name_offset":0,"short_name_size":13,"hover":"#define VISIT_CORRUPT\n   if (visitor->visit_corrupt)\n   visitor->visit_corrupt","comments":"","declarations":[],"spell":"1866:9-1866:22|-1|1|2","extent":"1866:9-1868:26|-1|1|0","uses":["2149:7-2149:20|-1|1|4"],"kind":255,"storage":0},{"id":126,"usr":1985812524994759770,"detailed_name":"VISIT_DOUBLE","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_DOUBLE VISIT_FIELD (double)","comments":"","declarations":[],"spell":"1869:9-1869:21|-1|1|2","extent":"1869:9-1869:42|-1|1|0","uses":["1917:14-1917:26|-1|1|4"],"kind":255,"storage":0},{"id":127,"usr":10577332382430598387,"detailed_name":"VISIT_UTF8","short_name_offset":0,"short_name_size":10,"hover":"#define VISIT_UTF8 VISIT_FIELD (utf8)","comments":"","declarations":[],"spell":"1870:9-1870:19|-1|1|2","extent":"1870:9-1870:38|-1|1|0","uses":["1933:14-1933:24|-1|1|4"],"kind":255,"storage":0},{"id":128,"usr":18337118476188875983,"detailed_name":"VISIT_DOCUMENT","short_name_offset":0,"short_name_size":14,"hover":"#define VISIT_DOCUMENT VISIT_FIELD (document)","comments":"","declarations":[],"spell":"1871:9-1871:23|-1|1|2","extent":"1871:9-1871:46|-1|1|0","uses":["1945:14-1945:28|-1|1|4"],"kind":255,"storage":0},{"id":129,"usr":8602444495172463946,"detailed_name":"VISIT_ARRAY","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_ARRAY VISIT_FIELD (array)","comments":"","declarations":[],"spell":"1872:9-1872:20|-1|1|2","extent":"1872:9-1872:40|-1|1|0","uses":["1957:14-1957:25|-1|1|4"],"kind":255,"storage":0},{"id":130,"usr":5921384864763901501,"detailed_name":"VISIT_BINARY","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_BINARY VISIT_FIELD (binary)","comments":"","declarations":[],"spell":"1873:9-1873:21|-1|1|2","extent":"1873:9-1873:42|-1|1|0","uses":["1968:14-1968:26|-1|1|4"],"kind":255,"storage":0},{"id":131,"usr":18282011268715845438,"detailed_name":"VISIT_UNDEFINED","short_name_offset":0,"short_name_size":15,"hover":"#define VISIT_UNDEFINED VISIT_FIELD (undefined)","comments":"","declarations":[],"spell":"1874:9-1874:24|-1|1|2","extent":"1874:9-1874:48|-1|1|0","uses":["1974:14-1974:29|-1|1|4"],"kind":255,"storage":0},{"id":132,"usr":10240937244800612414,"detailed_name":"VISIT_OID","short_name_offset":0,"short_name_size":9,"hover":"#define VISIT_OID VISIT_FIELD (oid)","comments":"","declarations":[],"spell":"1875:9-1875:18|-1|1|2","extent":"1875:9-1875:36|-1|1|0","uses":["1981:14-1981:23|-1|1|4"],"kind":255,"storage":0},{"id":133,"usr":15493742004975783356,"detailed_name":"VISIT_BOOL","short_name_offset":0,"short_name_size":10,"hover":"#define VISIT_BOOL VISIT_FIELD (bool)","comments":"","declarations":[],"spell":"1876:9-1876:19|-1|1|2","extent":"1876:9-1876:38|-1|1|0","uses":["1988:14-1988:24|-1|1|4"],"kind":255,"storage":0},{"id":134,"usr":11841195585216841779,"detailed_name":"VISIT_DATE_TIME","short_name_offset":0,"short_name_size":15,"hover":"#define VISIT_DATE_TIME VISIT_FIELD (date_time)","comments":"","declarations":[],"spell":"1877:9-1877:24|-1|1|2","extent":"1877:9-1877:48|-1|1|0","uses":["1995:14-1995:29|-1|1|4"],"kind":255,"storage":0},{"id":135,"usr":835601110527165660,"detailed_name":"VISIT_NULL","short_name_offset":0,"short_name_size":10,"hover":"#define VISIT_NULL VISIT_FIELD (null)","comments":"","declarations":[],"spell":"1878:9-1878:19|-1|1|2","extent":"1878:9-1878:38|-1|1|0","uses":["2002:14-2002:24|-1|1|4"],"kind":255,"storage":0},{"id":136,"usr":6518173600526315595,"detailed_name":"VISIT_REGEX","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_REGEX VISIT_FIELD (regex)","comments":"","declarations":[],"spell":"1879:9-1879:20|-1|1|2","extent":"1879:9-1879:40|-1|1|0","uses":["2017:14-2017:25|-1|1|4"],"kind":255,"storage":0},{"id":137,"usr":16813237532461276705,"detailed_name":"VISIT_DBPOINTER","short_name_offset":0,"short_name_size":15,"hover":"#define VISIT_DBPOINTER VISIT_FIELD (dbpointer)","comments":"","declarations":[],"spell":"1880:9-1880:24|-1|1|2","extent":"1880:9-1880:48|-1|1|0","uses":["2033:14-2033:29|-1|1|4"],"kind":255,"storage":0},{"id":138,"usr":7021425613804523823,"detailed_name":"VISIT_CODE","short_name_offset":0,"short_name_size":10,"hover":"#define VISIT_CODE VISIT_FIELD (code)","comments":"","declarations":[],"spell":"1881:9-1881:19|-1|1|2","extent":"1881:9-1881:38|-1|1|0","uses":["2049:14-2049:24|-1|1|4"],"kind":255,"storage":0},{"id":139,"usr":16444913030006829508,"detailed_name":"VISIT_SYMBOL","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_SYMBOL VISIT_FIELD (symbol)","comments":"","declarations":[],"spell":"1882:9-1882:21|-1|1|2","extent":"1882:9-1882:42|-1|1|0","uses":["2064:14-2064:26|-1|1|4"],"kind":255,"storage":0},{"id":140,"usr":17285404637326794798,"detailed_name":"VISIT_CODEWSCOPE","short_name_offset":0,"short_name_size":16,"hover":"#define VISIT_CODEWSCOPE VISIT_FIELD (codewscope)","comments":"","declarations":[],"spell":"1883:9-1883:25|-1|1|2","extent":"1883:9-1883:50|-1|1|0","uses":["2083:14-2083:30|-1|1|4"],"kind":255,"storage":0},{"id":141,"usr":8741849119592964638,"detailed_name":"VISIT_INT32","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_INT32 VISIT_FIELD (int32)","comments":"","declarations":[],"spell":"1884:9-1884:20|-1|1|2","extent":"1884:9-1884:40|-1|1|0","uses":["2089:14-2089:25|-1|1|4"],"kind":255,"storage":0},{"id":142,"usr":7289095790022330647,"detailed_name":"VISIT_TIMESTAMP","short_name_offset":0,"short_name_size":15,"hover":"#define VISIT_TIMESTAMP VISIT_FIELD (timestamp)","comments":"","declarations":[],"spell":"1885:9-1885:24|-1|1|2","extent":"1885:9-1885:48|-1|1|0","uses":["2099:14-2099:29|-1|1|4"],"kind":255,"storage":0},{"id":143,"usr":17222763349751548626,"detailed_name":"VISIT_INT64","short_name_offset":0,"short_name_size":11,"hover":"#define VISIT_INT64 VISIT_FIELD (int64)","comments":"","declarations":[],"spell":"1886:9-1886:20|-1|1|2","extent":"1886:9-1886:40|-1|1|0","uses":["2105:14-2105:25|-1|1|4"],"kind":255,"storage":0},{"id":144,"usr":15719002802268355065,"detailed_name":"VISIT_DECIMAL128","short_name_offset":0,"short_name_size":16,"hover":"#define VISIT_DECIMAL128 VISIT_FIELD (decimal128)","comments":"","declarations":[],"spell":"1887:9-1887:25|-1|1|2","extent":"1887:9-1887:50|-1|1|0","uses":["2114:14-2114:30|-1|1|4"],"kind":255,"storage":0},{"id":145,"usr":7578729551463731477,"detailed_name":"VISIT_MAXKEY","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_MAXKEY VISIT_FIELD (maxkey)","comments":"","declarations":[],"spell":"1888:9-1888:21|-1|1|2","extent":"1888:9-1888:42|-1|1|0","uses":["2120:14-2120:26|-1|1|4"],"kind":255,"storage":0},{"id":146,"usr":2588145811036484930,"detailed_name":"VISIT_MINKEY","short_name_offset":0,"short_name_size":12,"hover":"#define VISIT_MINKEY VISIT_FIELD (minkey)","comments":"","declarations":[],"spell":"1889:9-1889:21|-1|1|2","extent":"1889:9-1889:42|-1|1|0","uses":["2127:14-2127:26|-1|1|4"],"kind":255,"storage":0}]}