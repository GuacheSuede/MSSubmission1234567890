16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/mongoc-topology.c","args_hash":10433645398913005206,"includes":[],"dependencies":[],"skipped_by_preprocessor":["778:1-780:6","1145:1-1147:6"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4,5,6,7,8,9,11,12,13,14,16,17,18,21,22,23,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,68,70,71,72,73,74,75,76,77,80,81],"uses":[]},{"id":1,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10,15,24,63],"uses":[]},{"id":2,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[19,20,33,44,69,78,79],"uses":[]}],"funcs":[{"id":0,"usr":2138549083484065203,"detailed_name":"static void _mongoc_topology_background_thread_stop(int *topology)","short_name_offset":12,"short_name_size":39,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_background_thread_stop --\n\n       Stop the topology background thread. Called by the owning pool at\n       its destruction.\n\n       NOTE: this method uses @topology's mutex.\n\n--------------------------------------------------------------------------","declarations":[{"spell":"34:1-34:40|-1|1|1","param_spellings":["34:61-34:69"]}],"spell":"1231:1-1231:40|-1|1|2","extent":"1230:1-1265:2|-1|1|0","bases":[],"derived":[],"vars":[67],"uses":[],"callees":[]},{"id":1,"usr":10772392440193849350,"detailed_name":"static int _mongoc_topology_reconcile_add_nodes(int *sd, int *topology)","short_name_offset":11,"short_name_size":36,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"37:1-37:37|-1|1|2","extent":"36:1-51:2|-1|1|0","bases":[],"derived":[],"vars":[0,1],"uses":[],"callees":[]},{"id":2,"usr":9044220952624388690,"detailed_name":"void mongoc_topology_reconcile(int *topology)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"54:1-54:26|-1|1|2","extent":"53:1-79:2|-1|1|0","bases":[],"derived":[],"vars":[2,3],"uses":[],"callees":[]},{"id":3,"usr":15013155951868346647,"detailed_name":"static int _mongoc_topology_update_no_lock(int id, const int *ismaster_response, int rtt_msec, int *topology, const int *error)","short_name_offset":11,"short_name_size":31,"kind":12,"storage":3,"hover":"","comments":"call this while already holding the lock","declarations":[],"spell":"84:1-84:32|-1|1|2","extent":"83:1-96:2|-1|1|0","bases":[],"derived":[],"vars":[4,5,6,7,8],"uses":[],"callees":[]},{"id":4,"usr":16261902441867970726,"detailed_name":"void _mongoc_topology_scanner_setup_err_cb(int id, void *data, const int *error)","short_name_offset":5,"short_name_size":37,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n _mongoc_topology_scanner_setup_err_cb --\n\n       Callback method to handle errors during topology scanner node\n       setup, typically DNS or SSL errors.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"111:1-111:38|-1|1|2","extent":"110:1-126:2|-1|1|0","bases":[],"derived":[],"vars":[9,10,11],"uses":[],"callees":[]},{"id":5,"usr":6240509497727481649,"detailed_name":"void _mongoc_topology_scanner_cb(int id, const int *ismaster_response, int rtt_msec, void *data, const int *error)","short_name_offset":5,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n _mongoc_topology_scanner_cb --\n\n       Callback method to handle ismaster responses received by async\n       command objects.\n\n       NOTE: This method locks the given topology's mutex.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"143:1-143:28|-1|1|2","extent":"142:1-184:2|-1|1|0","bases":[],"derived":[],"vars":[12,13,14,15,16],"uses":[],"callees":[]},{"id":6,"usr":11298361451397143734,"detailed_name":"int *mongoc_topology_new(const int *uri, int single_threaded)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_new --\n\n       Creates and returns a new topology object.\n\n Returns:\n       A new topology object.\n\n Side effects:\n       None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"202:1-202:20|-1|1|2","extent":"201:1-345:2|-1|1|0","bases":[],"derived":[],"vars":[17,18,19,20,21],"uses":[],"callees":[]},{"id":7,"usr":10464037458260876807,"detailed_name":"void mongoc_topology_set_apm_callbacks(int *topology, int *callbacks, void *context)","short_name_offset":5,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_set_apm_callbacks --\n\n       Set Application Performance Monitoring callbacks.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"356:1-356:34|-1|1|2","extent":"355:1-377:2|-1|1|0","bases":[],"derived":[],"vars":[22,23,24],"uses":[],"callees":[]},{"id":8,"usr":14403222638327440577,"detailed_name":"void mongoc_topology_destroy(int *topology)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_destroy --\n\n       Free the memory associated with this topology object.\n\n Returns:\n       None.\n\n Side effects:\n       @topology will be cleaned up.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"395:1-395:24|-1|1|2","extent":"394:1-421:2|-1|1|0","bases":[],"derived":[],"vars":[25],"uses":[],"callees":[]},{"id":9,"usr":6208598269768524331,"detailed_name":"static void mongoc_topology_scan_once(int *topology, int obey_cooldown)","short_name_offset":12,"short_name_size":25,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_scan_once --\n\n      Runs a single complete scan.\n\n      NOTE: this method expects @topology's mutex to be locked on entry.\n\n      NOTE: this method unlocks and re-locks @topology's mutex.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"438:1-438:26|-1|1|2","extent":"437:1-457:2|-1|1|0","bases":[],"derived":[],"vars":[26,27],"uses":[],"callees":[]},{"id":10,"usr":17206623243935818854,"detailed_name":"void _mongoc_topology_do_blocking_scan(int *topology, int *error)","short_name_offset":5,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_do_blocking_scan --\n\n       Monitoring entry for single-threaded use case. Assumes the caller\n       has checked that it's the right time to scan.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"471:1-471:34|-1|1|2","extent":"470:1-482:2|-1|1|0","bases":[],"derived":[],"vars":[28,29],"uses":[],"callees":[]},{"id":11,"usr":5631273397475876677,"detailed_name":"int mongoc_topology_compatible(const int *td, const int *read_prefs, int *error)","short_name_offset":4,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"486:1-486:27|-1|1|2","extent":"485:1-536:2|-1|1|0","bases":[],"derived":[],"vars":[30,31,32],"uses":[],"callees":[]},{"id":12,"usr":17218052563616115345,"detailed_name":"static void _mongoc_server_selection_error(const char *msg, const int *scanner_error, int *error)","short_name_offset":12,"short_name_size":30,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"540:1-540:31|-1|1|2","extent":"539:1-558:2|-1|1|0","bases":[],"derived":[],"vars":[33,34,35],"uses":[],"callees":[]},{"id":13,"usr":5183959613703237328,"detailed_name":"int *mongoc_topology_select(int *topology, int optype, const int *read_prefs, int *error)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_select --\n\n       Selects a server description for an operation based on @optype\n       and @read_prefs.\n\n       NOTE: this method returns a copy of the original server\n       description. Callers must own and clean up this copy.\n\n       NOTE: this method locks and unlocks @topology's mutex.\n\n Parameters:\n       @topology: The topology.\n       @optype: Whether we are selecting for a read or write operation.\n       @read_prefs: Required, the read preferences for the command.\n       @error: Required, out pointer for error info.\n\n Returns:\n       A mongoc_server_description_t, or NULL on failure, in which case\n       @error will be set.\n\n Side effects:\n       @error may be set.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"589:1-589:23|-1|1|2","extent":"588:1-603:2|-1|1|0","bases":[],"derived":[],"vars":[36,37,38,39],"uses":[],"callees":[]},{"id":14,"usr":7205588356842642127,"detailed_name":"int mongoc_topology_select_server_id(int *topology, int optype, const int *read_prefs, int *error)","short_name_offset":4,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_select_server_id --\n\n       Alternative to mongoc_topology_select when you only need the id.\n\n Returns:\n       A server id, or 0 on failure, in which case @error will be set.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"618:1-618:33|-1|1|2","extent":"617:1-810:2|-1|1|0","bases":[],"derived":[],"vars":[40,41,42,43,44,45],"uses":[],"callees":[]},{"id":15,"usr":17189361289834546555,"detailed_name":"int *mongoc_topology_server_by_id(int *topology, int id, int *error)","short_name_offset":5,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_server_by_id --\n\n      Get the server description for @id, if that server is present\n      in @description. Otherwise, return NULL and fill out the optional\n      @error.\n\n      NOTE: this method returns a copy of the original server\n      description. Callers must own and clean up this copy.\n\n      NOTE: this method locks and unlocks @topology's mutex.\n\n Returns:\n      A mongoc_server_description_t, or NULL.\n\n Side effects:\n      Fills out optional @error if server not found.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"836:1-836:29|-1|1|2","extent":"835:1-851:2|-1|1|0","bases":[],"derived":[],"vars":[46,47,48],"uses":[],"callees":[]},{"id":16,"usr":7142566011724167022,"detailed_name":"int *_mongoc_topology_host_by_id(int *topology, int id, int *error)","short_name_offset":5,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_host_by_id --\n\n      Copy the mongoc_host_list_t for @id, if that server is present\n      in @description. Otherwise, return NULL and fill out the optional\n      @error.\n\n      NOTE: this method returns a copy of the original mongoc_host_list_t.\n      Callers must own and clean up this copy.\n\n      NOTE: this method locks and unlocks @topology's mutex.\n\n Returns:\n      A mongoc_host_list_t, or NULL.\n\n Side effects:\n      Fills out optional @error if server not found.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"877:1-877:28|-1|1|2","extent":"876:1-898:2|-1|1|0","bases":[],"derived":[],"vars":[49,50,51],"uses":[],"callees":[]},{"id":17,"usr":4534872405897872092,"detailed_name":"void _mongoc_topology_request_scan(int *topology)","short_name_offset":5,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_request_scan --\n\n       Non-locking variant\n\n--------------------------------------------------------------------------","declarations":[],"spell":"911:1-911:30|-1|1|2","extent":"910:1-916:2|-1|1|0","bases":[],"derived":[],"vars":[52],"uses":[],"callees":[]},{"id":18,"usr":2934490119859106819,"detailed_name":"void mongoc_topology_invalidate_server(int *topology, int id, const int *error)","short_name_offset":5,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_invalidate_server --\n\n      Invalidate the given server after receiving a network error in\n      another part of the client.\n\n      NOTE: this method uses @topology's mutex.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"931:1-931:34|-1|1|2","extent":"930:1-941:2|-1|1|0","bases":[],"derived":[],"vars":[53,54,55],"uses":[],"callees":[]},{"id":19,"usr":8631596285182582774,"detailed_name":"int _mongoc_topology_update_from_handshake(int *topology, const int *sd)","short_name_offset":4,"short_name_size":38,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_update_from_handshake --\n\n      A client opens a new connection and calls ismaster on it when it\n      detects a closed connection in _mongoc_cluster_check_interval, or if\n      mongoc_client_pool_pop creates a new client. Update the topology\n      description from the ismaster response.\n\n      NOTE: this method uses @topology's mutex.\n\n Returns:\n      false if the server was removed from the topology\n--------------------------------------------------------------------------","declarations":[],"spell":"960:1-960:39|-1|1|2","extent":"959:1-979:2|-1|1|0","bases":[],"derived":[],"vars":[56,57],"uses":[],"callees":[]},{"id":20,"usr":1383087222086766536,"detailed_name":"void _mongoc_topology_update_last_used(int *topology, int server_id)","short_name_offset":5,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_update_last_used --\n\n       Internal function. In single-threaded mode only, track when the socket\n       to a particular server was last used. This is required for\n       mongoc_cluster_check_interval to know when a socket has been idle.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"994:1-994:34|-1|1|2","extent":"993:1-1007:2|-1|1|0","bases":[],"derived":[],"vars":[58,59],"uses":[],"callees":[]},{"id":21,"usr":13520936685638346100,"detailed_name":"int mongoc_topology_server_timestamp(int *topology, int id)","short_name_offset":4,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_server_timestamp --\n\n      Return the topology's scanner's timestamp for the given server,\n      or -1 if there is no scanner node for the given server.\n\n      NOTE: this method uses @topology's mutex.\n\n Returns:\n      Timestamp, or -1\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1025:1-1025:33|-1|1|2","extent":"1024:1-1040:2|-1|1|0","bases":[],"derived":[],"vars":[60,61],"uses":[],"callees":[]},{"id":22,"usr":6206855096578418480,"detailed_name":"int _mongoc_topology_get_type(int *topology)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_get_type --\n\n      Return the topology's description's type.\n\n      NOTE: this method uses @topology's mutex.\n\n Returns:\n      The topology description type.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1057:1-1057:26|-1|1|2","extent":"1056:1-1068:2|-1|1|0","bases":[],"derived":[],"vars":[62],"uses":[],"callees":[]},{"id":23,"usr":3070767138744036297,"detailed_name":"static void *_mongoc_topology_run_background(void *data)","short_name_offset":13,"short_name_size":31,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_run_background --\n\n       The background topology monitoring thread runs in this loop.\n\n       NOTE: this method uses @topology's mutex.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1082:1-1082:32|-1|1|2","extent":"1081:1-1169:2|-1|1|0","bases":[],"derived":[],"vars":[63,64],"uses":[],"callees":[]},{"id":24,"usr":15413326269905961829,"detailed_name":"int _mongoc_topology_start_background_scanner(int *topology)","short_name_offset":4,"short_name_size":41,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_start_background_scanner\n\n       Start the topology background thread running. This should only be\n       called once per pool. If clients are created separately (not\n       through a pool) the SDAM logic will not be run in a background\n       thread. Returns whether or not the scanner is running on termination\n       of the function.\n\n       NOTE: this method uses @topology's mutex.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1188:1-1188:42|-1|1|2","extent":"1187:1-1215:2|-1|1|0","bases":[],"derived":[],"vars":[65,66],"uses":[],"callees":[]},{"id":25,"usr":15699976090246919192,"detailed_name":"int _mongoc_topology_set_appname(int *topology, const char *appname)","short_name_offset":4,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1268:1-1268:29|-1|1|2","extent":"1267:1-1280:2|-1|1|0","bases":[],"derived":[],"vars":[68,69],"uses":[],"callees":[]},{"id":26,"usr":6867421478188671837,"detailed_name":"void _mongoc_topology_update_cluster_time(int *topology, const int *reply)","short_name_offset":5,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_update_cluster_time --\n\n       Internal function. If the server reply has a later $clusterTime than\n       any seen before, update the topology's clusterTime. See the Driver\n       Sessions Spec.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1295:1-1295:37|-1|1|2","extent":"1294:1-1304:2|-1|1|0","bases":[],"derived":[],"vars":[70,71],"uses":[],"callees":[]},{"id":27,"usr":17737294759179118823,"detailed_name":"int *_mongoc_topology_pop_server_session(int *topology, int *error)","short_name_offset":5,"short_name_size":35,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_pop_server_session --\n\n       Internal function. Get a server session from the pool or create\n       one. On error, return NULL and fill out @error.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1319:1-1319:36|-1|1|2","extent":"1318:1-1374:2|-1|1|0","bases":[],"derived":[],"vars":[72,73],"uses":[],"callees":[]},{"id":28,"usr":1564658951568204683,"detailed_name":"void _mongoc_topology_push_server_session(int *topology, int *server_session)","short_name_offset":5,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_push_server_session --\n\n       Internal function. Return a server session to the pool.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1387:1-1387:37|-1|1|2","extent":"1386:1-1424:2|-1|1|0","bases":[],"derived":[],"vars":[74,75],"uses":[],"callees":[]},{"id":29,"usr":2622295892820416402,"detailed_name":"int _mongoc_topology_end_sessions_cmd(int *topology, int *cmd)","short_name_offset":4,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_end_sessions --\n\n       Internal function. End up to 10,000 server sessions. @cmd is an\n       uninitialized document. Sessions are destroyed as their ids are\n       appended to @cmd.\n\n       Driver Sessions Spec: \"If the number of sessions is very large the\n       endSessions command SHOULD be run multiple times to end 10,000\n       sessions at a time (in order to avoid creating excessively large\n       commands).\"\n\n Returns:\n      true if any session ids were appended to @cmd.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1448:1-1448:34|-1|1|2","extent":"1447:1-1475:2|-1|1|0","bases":[],"derived":[],"vars":[76,77,78,79],"uses":[],"callees":[]},{"id":30,"usr":8540755967391463231,"detailed_name":"const int *_mongoc_topology_get_ismaster(int *topology)","short_name_offset":11,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_get_ismaster --\n\n       Locks topology->mutex and retrieves (possibly constructing) the\n       handshake on the topology scanner.\n\n Returns:\n      A bson_t representing an ismaster command.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1491:1-1491:30|-1|1|2","extent":"1490:1-1498:2|-1|1|0","bases":[],"derived":[],"vars":[80,81],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":1495836502192902929,"detailed_name":"int *sd","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"37:68-37:70|1|3|2","extent":"37:39-37:70|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":16945172380241456657,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"38:58-38:66|1|3|2","extent":"38:39-38:66|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":2,"usr":11763349952858684496,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"54:47-54:55|2|3|2","extent":"54:28-54:55|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":3,"usr":17478619989869615450,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"59:8-59:9|2|3|2","extent":"59:4-59:9|2|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":4,"usr":2294878325356374119,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"84:43-84:45|3|3|2","extent":"84:34-84:45|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":5,"usr":17177978036810223277,"detailed_name":"const int *ismaster_response","short_name_offset":11,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"85:48-85:65|3|3|2","extent":"85:34-85:65|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":6,"usr":10181143994095793876,"detailed_name":"int rtt_msec","short_name_offset":4,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"86:42-86:50|3|3|2","extent":"86:34-86:50|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":7,"usr":5702911823862977560,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"87:53-87:61|3|3|2","extent":"87:34-87:61|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":8,"usr":16379463659471932436,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"88:54-88:59|3|3|2","extent":"88:34-88:59|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":9,"usr":15378763364769734044,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"111:49-111:51|4|3|2","extent":"111:40-111:51|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":10,"usr":9195324984901300393,"detailed_name":"void *data","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"112:46-112:50|4|3|2","extent":"112:40-112:50|4|3|0","type":1,"uses":["117:17-117:21|4|3|12"],"kind":253,"storage":1},{"id":11,"usr":11113678316234543278,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"113:60-113:65|4|3|2","extent":"113:40-113:65|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":12,"usr":6357470750109242403,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"143:39-143:41|5|3|2","extent":"143:30-143:41|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":13,"usr":13044287916486686117,"detailed_name":"const int *ismaster_response","short_name_offset":11,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"144:44-144:61|5|3|2","extent":"144:30-144:61|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":14,"usr":6885922366573777489,"detailed_name":"int rtt_msec","short_name_offset":4,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"145:38-145:46|5|3|2","extent":"145:30-145:46|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":15,"usr":10110265577477070252,"detailed_name":"void *data","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"146:36-146:40|5|3|2","extent":"146:30-146:40|5|3|0","type":1,"uses":["152:17-152:21|5|3|12"],"kind":253,"storage":1},{"id":16,"usr":15156373767667988630,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"147:50-147:55|5|3|2","extent":"147:30-147:55|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":17,"usr":10750291845169261088,"detailed_name":"const int *uri","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"202:42-202:45|6|3|2","extent":"202:22-202:45|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":18,"usr":570864617107524124,"detailed_name":"int single_threaded","short_name_offset":4,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"202:52-202:67|6|3|2","extent":"202:47-202:67|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":19,"usr":1729217394429535764,"detailed_name":"const char *service","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"209:16-209:23|6|3|2","extent":"209:4-209:23|6|3|0","type":2,"uses":["295:8-295:15|6|3|12","297:66-297:73|6|3|12"],"kind":13,"storage":1},{"id":20,"usr":12725913193018795278,"detailed_name":"char *prefixed_service","short_name_offset":6,"short_name_size":16,"hover":"","comments":"","declarations":[],"spell":"210:10-210:26|6|3|2","extent":"210:4-210:26|6|3|0","type":2,"uses":["297:7-297:23|6|3|20","309:18-309:34|6|3|12"],"kind":13,"storage":1},{"id":21,"usr":17236385509359682904,"detailed_name":"const int *hl","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"212:30-212:32|6|3|2","extent":"212:4-212:32|6|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":22,"usr":18370972874388786449,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"356:55-356:63|7|3|2","extent":"356:36-356:63|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":23,"usr":9200423017552815343,"detailed_name":"int *callbacks","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"357:60-357:69|7|3|2","extent":"357:36-357:69|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":24,"usr":17198625280066501401,"detailed_name":"void *context","short_name_offset":6,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"358:42-358:49|7|3|2","extent":"358:36-358:49|7|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":25,"usr":399209561018984764,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"395:45-395:53|8|3|2","extent":"395:26-395:53|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":26,"usr":12285379380322018970,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"438:47-438:55|9|3|2","extent":"438:28-438:55|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":27,"usr":12446761308610152752,"detailed_name":"int obey_cooldown","short_name_offset":4,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"438:62-438:75|9|3|2","extent":"438:57-438:75|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":28,"usr":4408755018540516349,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"471:55-471:63|10|3|2","extent":"471:36-471:63|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":29,"usr":15957865338960415961,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"472:50-472:55|10|3|2","extent":"472:36-472:55|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":30,"usr":6006186094604292886,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"486:66-486:68|11|3|2","extent":"486:29-486:68|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":31,"usr":3006314234642916745,"detailed_name":"const int *read_prefs","short_name_offset":11,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"487:56-487:66|11|3|2","extent":"487:29-487:66|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":32,"usr":17948079315928966068,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"488:43-488:48|11|3|2","extent":"488:29-488:48|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":33,"usr":8814077919915537657,"detailed_name":"const char *msg","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"540:45-540:48|12|3|2","extent":"540:33-540:48|12|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":34,"usr":15892054935939883865,"detailed_name":"const int *scanner_error","short_name_offset":11,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"541:53-541:66|12|3|2","extent":"541:33-541:66|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":35,"usr":208555713963859116,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"542:47-542:52|12|3|2","extent":"542:33-542:52|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":36,"usr":17362585455119040411,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"589:44-589:52|13|3|2","extent":"589:25-589:52|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":37,"usr":10256643931530379595,"detailed_name":"int optype","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"590:44-590:50|13|3|2","extent":"590:25-590:50|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":38,"usr":3687667576535314066,"detailed_name":"const int *read_prefs","short_name_offset":11,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"591:52-591:62|13|3|2","extent":"591:25-591:62|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":39,"usr":8421275885656648419,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"592:39-592:44|13|3|2","extent":"592:25-592:44|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":40,"usr":17379543648030024247,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"618:54-618:62|14|3|2","extent":"618:35-618:62|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":41,"usr":11508847227305469532,"detailed_name":"int optype","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"619:54-619:60|14|3|2","extent":"619:35-619:60|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":42,"usr":495833024154931378,"detailed_name":"const int *read_prefs","short_name_offset":11,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"620:62-620:72|14|3|2","extent":"620:35-620:72|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":43,"usr":16786853331980742293,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"621:49-621:54|14|3|2","extent":"621:35-621:54|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":44,"usr":1332959565910473263,"detailed_name":"const char *timeout_msg","short_name_offset":12,"short_name_size":11,"hover":"const char *timeout_msg =\n      \"No suitable servers found: `serverSelectionTimeoutMS` expired\"","comments":"","declarations":[],"spell":"623:23-623:34|14|3|2","extent":"623:4-624:70|14|3|0","type":2,"uses":[],"kind":13,"storage":3},{"id":45,"usr":2363650525834337933,"detailed_name":"int r","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"627:8-627:9|14|3|2","extent":"627:4-627:9|14|3|0","type":0,"uses":["787:21-787:22|14|3|12"],"kind":13,"storage":1},{"id":46,"usr":6110243079883318228,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"836:50-836:58|15|3|2","extent":"836:31-836:58|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":47,"usr":8172387387922713119,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"837:40-837:42|15|3|2","extent":"837:31-837:42|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":48,"usr":6967371876517457761,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"838:45-838:50|15|3|2","extent":"838:31-838:50|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":49,"usr":866623814665169666,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"877:49-877:57|16|3|2","extent":"877:30-877:57|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":50,"usr":6288966746281529091,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"878:39-878:41|16|3|2","extent":"878:30-878:41|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":51,"usr":9441504222813862561,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"879:44-879:49|16|3|2","extent":"879:30-879:49|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":52,"usr":2454716919118452516,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"911:51-911:59|17|3|2","extent":"911:32-911:59|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":53,"usr":13560250621829983599,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"931:55-931:63|18|3|2","extent":"931:36-931:63|18|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":54,"usr":10180823630654492624,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"932:45-932:47|18|3|2","extent":"932:36-932:47|18|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":55,"usr":18293173692281352022,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"933:56-933:61|18|3|2","extent":"933:36-933:61|18|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":56,"usr":11867456040669833103,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"960:60-960:68|19|3|2","extent":"960:41-960:68|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":57,"usr":14865783198293896900,"detailed_name":"const int *sd","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"961:76-961:78|19|3|2","extent":"961:41-961:78|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":58,"usr":1013760445813792369,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"994:55-994:63|20|3|2","extent":"994:36-994:63|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":59,"usr":9208964822239760706,"detailed_name":"int server_id","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"995:45-995:54|20|3|2","extent":"995:36-995:54|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":60,"usr":553117903036017543,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1025:54-1025:62|21|3|2","extent":"1025:35-1025:62|21|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":61,"usr":8662329678099518887,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1025:73-1025:75|21|3|2","extent":"1025:64-1025:75|21|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":62,"usr":2494322307855521905,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1057:47-1057:55|22|3|2","extent":"1057:28-1057:55|22|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":63,"usr":14095773455265055054,"detailed_name":"void *data","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1082:40-1082:44|23|3|2","extent":"1082:34-1082:44|23|3|0","type":1,"uses":["1092:17-1092:21|23|3|12"],"kind":253,"storage":1},{"id":64,"usr":1782697177211934774,"detailed_name":"int r","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"1090:8-1090:9|23|3|2","extent":"1090:4-1090:9|23|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":65,"usr":9955310736442297863,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1188:63-1188:71|24|3|2","extent":"1188:44-1188:71|24|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":66,"usr":12815716360611266413,"detailed_name":"int r","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"1190:8-1190:9|24|3|2","extent":"1190:4-1190:9|24|3|0","type":0,"uses":["1206:11-1206:12|24|3|12","1208:34-1208:35|24|3|12"],"kind":13,"storage":1},{"id":67,"usr":9526752571843132150,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1231:61-1231:69|0|3|2","extent":"1231:42-1231:69|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":68,"usr":9077324037473109457,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1268:50-1268:58|25|3|2","extent":"1268:31-1268:58|25|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":69,"usr":16643346447219521262,"detailed_name":"const char *appname","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1268:72-1268:79|25|3|2","extent":"1268:60-1268:79|25|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":70,"usr":891496116372711869,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1295:58-1295:66|26|3|2","extent":"1295:39-1295:66|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":71,"usr":3017645123667542123,"detailed_name":"const int *reply","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1296:53-1296:58|26|3|2","extent":"1296:39-1296:58|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":72,"usr":3348539725214651953,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1319:57-1319:65|27|3|2","extent":"1319:38-1319:65|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":73,"usr":13764686172145552499,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1320:52-1320:57|27|3|2","extent":"1320:38-1320:57|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":74,"usr":10432151243370729589,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1387:58-1387:66|28|3|2","extent":"1387:39-1387:66|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":75,"usr":4459473482086555030,"detailed_name":"int *server_session","short_name_offset":5,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"1388:64-1388:78|28|3|2","extent":"1388:39-1388:78|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":76,"usr":10752841326571940507,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1448:55-1448:63|29|3|2","extent":"1448:36-1448:63|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":77,"usr":5057787768895092195,"detailed_name":"int *cmd","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1448:73-1448:76|29|3|2","extent":"1448:65-1448:76|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":78,"usr":4174108517522789740,"detailed_name":"char [16] buf","short_name_offset":10,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1451:9-1451:12|29|3|2","extent":"1451:4-1451:16|29|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":79,"usr":2424868794262860120,"detailed_name":"const char *key","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1452:16-1452:19|29|3|2","extent":"1452:4-1452:19|29|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":80,"usr":4937575062463251456,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1491:51-1491:59|30|3|2","extent":"1491:32-1491:59|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":81,"usr":4815955187136019169,"detailed_name":"const int *cmd","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1493:18-1493:21|30|3|2","extent":"1493:4-1493:21|30|3|0","type":0,"uses":[],"kind":13,"storage":1}]}