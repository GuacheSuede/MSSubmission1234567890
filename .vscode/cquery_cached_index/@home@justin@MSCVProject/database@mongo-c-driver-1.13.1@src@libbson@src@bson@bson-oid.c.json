16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libbson/src/bson/bson-oid.c","args_hash":10433645398913005206,"includes":[{"line":18,"resolved_path":"/usr/local/lib/clang/7.0.0/include/limits.h"},{"line":19,"resolved_path":"/usr/local/lib/clang/7.0.0/include/stdarg.h"},{"line":20,"resolved_path":"/usr/include/stdlib.h"},{"line":21,"resolved_path":"/usr/include/string.h"}],"dependencies":["/usr/local/lib/clang/7.0.0/include/limits.h"],"skipped_by_preprocessor":["61:1-86:7","290:1-310:6"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4,5,6,7,9,10,12,13,14,15,16,17,18,20],"uses":[]},{"id":1,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8,11,19],"uses":[]}],"funcs":[{"id":0,"usr":1316145163569712345,"detailed_name":"void bson_oid_init_sequence(int *oid, int *context)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_init_sequence --\n\n       Initializes @oid with the next oid in the sequence. The first 4\n       bytes contain the current time and the following 8 contain a 64-bit\n       integer in big-endian format.\n\n       The bson_oid_t generated by this function is not guaranteed to be\n       globally unique. Only unique within this context. It is however,\n       guaranteed to be sequential.\n\n Returns:\n       None.\n\n Side effects:\n       @oid is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"113:1-113:23|-1|1|2","extent":"112:1-126:2|-1|1|0","bases":[],"derived":[],"vars":[1,2],"uses":[],"callees":[]},{"id":1,"usr":11998042044940171112,"detailed_name":"void bson_oid_init(int *oid, int *context)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_init --\n\n       Generates bytes for a new bson_oid_t and stores them in @oid. The\n       bytes will be generated according to the specification and includes\n       the current time, a 3 byte hash of the hostname, pid (or tid), and\n       monotonic counter.\n\n       The bson_oid_t generated by this function is not guaranteed to be\n       globally unique. Only unique within this context. It is however,\n       guaranteed to be sequential.\n\n Returns:\n       None.\n\n Side effects:\n       @oid is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"153:1-153:14|-1|1|2","extent":"152:1-170:2|-1|1|0","bases":[],"derived":[],"vars":[3,4],"uses":[],"callees":[]},{"id":2,"usr":5995504081894950391,"detailed_name":"void bson_oid_init_from_data(int *oid, const int *data)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"\nbson_oid_init_from_data:\n@oid: A bson_oid_t to initialize.\n@bytes: A 12-byte buffer to copy into @oid.\n\n\n\n--------------------------------------------------------------------------\n\nbson_oid_init_from_data --\n\n      Initializes an @oid from @data. @data MUST be a buffer of at least\n      12 bytes. This method is analogous to memcpy()'ing data into @oid.\n\nReturns:\n      None.\n\nSide effects:\n      @oid is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"197:1-197:24|-1|1|2","extent":"196:1-204:2|-1|1|0","bases":[],"derived":[],"vars":[5,6],"uses":[],"callees":[]},{"id":3,"usr":8955519093453284490,"detailed_name":"void bson_oid_init_from_string(int *oid, const char *str)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_init_from_string --\n\n       Parses @str containing hex formatted bytes of an object id and\n       places the bytes in @oid.\n\n Parameters:\n       @oid: A bson_oid_t\n       @str: A string containing at least 24 characters.\n\n Returns:\n       None.\n\n Side effects:\n       @oid is initialized.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"229:1-229:26|-1|1|2","extent":"228:1-236:2|-1|1|0","bases":[],"derived":[],"vars":[7,8],"uses":[],"callees":[]},{"id":4,"usr":8383368743509839823,"detailed_name":"int bson_oid_get_time_t(const int *oid)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_get_time_t --\n\n       Fetches the time for which @oid was created.\n\n Returns:\n       A time_t.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"256:1-256:20|-1|1|2","extent":"255:1-261:2|-1|1|0","bases":[],"derived":[],"vars":[9],"uses":[],"callees":[]},{"id":5,"usr":8972457288645372226,"detailed_name":"void bson_oid_to_string(const int *oid, char str[BSON_ENSURE_ARRAY_PARAM_SIZE(25)])","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_to_string --\n\n       Formats a bson_oid_t into a string. @str must contain enough bytes\n       for the resulting string which is 25 bytes with a terminating\n       NUL-byte.\n\n Parameters:\n       @oid: A bson_oid_t.\n       @str: A location to store the resulting string.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"287:1-287:19|-1|1|2","extent":"286:1-332:2|-1|1|0","bases":[],"derived":[],"vars":[10,11],"uses":[],"callees":[]},{"id":6,"usr":14220741918803609499,"detailed_name":"int bson_oid_hash(const int *oid)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_hash --\n\n       Hashes the bytes of the provided bson_oid_t using DJB hash.  This\n       allows bson_oid_t to be used as keys in a hash table.\n\n Returns:\n       A hash value corresponding to @oid.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"353:1-353:14|-1|1|2","extent":"352:1-358:2|-1|1|0","bases":[],"derived":[],"vars":[12],"uses":[],"callees":[]},{"id":7,"usr":1396455302386457858,"detailed_name":"int bson_oid_compare(const int *oid1, const int *oid2)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_compare --\n\n       A qsort() style compare function that will return less than zero if\n       @oid1 is less than @oid2, zero if they are the same, and greater\n       than zero if @oid2 is greater than @oid1.\n\n Returns:\n       A qsort() style compare integer.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"380:1-380:17|-1|1|2","extent":"379:1-387:2|-1|1|0","bases":[],"derived":[],"vars":[13,14],"uses":[],"callees":[]},{"id":8,"usr":14189660821166471599,"detailed_name":"int bson_oid_equal(const int *oid1, const int *oid2)","short_name_offset":4,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_equal --\n\n       Compares for equality of @oid1 and @oid2. If they are equal, then\n       true is returned, otherwise false.\n\n Returns:\n       A boolean indicating the equality of @oid1 and @oid2.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"408:1-408:15|-1|1|2","extent":"407:1-415:2|-1|1|0","bases":[],"derived":[],"vars":[15,16],"uses":[],"callees":[]},{"id":9,"usr":11039203573382097815,"detailed_name":"void bson_oid_copy(const int *src, int *dst)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_copy --\n\n       Copies the contents of @src to @dst.\n\n Parameters:\n       @src: A bson_oid_t to copy from.\n       @dst: A bson_oid_t to copy to.\n\n Returns:\n       None.\n\n Side effects:\n       @dst will contain a copy of the data in @src.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"439:1-439:14|-1|1|2","extent":"438:1-446:2|-1|1|0","bases":[],"derived":[],"vars":[17,18],"uses":[],"callees":[]},{"id":10,"usr":15405832068987775058,"detailed_name":"int bson_oid_is_valid(const char *str, int length)","short_name_offset":4,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_oid_is_valid --\n\n       Validates that @str is a valid OID string. @length MUST be 24, but\n       is provided as a parameter to simplify calling code.\n\n Parameters:\n       @str: A string to validate.\n       @length: The length of @str.\n\n Returns:\n       true if @str can be passed to bson_oid_init_from_string().\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"471:1-471:18|-1|1|2","extent":"470:1-516:2|-1|1|0","bases":[],"derived":[],"vars":[19,20],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":3434083666493323091,"detailed_name":"const int [] gHexCharPairs","short_name_offset":13,"short_name_size":13,"hover":"","comments":"\n This table contains an array of two character pairs for every possible\n uint8_t. It is used as a lookup table when encoding a bson_oid_t\n to hex formatted ASCII. Performing two characters at a time roughly\n reduces the number of operations by one-half.","declarations":[],"spell":"35:23-35:36|-1|1|2","type":0,"uses":[],"kind":13,"storage":3},{"id":1,"usr":3740825556653763509,"detailed_name":"int *oid","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"113:37-113:40|0|3|2","extent":"113:25-113:40|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":2,"usr":14410480049467916453,"detailed_name":"int *context","short_name_offset":5,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"114:41-114:48|0|3|2","extent":"114:25-114:48|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":3,"usr":5208331469836247496,"detailed_name":"int *oid","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"153:28-153:31|1|3|2","extent":"153:16-153:31|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":4,"usr":3944988686015355050,"detailed_name":"int *context","short_name_offset":5,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"154:32-154:39|1|3|2","extent":"154:16-154:39|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":5,"usr":9427295753713804509,"detailed_name":"int *oid","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"197:38-197:41|2|3|2","extent":"197:26-197:41|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":6,"usr":14945290312546136621,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"198:41-198:45|2|3|2","extent":"198:26-198:45|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":7,"usr":7158536565319990173,"detailed_name":"int *oid","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"229:40-229:43|3|3|2","extent":"229:28-229:43|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":8,"usr":1440897289002815531,"detailed_name":"const char *str","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"230:40-230:43|3|3|2","extent":"230:28-230:43|3|3|0","type":1,"uses":["233:17-233:20|3|3|12"],"kind":253,"storage":1},{"id":9,"usr":7282365338700899204,"detailed_name":"const int *oid","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"256:40-256:43|4|3|2","extent":"256:22-256:43|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":10,"usr":13973996195596982083,"detailed_name":"const int *oid","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"287:39-287:42|5|3|2","extent":"287:21-287:42|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":11,"usr":7575066331020220448,"detailed_name":"char [BSON_ENSURE_ARRAY_PARAM_SIZE(25)] str","short_name_offset":40,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"288:26-288:29|5|3|2","extent":"288:21-288:64|5|3|0","type":1,"uses":["315:17-315:20|5|3|12","330:4-330:7|5|3|12"],"kind":253,"storage":1},{"id":12,"usr":11474539451249990512,"detailed_name":"const int *oid","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"353:34-353:37|6|3|2","extent":"353:16-353:37|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":13,"usr":4414488725156091584,"detailed_name":"const int *oid1","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"380:37-380:41|7|3|2","extent":"380:19-380:41|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":14,"usr":3532027903003555352,"detailed_name":"const int *oid2","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"381:37-381:41|7|3|2","extent":"381:19-381:41|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":15,"usr":12723924251883813698,"detailed_name":"const int *oid1","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"408:35-408:39|8|3|2","extent":"408:17-408:39|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":16,"usr":10631863246252222308,"detailed_name":"const int *oid2","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"409:35-409:39|8|3|2","extent":"409:17-409:39|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":17,"usr":14754040105325799411,"detailed_name":"const int *src","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"439:34-439:37|9|3|2","extent":"439:16-439:37|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":18,"usr":8475772078965569691,"detailed_name":"int *dst","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"440:28-440:31|9|3|2","extent":"440:16-440:31|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":19,"usr":661325645565357161,"detailed_name":"const char *str","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"471:32-471:35|10|3|2","extent":"471:20-471:35|10|3|0","type":1,"uses":["476:17-476:20|10|3|12"],"kind":253,"storage":1},{"id":20,"usr":14290192407416474090,"detailed_name":"int length","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"472:27-472:33|10|3|2","extent":"472:20-472:33|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":21,"usr":15419018529832378694,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["290:36-290:46|-1|1|4"],"kind":0,"storage":0}]}