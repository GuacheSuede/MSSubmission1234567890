16
{"last_modification_time":1548363167,"language":2,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/iostream3/zfstream.cc","args_hash":13395560317524322968,"includes":[{"line":12,"resolved_path":"/usr/include/c++/8/istream"},{"line":13,"resolved_path":"/usr/include/c++/8/ostream"},{"line":14,"resolved_path":"/usr/include/zlib.h"}],"dependencies":["/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/iostream3/zfstream.cc","/usr/include/c++/8/istream","/usr/include/c++/8/ios","/usr/include/c++/8/iosfwd","/usr/include/x86_64-linux-gnu/c++/8/bits/c++config.h","/usr/include/x86_64-linux-gnu/c++/8/bits/os_defines.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/c++/8/bits/stringfwd.h","/usr/include/c++/8/bits/memoryfwd.h","/usr/include/c++/8/bits/postypes.h","/usr/include/c++/8/cwchar","/usr/include/wchar.h","/usr/include/x86_64-linux-gnu/bits/libc-header-start.h","/usr/include/x86_64-linux-gnu/bits/floatn.h","/usr/include/x86_64-linux-gnu/bits/floatn-common.h","/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h","/usr/include/x86_64-linux-gnu/bits/types/locale_t.h","/usr/include/c++/8/exception","/usr/include/c++/8/bits/exception.h","/usr/include/c++/8/bits/exception_ptr.h","/usr/include/c++/8/bits/cxxabi_init_exception.h","/usr/local/lib/clang/7.0.0/include/stddef.h","/usr/include/c++/8/typeinfo","/usr/include/c++/8/bits/hash_bytes.h","/usr/include/c++/8/new","/usr/include/c++/8/bits/nested_exception.h","/usr/include/c++/8/bits/move.h","/usr/include/c++/8/bits/concept_check.h","/usr/include/c++/8/type_traits","/usr/include/c++/8/bits/char_traits.h","/usr/include/c++/8/bits/stl_algobase.h","/usr/include/c++/8/bits/functexcept.h","/usr/include/c++/8/bits/cpp_type_traits.h","/usr/include/c++/8/ext/type_traits.h","/usr/include/c++/8/ext/numeric_traits.h","/usr/include/c++/8/bits/stl_pair.h","/usr/include/c++/8/bits/stl_iterator_base_types.h","/usr/include/c++/8/bits/stl_iterator_base_funcs.h","/usr/include/c++/8/bits/stl_iterator.h","/usr/include/c++/8/bits/ptr_traits.h","/usr/include/c++/8/debug/debug.h","/usr/include/c++/8/cstdint","/usr/local/lib/clang/7.0.0/include/stdint.h","/usr/include/stdint.h","/usr/include/x86_64-linux-gnu/bits/types.h","/usr/include/x86_64-linux-gnu/bits/stdint-intn.h","/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h","/usr/include/c++/8/bits/localefwd.h","/usr/include/x86_64-linux-gnu/c++/8/bits/c++locale.h","/usr/include/c++/8/clocale","/usr/include/locale.h","/usr/include/c++/8/cctype","/usr/include/ctype.h","/usr/include/endian.h","/usr/include/x86_64-linux-gnu/bits/byteswap.h","/usr/include/x86_64-linux-gnu/bits/uintn-identity.h","/usr/include/c++/8/bits/ios_base.h","/usr/include/c++/8/ext/atomicity.h","/usr/include/x86_64-linux-gnu/c++/8/bits/gthr.h","/usr/include/x86_64-linux-gnu/c++/8/bits/gthr-default.h","/usr/include/pthread.h","/usr/include/sched.h","/usr/include/x86_64-linux-gnu/bits/types/time_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h","/usr/include/x86_64-linux-gnu/bits/sched.h","/usr/include/time.h","/usr/include/x86_64-linux-gnu/bits/time.h","/usr/include/x86_64-linux-gnu/bits/timex.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h","/usr/include/x86_64-linux-gnu/bits/types/clock_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h","/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h","/usr/include/x86_64-linux-gnu/bits/types/timer_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h","/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h","/usr/include/x86_64-linux-gnu/bits/setjmp.h","/usr/include/c++/8/bits/locale_classes.h","/usr/include/c++/8/string","/usr/include/c++/8/bits/allocator.h","/usr/include/x86_64-linux-gnu/c++/8/bits/c++allocator.h","/usr/include/c++/8/ext/new_allocator.h","/usr/include/c++/8/bits/ostream_insert.h","/usr/include/c++/8/bits/stl_function.h","/usr/include/c++/8/bits/range_access.h","/usr/include/c++/8/initializer_list","/usr/include/c++/8/bits/basic_string.h","/usr/include/c++/8/ext/alloc_traits.h","/usr/include/c++/8/bits/alloc_traits.h","/usr/include/c++/8/ext/string_conversions.h","/usr/include/c++/8/cstdlib","/usr/include/stdlib.h","/usr/include/x86_64-linux-gnu/sys/types.h","/usr/include/x86_64-linux-gnu/sys/select.h","/usr/include/x86_64-linux-gnu/bits/select.h","/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h","/usr/include/alloca.h","/usr/include/c++/8/bits/std_abs.h","/usr/include/c++/8/cstdio","/usr/include/stdio.h","/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h","/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h","/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h","/usr/include/c++/8/cerrno","/usr/include/errno.h","/usr/include/x86_64-linux-gnu/bits/errno.h","/usr/include/linux/errno.h","/usr/include/x86_64-linux-gnu/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/include/c++/8/bits/functional_hash.h","/usr/include/c++/8/bits/basic_string.tcc","/usr/include/c++/8/system_error","/usr/include/x86_64-linux-gnu/c++/8/bits/error_constants.h","/usr/include/c++/8/stdexcept","/usr/include/c++/8/streambuf","/usr/include/c++/8/bits/basic_ios.h","/usr/include/c++/8/bits/locale_facets.h","/usr/include/c++/8/cwctype","/usr/include/wctype.h","/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h","/usr/include/c++/8/bits/streambuf_iterator.h","/usr/include/c++/8/ostream","/usr/include/c++/8/bits/ostream.tcc","/usr/include/c++/8/bits/istream.tcc","/usr/include/zlib.h","/usr/include/zconf.h","/usr/local/lib/clang/7.0.0/include/limits.h","/usr/include/limits.h","/usr/include/x86_64-linux-gnu/bits/posix1_lim.h","/usr/include/x86_64-linux-gnu/bits/local_lim.h","/usr/include/x86_64-linux-gnu/bits/xopen_lim.h","/usr/include/unistd.h","/usr/include/x86_64-linux-gnu/bits/environments.h","/usr/include/x86_64-linux-gnu/bits/getopt_posix.h","/usr/include/c++/8/cstring","/usr/include/string.h","/usr/include/strings.h","/usr/local/lib/clang/7.0.0/include/stdarg.h","/usr/include/x86_64-linux-gnu/bits/types/wint_t.h","/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h","/usr/include/x86_64-linux-gnu/bits/types/__FILE.h","/usr/include/x86_64-linux-gnu/bits/types/FILE.h","/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h","/usr/local/lib/clang/7.0.0/include/__stddef_max_align_t.h","/usr/include/c++/8/bits/predefined_ops.h","/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h","/usr/include/x86_64-linux-gnu/bits/cpu-set.h","/usr/include/x86_64-linux-gnu/c++/8/bits/atomic_word.h","/usr/include/c++/8/bits/cxxabi_forced.h","/usr/include/c++/8/backward/binders.h","/usr/include/x86_64-linux-gnu/bits/waitflags.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/usr/include/x86_64-linux-gnu/bits/sys_errlist.h","/usr/include/x86_64-linux-gnu/bits/types/error_t.h","/usr/include/c++/8/bits/locale_classes.tcc","/usr/include/c++/8/bits/streambuf.tcc","/usr/include/x86_64-linux-gnu/c++/8/bits/ctype_base.h","/usr/include/x86_64-linux-gnu/c++/8/bits/ctype_inline.h","/usr/include/c++/8/bits/locale_facets.tcc","/usr/include/c++/8/bits/basic_ios.tcc","/usr/include/x86_64-linux-gnu/bits/confname.h","/usr/include/x86_64-linux-gnu/bits/getopt_core.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h","/usr/include/x86_64-linux-gnu/c++/8/bits/cpu_defines.h","/usr/include/x86_64-linux-gnu/bits/wchar.h","/usr/include/c++/8/bits/exception_defines.h","/usr/include/c++/8/debug/assertions.h","/usr/include/x86_64-linux-gnu/bits/typesizes.h","/usr/include/x86_64-linux-gnu/bits/locale.h","/usr/include/x86_64-linux-gnu/bits/endian.h","/usr/include/x86_64-linux-gnu/bits/waitstatus.h","/usr/include/x86_64-linux-gnu/bits/stdlib-float.h","/usr/include/x86_64-linux-gnu/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h","/usr/include/linux/limits.h","/usr/include/x86_64-linux-gnu/bits/posix2_lim.h","/usr/include/x86_64-linux-gnu/bits/uio_lim.h","/usr/include/x86_64-linux-gnu/bits/posix_opt.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":16052868036638319858,"detailed_name":"gzfilebuf","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"\n @brief  Gzipped file stream buffer class.\n\n This class implements basic_filebuf for gzipped files. It doesn't yet support\n seeking (allowed by zlib but slow/limited), putback and read/write access\n (tricky). Otherwise, it attempts to be a drop-in replacement for the standard\n file streambuf.","declarations":["31:3-31:12|-1|1|4","35:4-35:13|-1|1|4"],"spell":"27:7-27:16|-1|1|2","extent":"27:1-224:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[0,1,3,4,5,6,7,8,9,11,13,16,18,20,21],"vars":[0,1,2,3,4,5],"instances":[7,7,9,9],"uses":["31:3-31:12|0|2|4","65:3-65:12|-1|1|4","75:3-75:12|-1|1|4","83:3-83:12|-1|1|4","261:3-261:12|-1|1|4","263:23-263:32|-1|1|4","312:3-312:12|-1|1|4","350:3-350:12|-1|1|4","352:23-352:32|-1|1|4","401:3-401:12|-1|1|4"]},{"id":1,"usr":10202190312383968064,"detailed_name":"std::streambuf","short_name_offset":5,"short_name_size":9,"kind":0,"hover":"","comments":"","declarations":["27:31-27:40|-1|1|4"],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["27:31-27:40|-1|1|4","135:16-135:25|-1|1|4"]},{"id":2,"usr":5401847601697785946,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["27:26-27:29|0|2|4","67:8-67:11|0|2|4","77:10-77:13|0|2|4","92:13-92:16|0|2|4","102:11-102:14|0|2|4","135:11-135:14|0|2|4","137:10-137:13|0|2|4","191:3-191:6|0|2|4","215:3-215:6|0|2|4","234:27-234:30|14|2|4","247:14-247:17|14|2|4","247:45-247:48|14|2|4","256:14-256:17|14|2|4","256:45-256:48|14|2|4","286:8-286:11|14|2|4","286:39-286:42|14|2|4","298:10-298:13|14|2|4","298:41-298:44|14|2|4","323:27-323:30|17|2|4","336:14-336:17|17|2|4","336:45-336:48|17|2|4","345:14-345:17|17|2|4","345:45-345:48|17|2|4","375:8-375:11|17|2|4","375:39-375:42|17|2|4","387:10-387:13|17|2|4","387:41-387:44|17|2|4"]},{"id":3,"usr":1230330113907994147,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["27:31-27:40|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":4,"usr":13057136628991207109,"detailed_name":"gzFile","short_name_offset":0,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,0],"uses":["186:3-186:9|-1|1|4"]},{"id":5,"usr":14911526508283337092,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["67:13-67:21|-1|1|4","77:15-77:23|-1|1|4","92:18-92:26|-1|1|4","191:8-191:16|-1|1|4","247:19-247:27|-1|1|4","247:50-247:58|-1|1|4","256:19-256:27|-1|1|4","256:50-256:58|-1|1|4","286:13-286:21|-1|1|4","286:44-286:52|-1|1|4","298:15-298:23|-1|1|4","298:46-298:54|-1|1|4","336:19-336:27|-1|1|4","336:50-336:58|-1|1|4","345:19-345:27|-1|1|4","345:50-345:58|-1|1|4","375:13-375:21|-1|1|4","375:44-375:52|-1|1|4","387:15-387:23|-1|1|4","387:46-387:54|-1|1|4"]},{"id":6,"usr":12655483914565919086,"detailed_name":"std::ios_base::openmode","short_name_offset":15,"short_name_size":8,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1],"uses":["67:23-67:31|-1|1|4","77:25-77:33|-1|1|4","92:28-92:36|-1|1|4","191:18-191:26|-1|1|4","247:29-247:37|-1|1|4","256:29-256:37|-1|1|4","286:23-286:31|-1|1|4","298:25-298:33|-1|1|4","336:29-336:37|-1|1|4","345:29-345:37|-1|1|4","375:23-375:31|-1|1|4","387:25-387:33|-1|1|4"]},{"id":7,"usr":9825384940092480788,"detailed_name":"std::streamsize","short_name_offset":5,"short_name_size":10,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4],"uses":["102:16-102:26|-1|1|4","137:15-137:25|-1|1|4","215:8-215:18|-1|1|4"]},{"id":8,"usr":13965176376069004727,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["112:11-112:19|-1|1|4","124:11-124:19|-1|1|4"]},{"id":9,"usr":5701988463589067398,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["112:11-112:19|-1|1|4","124:11-124:19|-1|1|4","125:12-125:20|-1|1|4"]},{"id":10,"usr":15422250110235043373,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["125:25-125:36|-1|1|4"]},{"id":11,"usr":4363979335033091322,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["136:10-136:19|-1|1|4","207:3-207:12|-1|1|4"]},{"id":12,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,5],"uses":[]},{"id":13,"usr":9868969794551058344,"detailed_name":"std::basic_streambuf::char_type","short_name_offset":22,"short_name_size":9,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[3],"uses":["207:3-207:12|-1|1|4"]},{"id":14,"usr":2299005654052202665,"detailed_name":"gzifstream","short_name_offset":0,"short_name_size":10,"kind":5,"hover":"","comments":"\n @brief  Gzipped file input stream class.\n\n This class implements ifstream for gzipped files. Seeking and putback\n is not supported yet.","declarations":["238:3-238:13|-1|1|4","246:3-246:13|-1|1|4","255:3-255:13|-1|1|4"],"spell":"234:7-234:17|-1|1|2","extent":"234:1-313:2|-1|1|0","bases":[15],"derived":[],"types":[],"funcs":[22,23,24,25,26,27,28,29],"vars":[7],"instances":[],"uses":["238:3-238:13|14|2|4","246:3-246:13|14|2|4","255:3-255:13|14|2|4"]},{"id":15,"usr":312154532968870815,"detailed_name":"std::istream","short_name_offset":5,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":["234:32-234:39|-1|1|4"],"bases":[],"derived":[14],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["234:32-234:39|-1|1|4"]},{"id":16,"usr":15801590214611295654,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["234:32-234:39|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":17,"usr":10429906831364613689,"detailed_name":"gzofstream","short_name_offset":0,"short_name_size":10,"kind":5,"hover":"","comments":"\n @brief  Gzipped file output stream class.\n\n This class implements ofstream for gzipped files. Seeking and putback\n is not supported yet.","declarations":["327:3-327:13|-1|1|4","335:3-335:13|-1|1|4","344:3-344:13|-1|1|4"],"spell":"323:7-323:17|-1|1|2","extent":"323:1-402:2|-1|1|0","bases":[18],"derived":[],"types":[],"funcs":[30,31,32,33,34,35,36,37],"vars":[9],"instances":[13,19],"uses":["327:3-327:13|17|2|4","335:3-335:13|17|2|4","344:3-344:13|17|2|4","418:14-418:24|-1|1|4","419:18-419:28|-1|1|4","423:15-423:25|-1|1|4","423:32-423:42|-1|1|4","428:5-428:15|-1|1|4","429:13-429:23|-1|1|4","439:8-439:18|-1|1|4","440:16-440:26|-1|1|4","449:31-449:41|-1|1|4","449:48-449:58|-1|1|4","457:10-457:20|-1|1|4","458:14-458:24|-1|1|4"]},{"id":18,"usr":15342995699754134592,"detailed_name":"std::ostream","short_name_offset":5,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":["323:32-323:39|-1|1|4"],"bases":[],"derived":[17],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["323:32-323:39|-1|1|4"]},{"id":19,"usr":3546994897161196771,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":["323:32-323:39|-1|1|4"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":20,"usr":4466750070112119631,"detailed_name":"gzomanip2","short_name_offset":0,"short_name_size":9,"kind":5,"hover":"","comments":"\n @brief  Gzipped file output stream manipulator class.\n\n This class defines a two-argument manipulator for gzofstream. It is used\n as base for the setcompression(int,int) manipulator.","declarations":["423:5-423:14|-1|1|4","449:21-449:30|-1|1|4","423:5-423:14|-1|1|4"],"spell":"413:9-413:18|-1|1|2","extent":"413:3-434:4|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[39],"vars":[10,11,12],"instances":[20],"uses":["423:5-423:14|20|2|4","449:3-449:12|-1|1|4","449:21-449:30|-1|1|4","458:35-458:44|-1|1|4","462:8-462:17|-1|1|4","464:10-464:19|-1|1|4"]},{"id":21,"usr":4520961221225443669,"detailed_name":"Ta","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"417:24-417:26|38|3|2","extent":"417:15-417:26|38|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["420:34-420:36|-1|1|4"]},{"id":22,"usr":2169781361038624692,"detailed_name":"Tb","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"417:37-417:39|38|3|2","extent":"417:28-417:39|38|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["420:37-420:39|-1|1|4"]},{"id":23,"usr":9267150165868898252,"detailed_name":"T1","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"412:19-412:21|-1|1|2","extent":"412:10-412:21|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["423:45-423:47|-1|1|4","424:15-424:17|-1|1|4","429:26-429:28|-1|1|4","432:5-432:7|-1|1|4"]},{"id":24,"usr":9362584216721078664,"detailed_name":"T2","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"412:32-412:34|-1|1|2","extent":"412:23-412:34|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["423:49-423:51|-1|1|4","425:15-425:17|-1|1|4","429:30-429:32|-1|1|4","433:5-433:7|-1|1|4"]},{"id":25,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[14,15,21,22],"uses":[]},{"id":26,"usr":17803024221429711591,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["449:13-449:15|-1|1|4","450:31-450:33|-1|1|4"]},{"id":27,"usr":17585095231124013005,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["451:31-451:33|-1|1|4"]},{"id":28,"usr":5241264246845444932,"detailed_name":"T1","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"456:19-456:21|41|3|2","extent":"456:10-456:21|41|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["458:45-458:47|-1|1|4"]},{"id":29,"usr":4089752661702840512,"detailed_name":"T2","short_name_offset":0,"short_name_size":2,"kind":26,"hover":"","comments":"","declarations":[],"spell":"456:32-456:34|41|3|2","extent":"456:23-456:34|41|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["458:48-458:50|-1|1|4"]},{"id":30,"usr":4909970485334731198,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]}],"funcs":[{"id":0,"usr":2534709592336559921,"detailed_name":"gzfilebuf::gzfilebuf()","short_name_offset":0,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":" Default constructor.","declarations":[{"spell":"31:3-31:12|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":10649206250069288621,"detailed_name":"virtual gzfilebuf::~gzfilebuf() throw()","short_name_offset":19,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":" Destructor.","declarations":[{"spell":"35:3-35:13|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[2],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":9049114614230967811,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[1],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":962234888742951859,"detailed_name":"int gzfilebuf::setcompression(int comp_level, int comp_strategy = 0)","short_name_offset":15,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Set compression level and strategy on the fly.\n @param  comp_level  Compression level (see zlib.h for allowed values)\n @param  comp_strategy  Compression strategy (see zlib.h for allowed values)\n @return  Z_OK on success, Z_STREAM_ERROR otherwise.\n\n Unfortunately, these parameters cannot be modified separately, as the\n previous zfstream version assumed. Since the strategy is seldom changed,\n it can default and setcompression(level) then becomes like the old\n setcompressionlevel(level).","declarations":[{"spell":"49:3-49:17|0|2|1","param_spellings":["49:22-49:32","50:22-50:35"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["442:18-442:32|40|3|36"],"callees":[]},{"id":4,"usr":12996207125243100683,"detailed_name":"bool gzfilebuf::is_open() const","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Check if file is open.\n @return  True if file is open.","declarations":[],"spell":"57:3-57:10|0|2|2","extent":"56:3-57:45|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":["270:25-270:32|26|3|36","359:25-359:32|34|3|36"],"callees":[]},{"id":5,"usr":17863076988952336415,"detailed_name":"gzfilebuf *gzfilebuf::open(const char *name, std::ios_base::openmode mode)","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Open gzipped file.\n @param  name  File name.\n @param  mode  Open mode flags.\n @return  @c this on success, NULL on failure.","declarations":[{"spell":"66:3-66:7|0|2|1","param_spellings":["66:20-66:24","67:32-67:36"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":17308187545939810014,"detailed_name":"gzfilebuf *gzfilebuf::attach(int fd, std::ios_base::openmode mode)","short_name_offset":22,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Attach to already open gzipped file.\n @param  fd  File descriptor.\n @param  mode  Open mode flags.\n @return  @c this on success, NULL on failure.","declarations":[{"spell":"76:3-76:9|0|2|1","param_spellings":["76:14-76:16","77:34-77:38"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":17678427748263251668,"detailed_name":"gzfilebuf *gzfilebuf::close()","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Close gzipped file.\n @return  @c this on success, NULL on failure.","declarations":[{"spell":"84:3-84:8|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":8923768209175575209,"detailed_name":"bool gzfilebuf::open_mode(std::ios_base::openmode mode, char *c_mode) const","short_name_offset":16,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Convert ios open mode int to mode string used by zlib.\n @return  True if valid mode flag combination.","declarations":[{"spell":"92:3-92:12|0|2|1","param_spellings":["92:37-92:41","93:19-93:25"]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":10694349750030941387,"detailed_name":"virtual std::streamsize gzfilebuf::showmanyc()","short_name_offset":35,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Number of characters available in stream buffer.\n @return  Number of characters.\n\n This indicates number of characters in get area of stream buffer.\n These characters can be read without accessing the gzipped file.","declarations":[{"spell":"103:3-103:12|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[10],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":12882807614278994896,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[9],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":890463697439718213,"detailed_name":"virtual std::basic_streambuf<char, std::char_traits<char> >::int_type gzfilebuf::underflow()","short_name_offset":81,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Fill get area from gzipped file.\n @return  First character in get area on success, EOF on error.\n\n This actually reads characters from gzipped file to stream\n buffer. Always buffered.","declarations":[{"spell":"113:3-113:12|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[12],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":14292863881918470362,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[11],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":2150974041111530210,"detailed_name":"virtual std::basic_streambuf<char, std::char_traits<char> >::int_type gzfilebuf::overflow(std::basic_streambuf<char, std::char_traits<char> >::int_type c = traits_type::eof())","short_name_offset":81,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Write put area to gzipped file.\n @param  c  Extra character to add to buffer contents.\n @return  Non-EOF on success, EOF on error.\n\n This actually writes characters in stream buffer to\n gzipped file. With unbuffered output this is done one\n character at a time.","declarations":[{"spell":"125:3-125:11|0|2|1","param_spellings":["125:21-125:22"]}],"declaring_type":0,"bases":[14],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":448570959682634389,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[13],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":14545693889219887141,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["125:38-125:41|0|2|36"],"callees":[]},{"id":16,"usr":13079793585444510348,"detailed_name":"virtual std::streambuf *gzfilebuf::setbuf(std::basic_streambuf<char, std::char_traits<char> >::char_type *p, std::streamsize n)","short_name_offset":35,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Installs external stream buffer.\n @param  p  Pointer to char buffer.\n @param  n  Size of external buffer.\n @return  @c this on success, NULL on failure.\n\n Call setbuf(0,0) to enable unbuffered output.","declarations":[{"spell":"136:3-136:9|0|2|1","param_spellings":["136:21-136:22","137:26-137:27"]}],"declaring_type":0,"bases":[17],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":4384925542073084493,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[16],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":16528218570547185282,"detailed_name":"virtual int gzfilebuf::sync()","short_name_offset":23,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Flush stream buffer to file.\n @return  0 on success, -1 on error.\n\n This calls underflow(EOF) to do the job.","declarations":[{"spell":"146:3-146:7|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[19],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":6433335738173300234,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[18],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":6898434462175773949,"detailed_name":"void gzfilebuf::enable_buffer()","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Allocate internal buffer.\n\n This function is safe to call multiple times. It will ensure\n that a proper internal buffer exists if it is required. If the\n buffer already exists or is external, the buffer pointers will be\n reset to their original state.","declarations":[{"spell":"171:3-171:16|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":4496947812564105673,"detailed_name":"void gzfilebuf::disable_buffer()","short_name_offset":16,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Destroy internal buffer.\n\n This function is safe to call multiple times. It will ensure\n that the internal buffer is deallocated if it exists. In any\n case, it will also reset the buffer pointers.","declarations":[{"spell":"181:3-181:17|0|2|1","param_spellings":[]}],"declaring_type":0,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":4820893376112134549,"detailed_name":"gzifstream::gzifstream()","short_name_offset":0,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":" Default constructor","declarations":[{"spell":"238:3-238:13|14|2|1","param_spellings":[]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":3269799589918568358,"detailed_name":"explicit gzifstream::gzifstream(const char *name, std::ios_base::openmode mode = std::ios_base::in)","short_name_offset":9,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\n @brief  Construct stream on gzipped file to be opened.\n @param  name  File name.\n @param  mode  Open mode flags (forced to contain ios::in).","declarations":[{"spell":"246:3-246:13|14|2|1","param_spellings":["246:26-246:30","247:38-247:42"]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":15942533738981657840,"detailed_name":"explicit gzifstream::gzifstream(int fd, std::ios_base::openmode mode = std::ios_base::in)","short_name_offset":9,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\n @brief  Construct stream on already open gzipped file.\n @param  fd    File descriptor.\n @param  mode  Open mode flags (forced to contain ios::in).","declarations":[{"spell":"255:3-255:13|14|2|1","param_spellings":["255:18-255:20","256:38-256:42"]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":14875320932735016112,"detailed_name":"gzfilebuf *gzifstream::rdbuf() const","short_name_offset":23,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\n Obtain underlying stream buffer.","declarations":[],"spell":"262:3-262:8|14|2|2","extent":"261:3-263:42|14|2|0","declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":22843190114674934,"detailed_name":"bool gzifstream::is_open()","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Check if file is open.\n @return  True if file is open.","declarations":[],"spell":"270:3-270:10|14|2|2","extent":"269:3-270:37|14|2|0","declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["270:25-270:32|4|3|36"]},{"id":27,"usr":17005828890026912346,"detailed_name":"void gzifstream::open(const char *name, std::ios_base::openmode mode = std::ios_base::in)","short_name_offset":17,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Open gzipped file.\n @param  name  File name.\n @param  mode  Open mode flags (forced to contain ios::in).\n\n Stream will be in state good() if file opens successfully;\n otherwise in state fail(). This differs from the behavior of\n ifstream, which never sets the state to good() and therefore\n won't allow you to reuse the stream for a second file unless\n you manually clear() the state. The choice is a matter of\n convenience.","declarations":[{"spell":"285:3-285:7|14|2|1","param_spellings":["285:20-285:24","286:32-286:36"]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":13110233855865258008,"detailed_name":"void gzifstream::attach(int fd, std::ios_base::openmode mode = std::ios_base::in)","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Attach to already open gzipped file.\n @param  fd  File descriptor.\n @param  mode  Open mode flags (forced to contain ios::in).\n\n Stream will be in state good() if attach succeeded; otherwise\n in state fail().","declarations":[{"spell":"297:3-297:9|14|2|1","param_spellings":["297:14-297:16","298:34-298:38"]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":13426488784451822595,"detailed_name":"void gzifstream::close()","short_name_offset":17,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Close gzipped file.\n\n Stream will be in state fail() if close failed.","declarations":[{"spell":"306:3-306:8|14|2|1","param_spellings":[]}],"declaring_type":14,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":15775185157581981431,"detailed_name":"gzofstream::gzofstream()","short_name_offset":0,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":" Default constructor","declarations":[{"spell":"327:3-327:13|17|2|1","param_spellings":[]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":18191495548429715053,"detailed_name":"explicit gzofstream::gzofstream(const char *name, std::ios_base::openmode mode = std::ios_base::out)","short_name_offset":9,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\n @brief  Construct stream on gzipped file to be opened.\n @param  name  File name.\n @param  mode  Open mode flags (forced to contain ios::out).","declarations":[{"spell":"335:3-335:13|17|2|1","param_spellings":["335:26-335:30","336:38-336:42"]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":6819905779075242964,"detailed_name":"explicit gzofstream::gzofstream(int fd, std::ios_base::openmode mode = std::ios_base::out)","short_name_offset":9,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\n @brief  Construct stream on already open gzipped file.\n @param  fd    File descriptor.\n @param  mode  Open mode flags (forced to contain ios::out).","declarations":[{"spell":"344:3-344:13|17|2|1","param_spellings":["344:18-344:20","345:38-345:42"]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":5178840857269961897,"detailed_name":"gzfilebuf *gzofstream::rdbuf() const","short_name_offset":23,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\n Obtain underlying stream buffer.","declarations":[],"spell":"351:3-351:8|17|2|2","extent":"350:3-352:42|17|2|0","declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":["442:8-442:13|40|3|36"],"callees":[]},{"id":34,"usr":6239218911376937689,"detailed_name":"bool gzofstream::is_open()","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Check if file is open.\n @return  True if file is open.","declarations":[],"spell":"359:3-359:10|17|2|2","extent":"358:3-359:37|17|2|0","declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["359:25-359:32|4|3|36"]},{"id":35,"usr":7425988108018639585,"detailed_name":"void gzofstream::open(const char *name, std::ios_base::openmode mode = std::ios_base::out)","short_name_offset":17,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Open gzipped file.\n @param  name  File name.\n @param  mode  Open mode flags (forced to contain ios::out).\n\n Stream will be in state good() if file opens successfully;\n otherwise in state fail(). This differs from the behavior of\n ofstream, which never sets the state to good() and therefore\n won't allow you to reuse the stream for a second file unless\n you manually clear() the state. The choice is a matter of\n convenience.","declarations":[{"spell":"374:3-374:7|17|2|1","param_spellings":["374:20-374:24","375:32-375:36"]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":12039067606507759549,"detailed_name":"void gzofstream::attach(int fd, std::ios_base::openmode mode = std::ios_base::out)","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Attach to already open gzipped file.\n @param  fd  File descriptor.\n @param  mode  Open mode flags (forced to contain ios::out).\n\n Stream will be in state good() if attach succeeded; otherwise\n in state fail().","declarations":[{"spell":"386:3-386:9|17|2|1","param_spellings":["386:14-386:16","387:34-387:38"]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":12220820448759745474,"detailed_name":"void gzofstream::close()","short_name_offset":17,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\n @brief  Close gzipped file.\n\n Stream will be in state fail() if close failed.","declarations":[{"spell":"395:3-395:8|17|2|1","param_spellings":[]}],"declaring_type":17,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":4426145451534943497,"detailed_name":"gzofstream &operator<<(gzofstream &, const gzomanip2<Ta, Tb> &)","short_name_offset":12,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"Allows insertor to peek at internals","declarations":[{"spell":"419:7-419:17|20|2|1","param_spellings":["419:29-419:29","420:41-420:41"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":14049510035373918082,"detailed_name":"template <typename T1, typename T2> inline gzomanip2::gzomanip2<T1, T2>(gzofstream &(*f)(gzofstream &, T1, T2), T1 v1, T2 v2)","short_name_offset":54,"short_name_size":17,"kind":9,"storage":1,"hover":"","comments":"Constructor","declarations":[{"spell":"423:5-423:14|20|2|1","param_spellings":["423:29-423:30","424:18-424:20","425:18-425:20"]}],"spell":"449:21-449:30|20|2|2","extent":"447:1-453:6|-1|1|0","declaring_type":20,"bases":[],"derived":[],"vars":[16,17,18],"uses":["464:10-464:51|42|3|292"],"callees":[]},{"id":40,"usr":11736782399010132754,"detailed_name":"inline gzofstream &setcompression(gzofstream &gzs, int l, int s = 0)","short_name_offset":19,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"Manipulator function thunks through to stream buffer","declarations":[],"spell":"440:1-440:15|-1|1|2","extent":"439:1-444:2|-1|1|0","bases":[],"derived":[],"vars":[13,14,15],"uses":["464:30-464:44|42|3|132"],"callees":["442:18-442:32|3|3|36","442:8-442:13|33|3|36"]},{"id":41,"usr":17147164728832079627,"detailed_name":"inline gzofstream &operator<<(gzofstream &s, const gzomanip2<T1, T2> &m)","short_name_offset":19,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"Insertor applies underlying manipulator function to stream","declarations":[],"spell":"458:3-458:13|-1|1|2","extent":"457:3-459:43|-1|1|0","bases":[],"derived":[],"vars":[19,20],"uses":[],"callees":[]},{"id":42,"usr":456794708782944278,"detailed_name":"inline gzomanip2<int, int> setcompression(int l, int s = 0)","short_name_offset":27,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"Insert this onto stream to simplify setting of compression level","declarations":[],"spell":"463:1-463:15|-1|1|2","extent":"462:1-464:54|-1|1|0","bases":[],"derived":[],"vars":[21,22],"uses":[],"callees":["464:10-464:51|39|3|292","464:30-464:44|40|3|132"]},{"id":43,"usr":2200664523477698523,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[23,24,25],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":379923213901452071,"detailed_name":"gzFile gzfilebuf::file","short_name_offset":18,"short_name_size":4,"hover":"","comments":"\n Underlying file pointer.","declarations":[],"spell":"186:10-186:14|0|2|2","extent":"186:3-186:14|0|2|0","type":4,"uses":["57:29-57:33|4|3|12"],"kind":8,"storage":0},{"id":1,"usr":15918781089533618087,"detailed_name":"std::ios_base::openmode gzfilebuf::io_mode","short_name_offset":35,"short_name_size":7,"hover":"","comments":"\n Mode in which file was opened.","declarations":[],"spell":"191:27-191:34|0|2|2","extent":"191:3-191:34|0|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":2,"usr":4861928153012061567,"detailed_name":"bool gzfilebuf::own_fd","short_name_offset":16,"short_name_size":6,"hover":"","comments":"\n @brief  True if this object owns file descriptor.\n\n This makes the class responsible for closing the file\n upon destruction.","declarations":[],"spell":"199:8-199:14|0|2|2","extent":"199:3-199:14|0|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":3,"usr":16830881737447077656,"detailed_name":"std::basic_streambuf<char, std::char_traits<char> >::char_type *gzfilebuf::buffer","short_name_offset":75,"short_name_size":6,"hover":"","comments":"\n @brief  Stream buffer.\n\n For simplicity this remains allocated on the free store for the\n entire life span of the gzfilebuf object, unless replaced by setbuf.","declarations":[],"spell":"207:14-207:20|0|2|2","extent":"207:3-207:20|0|2|0","type":13,"uses":[],"kind":8,"storage":0},{"id":4,"usr":16249923909912959507,"detailed_name":"std::streamsize gzfilebuf::buffer_size","short_name_offset":27,"short_name_size":11,"hover":"","comments":"\n @brief  Stream buffer size.\n\n Defaults to system default buffer size (typically 8192 bytes).\n Modified by setbuf.","declarations":[],"spell":"215:19-215:30|0|2|2","extent":"215:3-215:30|0|2|0","type":7,"uses":[],"kind":8,"storage":0},{"id":5,"usr":8696737514236783798,"detailed_name":"bool gzfilebuf::own_buffer","short_name_offset":16,"short_name_size":10,"hover":"","comments":"\n @brief  True if this object owns stream buffer.\n\n This makes the class responsible for deleting the buffer\n upon destruction.","declarations":[],"spell":"223:8-223:18|0|2|2","extent":"223:3-223:18|0|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":6,"usr":6149369424977047596,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["247:60-247:62|14|2|12","256:60-256:62|14|2|12","286:54-286:56|14|2|12","298:56-298:58|14|2|12"],"kind":0,"storage":0},{"id":7,"usr":1763555996983737088,"detailed_name":"gzfilebuf gzifstream::sb","short_name_offset":22,"short_name_size":2,"hover":"","comments":"\n Underlying stream buffer.","declarations":[],"spell":"312:13-312:15|14|2|2","extent":"312:3-312:15|14|2|0","type":0,"uses":["263:36-263:38|25|3|132","270:22-270:24|26|3|4"],"kind":8,"storage":0},{"id":8,"usr":17558801303032041095,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["336:60-336:63|17|2|12","345:60-345:63|17|2|12","375:54-375:57|17|2|12","387:56-387:59|17|2|12"],"kind":0,"storage":0},{"id":9,"usr":2308239183497983923,"detailed_name":"gzfilebuf gzofstream::sb","short_name_offset":22,"short_name_size":2,"hover":"","comments":"\n Underlying stream buffer.","declarations":[],"spell":"401:13-401:15|17|2|2","extent":"401:3-401:15|17|2|0","type":0,"uses":["352:36-352:38|33|3|132","359:22-359:24|34|3|4"],"kind":8,"storage":0},{"id":10,"usr":6441787688906567630,"detailed_name":"gzofstream &(*)(gzofstream &, T1, T2) gzomanip2::func","short_name_offset":49,"short_name_size":4,"hover":"","comments":"Underlying manipulator function","declarations":[],"spell":"429:7-429:11|20|2|2","extent":"428:5-429:33|20|2|0","uses":["452:5-452:9|39|3|20","459:16-459:20|41|3|4"],"kind":8,"storage":0},{"id":11,"usr":4920874161912379543,"detailed_name":"T1 gzomanip2::val1","short_name_offset":14,"short_name_size":4,"hover":"","comments":"Arguments for manipulator function","declarations":[],"spell":"432:8-432:12|20|2|2","extent":"432:5-432:12|20|2|0","uses":["452:14-452:18|39|3|20","459:27-459:31|41|3|4"],"kind":8,"storage":0},{"id":12,"usr":15903795276166534629,"detailed_name":"T2 gzomanip2::val2","short_name_offset":14,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"433:8-433:12|20|2|2","extent":"433:5-433:12|20|2|0","uses":["452:24-452:28|39|3|20","459:35-459:39|41|3|4"],"kind":8,"storage":0},{"id":13,"usr":442452442818271993,"detailed_name":"gzofstream &gzs","short_name_offset":12,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"440:28-440:31|40|3|2","extent":"440:16-440:31|40|3|0","type":17,"uses":["442:4-442:7|40|3|4","443:10-443:13|40|3|4"],"kind":253,"storage":1},{"id":14,"usr":17531335959814946242,"detailed_name":"int l","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"440:37-440:38|40|3|2","extent":"440:33-440:38|40|3|0","type":25,"uses":["442:33-442:34|40|3|12"],"kind":253,"storage":1},{"id":15,"usr":4540091344628040909,"detailed_name":"int s","short_name_offset":4,"short_name_size":1,"hover":"int s = Z_DEFAULT_STRATEGY","comments":"","declarations":[],"spell":"440:44-440:45|40|3|2","extent":"440:40-440:66|40|3|0","type":25,"uses":["442:36-442:37|40|3|12"],"kind":253,"storage":1},{"id":16,"usr":6433762699548819393,"detailed_name":"gzofstream &(*)(gzofstream &, T1, T2) f","short_name_offset":38,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"449:45-449:46|39|3|2","extent":"449:31-449:69|39|3|0","uses":["452:10-452:11|39|3|4"],"kind":253,"storage":1},{"id":17,"usr":11402703462718691451,"detailed_name":"T1 v1","short_name_offset":3,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"450:34-450:36|39|3|2","extent":"450:31-450:36|39|3|0","uses":["452:19-452:21|39|3|4"],"kind":253,"storage":1},{"id":18,"usr":18033194113727133500,"detailed_name":"T2 v2","short_name_offset":3,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"451:34-451:36|39|3|2","extent":"451:31-451:36|39|3|0","uses":["452:29-452:31|39|3|4"],"kind":253,"storage":1},{"id":19,"usr":15997179136250035359,"detailed_name":"gzofstream &s","short_name_offset":12,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"458:26-458:27|41|3|2","extent":"458:14-458:27|41|3|0","type":17,"uses":["459:22-459:23|41|3|4"],"kind":253,"storage":1},{"id":20,"usr":12667333019175158640,"detailed_name":"const gzomanip2<T1, T2> &m","short_name_offset":25,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"458:53-458:54|41|3|2","extent":"458:29-458:54|41|3|0","type":20,"uses":["459:14-459:15|41|3|4","459:25-459:26|41|3|4","459:33-459:34|41|3|4"],"kind":253,"storage":1},{"id":21,"usr":4646405889840847619,"detailed_name":"int l","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"463:20-463:21|42|3|2","extent":"463:16-463:21|42|3|0","type":25,"uses":["464:46-464:47|42|3|12"],"kind":253,"storage":1},{"id":22,"usr":16716928002698777799,"detailed_name":"int s","short_name_offset":4,"short_name_size":1,"hover":"int s = Z_DEFAULT_STRATEGY","comments":"","declarations":[],"spell":"463:27-463:28|42|3|2","extent":"463:23-463:49|42|3|0","type":25,"uses":["464:49-464:50|42|3|12"],"kind":253,"storage":1},{"id":23,"usr":18093299602468925534,"detailed_name":"gzofstream &(*)(gzofstream &, int, int) f","short_name_offset":40,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"423:29-423:30|43|3|2","extent":"423:15-423:52|43|3|0","uses":["452:10-452:11|43|3|12"],"kind":253,"storage":1},{"id":24,"usr":9950721117832004359,"detailed_name":"int v1","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"424:18-424:20|43|3|2","extent":"424:15-424:20|43|3|0","uses":["452:19-452:21|43|3|12"],"kind":253,"storage":1},{"id":25,"usr":16368180020691780145,"detailed_name":"int v2","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"425:18-425:20|43|3|2","extent":"425:15-425:20|43|3|0","uses":["452:29-452:31|43|3|12"],"kind":253,"storage":1},{"id":26,"usr":9208593189548685958,"detailed_name":"ZFSTREAM_H","short_name_offset":0,"short_name_size":10,"hover":"#define ZFSTREAM_H","comments":"","declarations":[],"spell":"11:9-11:19|-1|1|2","extent":"11:9-11:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":27,"usr":1722560230542123394,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["50:38-50:56|-1|1|4","440:48-440:66|-1|1|4","463:31-463:49|-1|1|4"],"kind":0,"storage":0},{"id":28,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["57:37-57:41|-1|1|4"],"kind":0,"storage":0}]}