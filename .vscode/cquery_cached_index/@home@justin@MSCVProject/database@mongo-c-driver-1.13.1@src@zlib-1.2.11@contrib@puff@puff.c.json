16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/puff/puff.c","args_hash":10433645398913005206,"includes":[{"line":81,"resolved_path":"/usr/include/setjmp.h"},{"line":82,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/puff/puff.h"}],"dependencies":["/usr/include/setjmp.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/x86_64-linux-gnu/bits/setjmp.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/puff/puff.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h"],"skipped_by_preprocessor":["234:1-262:6","495:1-498:7"],"types":[{"id":0,"usr":7048823505689461888,"detailed_name":"state","short_name_offset":0,"short_name_size":5,"kind":23,"hover":"","comments":"input and output state","declarations":[],"spell":"98:8-98:13|-1|1|2","extent":"98:1-113:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2,3,4,5,6,7,8],"instances":[9,12,16,33,43,53,73],"uses":["126:23-126:28|-1|1|4","164:25-164:30|-1|1|4","263:25-263:30|-1|1|4","436:24-436:29|-1|1|4","536:24-536:29|-1|1|4","665:26-665:31|-1|1|4","798:12-798:17|-1|1|4"]},{"id":1,"usr":5,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,3,69,71],"uses":[]},{"id":2,"usr":10,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,2,4,5,70,72],"uses":[]},{"id":3,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,7,10,18,19,20,21,22,23,24,28,29,30,31,36,37,44,51,54,55,56,57,58,67,68,74,75,76],"uses":[]},{"id":4,"usr":6414631127322119495,"detailed_name":"jmp_buf","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8],"uses":["112:5-112:12|-1|1|4"]},{"id":5,"usr":18,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[11],"uses":[]},{"id":6,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[13,38],"uses":[]},{"id":7,"usr":12175320007181217467,"detailed_name":"huffman","short_name_offset":0,"short_name_size":7,"kind":23,"hover":"","comments":"\n Huffman code decoding tables.  count[1..MAXBITS] is the number of symbols of\n each length, which for a canonical code are stepped through in order.\n symbol[] are the symbol values in canonical order, where the number of\n entries is the sum of the counts in count[].  The decoding process can be\n seen in the function decode() below.","declarations":[],"spell":"206:8-206:15|-1|1|2","extent":"206:1-209:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[14,15],"instances":[17,26,34,35,49,50,64,65],"uses":["263:48-263:55|-1|1|4","340:28-340:35|-1|1|4","437:30-437:37|-1|1|4","438:30-438:37|-1|1|4","541:19-541:26|-1|1|4","673:12-673:19|-1|1|4"]},{"id":8,"usr":16,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[14,15,25,27,32,39,40,41,42,45,46,47,48,52,59,60,61,62,63,66],"uses":[]}],"funcs":[{"id":0,"usr":15594884062189247344,"detailed_name":"static int bits(struct state *s, int need)","short_name_offset":11,"short_name_size":4,"kind":12,"storage":3,"hover":"","comments":"\n Return need bits from the input stream.  This always leaves less than\n eight bits in the buffer.  bits() works properly for need == 0.\n\n Format notes:\n\n - Bits are stored in bytes from the least significant bit to the most\n   significant bit.  Therefore bits are dropped from the bottom of the bit\n   buffer, using shift right, and new bytes are appended to the top of the\n   bit buffer, using shift left.","declarations":[],"spell":"126:11-126:15|-1|1|2","extent":"126:1-145:2|-1|1|0","bases":[],"derived":[],"vars":[9,10,11],"uses":["477:34-477:38|4|3|36","483:36-483:40|4|3|36","684:12-684:16|6|3|36","685:13-685:17|6|3|36","686:13-686:17|6|3|36","692:33-692:37|6|3|36","718:30-718:34|6|3|36","721:30-721:34|6|3|36","723:31-723:35|6|3|36","820:20-820:24|7|3|36","821:20-821:24|7|3|36"],"callees":[]},{"id":1,"usr":15274844796323266376,"detailed_name":"static int stored(struct state *s)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":3,"hover":"","comments":"\n Process a stored block.\n\n Format notes:\n\n - After the two-bit stored block type (00), the stored block length and\n   stored bytes are byte-aligned for fast copying.  Therefore any leftover\n   bits in the byte that has the last bit of the type, as many as seven, are\n   discarded.  The value of the discarded bits are not defined and should not\n   be checked against any expectation.\n\n - The second inverted copy of the stored block length does not have to be\n   checked, but it's probably a good idea to do so anyway.\n\n - A stored block can have zero length.  This is sometimes used to byte-align\n   subsets of the compressed data for random access or partial recovery.","declarations":[],"spell":"164:11-164:17|-1|1|2","extent":"164:1-197:2|-1|1|0","bases":[],"derived":[],"vars":[12,13],"uses":["823:21-823:27|7|3|36"],"callees":[]},{"id":2,"usr":17299089791721101271,"detailed_name":"static int decode(struct state *s, const struct huffman *h)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"263:11-263:17|-1|1|2","extent":"263:1-305:2|-1|1|0","bases":[],"derived":[],"vars":[16,17,18,19,20,21,22,23,24,25],"uses":["460:18-460:24|4|3|36","480:22-480:28|4|3|36","707:18-707:24|6|3|36"],"callees":[]},{"id":3,"usr":17399149324646801194,"detailed_name":"static int construct(struct huffman *h, const short *length, int n)","short_name_offset":11,"short_name_size":9,"kind":12,"storage":3,"hover":"","comments":"\n Given the list of code lengths length[0..n-1] representing a canonical\n Huffman code for n symbols, construct the tables required to decode those\n codes.  Those tables are the number of codes of each length, and the symbols\n sorted by length, retaining their original order within each length.  The\n return value is zero for a complete code set, negative for an over-\n subscribed code set, and positive for an incomplete code set.  The tables\n can be used if the return value is zero or positive, but they cannot be used\n if the return value is negative.  If the return value is zero, it is not\n possible for decode() using that table to return an error--any stream of\n enough bits will resolve to a symbol.  If the return value is positive, then\n it is possible for decode() using that table to return an error for received\n codes past the end of the incomplete lengths.\n\n Not used by decode(), but used for error checking, h->count[0] is the number\n of the n symbols not in the code.  So n - h->count[0] is the number of\n codes.  This is useful for checking for incomplete codes that have more than\n one symbol, which is an error in a dynamic block.\n\n Assumption: for all i in 0..n-1, 0 <= length[i] <= MAXBITS\n This is assured by the construction of the length arrays in dynamic() and\n fixed() and is not verified by construct().\n\n Format notes:\n\n - Permitted and expected examples of incomplete codes are one of the fixed\n   codes and any code with a single symbol which in deflate is coded as one\n   bit instead of zero bits.  See the format notes for fixed() and dynamic().\n\n - Within a given code length, the symbols are kept in ascending order for\n   the code bits definition.","declarations":[],"spell":"340:11-340:20|-1|1|2","extent":"340:1-379:2|-1|1|0","bases":[],"derived":[],"vars":[26,27,28,29,30,31,32],"uses":["563:9-563:18|5|3|36","568:9-568:18|5|3|36","697:11-697:20|6|3|36","736:11-736:20|6|3|36","741:11-741:20|6|3|36"],"callees":[]},{"id":4,"usr":1231247720443593278,"detailed_name":"static int codes(struct state *s, const struct huffman *lencode, const struct huffman *distcode)","short_name_offset":11,"short_name_size":5,"kind":12,"storage":3,"hover":"","comments":"\n Decode literal/length and distance codes until an end-of-block code.\n\n Format notes:\n\n - Compressed data that is after the block type if fixed or after the code\n   description if dynamic is a combination of literals and length/distance\n   pairs terminated by and end-of-block code.  Literals are simply Huffman\n   coded bytes.  A length/distance pair is a coded length followed by a\n   coded distance to represent a string that occurs earlier in the\n   uncompressed data that occurs again at the current location.\n\n - Literals, lengths, and the end-of-block code are combined into a single\n   code of up to 286 symbols.  They are 256 literals (0..255), 29 length\n   symbols (257..285), and the end-of-block symbol (256).\n\n - There are 256 possible lengths (3..258), and so 29 symbols are not enough\n   to represent all of those.  Lengths 3..10 and 258 are in fact represented\n   by just a length symbol.  Lengths 11..257 are represented as a symbol and\n   some number of extra bits that are added as an integer to the base length\n   of the length symbol.  The number of extra bits is determined by the base\n   length symbol.  These are in the static arrays below, lens[] for the base\n   lengths and lext[] for the corresponding number of extra bits.\n\n - The reason that 258 gets its own symbol is that the longest length is used\n   often in highly redundant files.  Note that 258 can also be coded as the\n   base value 227 plus the maximum extra value of 31.  While a good deflate\n   should never do this, it is not an error, and should be decoded properly.\n\n - If a length is decoded, including its extra bits if any, then it is\n   followed a distance code.  There are up to 30 distance symbols.  Again\n   there are many more possible distances (1..32768), so extra bits are added\n   to a base value represented by the symbol.  The distances 1..4 get their\n   own symbol, but the rest require extra bits.  The base distances and\n   corresponding number of extra bits are below in the static arrays dist[]\n   and dext[].\n\n - Literal bytes are simply written to the output.  A length/distance pair is\n   an instruction to copy previously uncompressed bytes to the output.  The\n   copy is from distance bytes back in the output stream, copying for length\n   bytes.\n\n - Distances pointing before the beginning of the output data are not\n   permitted.\n\n - Overlapped copies, where the length is greater than the distance, are\n   allowed and common.  For example, a distance of one and a length of 258\n   simply copies the last byte 258 times.  A distance of four and a length of\n   twelve copies the last four bytes three times.  A simple forward copy\n   ignoring whether the length is greater than the distance or not implements\n   this correctly.  You should not use memcpy() since its behavior is not\n   defined for overlapped arrays.  You should not use memmove() or bcopy()\n   since though their behavior -is- defined for overlapping arrays, it is\n   defined to do the wrong thing in this case.","declarations":[],"spell":"436:11-436:16|-1|1|2","extent":"436:1-510:2|-1|1|0","bases":[],"derived":[],"vars":[33,34,35,36,37,38,39,40,41,42],"uses":["575:12-575:17|5|3|36","746:12-746:17|6|3|36"],"callees":["460:18-460:24|2|3|36","477:34-477:38|0|3|36","480:22-480:28|2|3|36","483:36-483:40|0|3|36"]},{"id":5,"usr":16077599652264050470,"detailed_name":"static int fixed(struct state *s)","short_name_offset":11,"short_name_size":5,"kind":12,"storage":3,"hover":"","comments":"\n Process a fixed codes block.\n\n Format notes:\n\n - This block type can be useful for compressing small amounts of data for\n   which the size of the code descriptions in a dynamic block exceeds the\n   benefit of custom codes for that block.  For fixed codes, no bits are\n   spent on code descriptions.  Instead the code lengths for literal/length\n   codes and distance codes are fixed.  The specific lengths for each symbol\n   can be seen in the \"for\" loops below.\n\n - The literal/length code is complete, but has two symbols that are invalid\n   and should result in an error if received.  This cannot be implemented\n   simply as an incomplete code since those two symbols are in the \"middle\"\n   of the code.  They are eight bits long and the longest literal/length\\\n   code is nine bits.  Therefore the code must be constructed with those\n   symbols, and the invalid symbols must be detected after decoding.\n\n - The fixed distance codes also have two invalid symbols that should result\n   in an error if received.  Since all of the distance codes are the same\n   length, this can be implemented as an incomplete code.  Then the invalid\n   codes are detected while decoding.","declarations":[],"spell":"536:11-536:16|-1|1|2","extent":"536:1-576:2|-1|1|0","bases":[],"derived":[],"vars":[43,44,45,46,47,48,49,50,51,52],"uses":["825:25-825:30|7|3|36"],"callees":["563:9-563:18|3|3|36","568:9-568:18|3|3|36","575:12-575:17|4|3|36"]},{"id":6,"usr":7932758366485124402,"detailed_name":"static int dynamic(struct state *s)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":3,"hover":"","comments":"\n Process a dynamic codes block.\n\n Format notes:\n\n - A dynamic block starts with a description of the literal/length and\n   distance codes for that block.  New dynamic blocks allow the compressor to\n   rapidly adapt to changing data with new codes optimized for that data.\n\n - The codes used by the deflate format are \"canonical\", which means that\n   the actual bits of the codes are generated in an unambiguous way simply\n   from the number of bits in each code.  Therefore the code descriptions\n   are simply a list of code lengths for each symbol.\n\n - The code lengths are stored in order for the symbols, so lengths are\n   provided for each of the literal/length symbols, and for each of the\n   distance symbols.\n\n - If a symbol is not used in the block, this is represented by a zero as\n   as the code length.  This does not mean a zero-length code, but rather\n   that no code should be created for this symbol.  There is no way in the\n   deflate format to represent a zero-length code.\n\n - The maximum number of bits in a code is 15, so the possible lengths for\n   any code are 1..15.\n\n - The fact that a length of zero is not permitted for a code has an\n   interesting consequence.  Normally if only one symbol is used for a given\n   code, then in fact that code could be represented with zero bits.  However\n   in deflate, that code has to be at least one bit.  So for example, if\n   only a single distance base symbol appears in a block, then it will be\n   represented by a single code of length one, in particular one 0 bit.  This\n   is an incomplete code, since if a 1 bit is received, it has no meaning,\n   and should result in an error.  So incomplete distance codes of one symbol\n   should be permitted, and the receipt of invalid codes should be handled.\n\n - It is also possible to have a single literal/length code, but that code\n   must be the end-of-block code, since every dynamic block has one.  This\n   is not the most efficient way to create an empty block (an empty fixed\n   block is fewer bits), but it is allowed by the format.  So incomplete\n   literal/length codes of one symbol should also be permitted.\n\n - If there are only literal codes and no lengths, then there are no distance\n   codes.  This is represented by one distance code with zero bits.\n\n - The list of up to 286 length/literal lengths and up to 30 distance lengths\n   are themselves compressed using Huffman codes and run-length encoding.  In\n   the list of code lengths, a 0 symbol means no code, a 1..15 symbol means\n   that length, and the symbols 16, 17, and 18 are run-length instructions.\n   Each of 16, 17, and 18 are follwed by extra bits to define the length of\n   the run.  16 copies the last length 3 to 6 times.  17 represents 3 to 10\n   zero lengths, and 18 represents 11 to 138 zero lengths.  Unused symbols\n   are common, hence the special coding for zero lengths.\n\n - The symbols for 0..18 are Huffman coded, and so that code must be\n   described first.  This is simply a sequence of up to 19 three-bit values\n   representing no code (0) or the code length for that symbol (1..7).\n\n - A dynamic block starts with three fixed-size counts from which is computed\n   the number of literal/length code lengths, the number of distance code\n   lengths, and the number of code length code lengths (ok, you come up with\n   a better name!) in the code descriptions.  For the literal/length and\n   distance codes, lengths after those provided are considered zero, i.e. no\n   code.  The code length code lengths are received in a permuted order (see\n   the order[] array below) to make a short code length code length list more\n   likely.  As it turns out, very short and very long codes are less likely\n   to be seen in a dynamic code description, hence what may appear initially\n   to be a peculiar ordering.\n\n - Given the number of literal/length code lengths (nlen) and distance code\n   lengths (ndist), then they are treated as one long list of nlen + ndist\n   code lengths.  Therefore run-length coding can and often does cross the\n   boundary between the two sets of lengths.\n\n - So to summarize, the code description at the start of a dynamic block is\n   three counts for the number of code lengths for the literal/length codes,\n   the distance codes, and the code length codes.  This is followed by the\n   code length code lengths, three bits each.  This is used to construct the\n   code length code which is used to read the remainder of the lengths.  Then\n   the literal/length code lengths and distance lengths are read as a single\n   set of lengths using the code length codes.  Codes are constructed from\n   the resulting two sets of lengths, and then finally you can start\n   decoding actual compressed data in the block.\n\n - For reference, a \"typical\" size for the code description in a dynamic\n   block is around 80 bytes.","declarations":[],"spell":"665:11-665:18|-1|1|2","extent":"665:1-747:2|-1|1|0","bases":[],"derived":[],"vars":[53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"uses":["827:29-827:36|7|3|36"],"callees":["684:12-684:16|0|3|36","685:13-685:17|0|3|36","686:13-686:17|0|3|36","692:33-692:37|0|3|36","697:11-697:20|3|3|36","707:18-707:24|2|3|36","718:30-718:34|0|3|36","721:30-721:34|0|3|36","723:31-723:35|0|3|36","736:11-736:20|3|3|36","741:11-741:20|3|3|36","746:12-746:17|4|3|36"]},{"id":7,"usr":7951584339625130261,"detailed_name":"int puff(unsigned char *dest, unsigned long *destlen, const unsigned char *source, unsigned long *sourcelen)","short_name_offset":4,"short_name_size":4,"kind":12,"storage":1,"hover":"","comments":"\n Inflate source to dest.  On return, destlen and sourcelen are updated to the\n size of the uncompressed data and the size of the deflate data respectively.\n On success, the return value of puff() is zero.  If there is an error in the\n source data, i.e. it is not in the deflate format, then a negative value is\n returned.  If there is not enough input available or there is not enough\n output space, then a positive error is returned.  In that case, destlen and\n sourcelen are not updated to facilitate retrying from the beginning with the\n provision of more input data or more output space.  In the case of invalid\n inflate data (a negative error), the dest and source pointers are updated to\n facilitate the debugging of deflators.\n\n puff() also has a mode to determine the size of the uncompressed output with\n no output written.  For this dest must be (unsigned char *)0.  In this case,\n the input value of *destlen is ignored, and on return *destlen is set to the\n size of the uncompressed output.\n\n The return codes are:\n\n   2:  available inflate data did not terminate\n   1:  output space exhausted before completing inflate\n   0:  successful inflate\n  -1:  invalid block type (type == 3)\n  -2:  stored block length did not match one's complement\n  -3:  dynamic block code description: too many length or distance codes\n  -4:  dynamic block code description: code lengths codes incomplete\n  -5:  dynamic block code description: repeat lengths with no first length\n  -6:  dynamic block code description: repeat more than specified lengths\n  -7:  dynamic block code description: invalid literal/length code lengths\n  -8:  dynamic block code description: invalid distance code lengths\n  -9:  dynamic block code description: missing end-of-block code\n -10:  invalid literal/length or distance code in fixed or dynamic block\n -11:  distance is too far back in fixed or dynamic block\n\n Format notes:\n\n - Three bits are read for each block to determine the kind of block and\n   whether or not it is the last block.  Then the block is decoded and the\n   process repeated if it was not the last block.\n\n - The leftover bits in the last byte of the deflate data after the last\n   block (if it was a fixed or dynamic block) are undefined and have no\n   expected values to check.","declarations":[],"spell":"793:5-793:9|-1|1|2","extent":"793:1-840:2|-1|1|0","bases":[],"derived":[],"vars":[69,70,71,72,73,74,75,76],"uses":[],"callees":["820:20-820:24|0|3|36","821:20-821:24|0|3|36","823:21-823:27|1|3|36","825:25-825:30|5|3|36","827:29-827:36|6|3|36"]}],"vars":[{"id":0,"usr":10214414954119364328,"detailed_name":"unsigned char *state::out","short_name_offset":22,"short_name_size":3,"hover":"","comments":"output buffer","declarations":[],"spell":"100:20-100:23|0|2|2","extent":"100:5-100:23|0|2|0","type":1,"uses":["184:12-184:15|1|3|12","188:16-188:19|1|3|12","465:20-465:23|4|3|12","468:20-468:23|4|3|12","490:20-490:23|4|3|12","494:24-494:27|4|3|12","499:32-499:35|4|3|12","803:7-803:10|7|3|20"],"kind":8,"storage":0},{"id":1,"usr":3456060673436746224,"detailed_name":"unsigned long state::outlen","short_name_offset":21,"short_name_size":6,"hover":"","comments":"available space at out","declarations":[],"spell":"101:19-101:25|0|2|2","extent":"101:5-101:25|0|2|0","type":2,"uses":["185:34-185:40|1|3|12","466:37-466:43|4|3|12","491:42-491:48|4|3|12","804:7-804:13|7|3|20"],"kind":8,"storage":0},{"id":2,"usr":12703175702024075169,"detailed_name":"unsigned long state::outcnt","short_name_offset":21,"short_name_size":6,"hover":"","comments":"bytes written to out so far","declarations":[],"spell":"102:19-102:25|0|2|2","extent":"102:5-102:25|0|2|0","type":2,"uses":["185:16-185:22|1|3|12","188:23-188:29|1|3|28","191:12-191:18|1|3|4","466:24-466:30|4|3|12","468:27-468:33|4|3|12","470:16-470:22|4|3|28","485:27-485:33|4|3|12","491:24-491:30|4|3|12","494:31-494:37|4|3|12","499:39-499:45|4|3|12","500:24-500:30|4|3|28","504:20-504:26|4|3|4","805:7-805:13|7|3|20","836:22-836:28|7|3|12"],"kind":8,"storage":0},{"id":3,"usr":3889062330721455047,"detailed_name":"const unsigned char *state::in","short_name_offset":28,"short_name_size":2,"hover":"","comments":"input buffer","declarations":[],"spell":"105:26-105:28|0|2|2","extent":"105:5-105:28|0|2|0","type":1,"uses":["135:26-135:28|0|3|12","175:14-175:16|1|3|12","176:15-176:17|1|3|12","177:12-177:14|1|3|12","178:12-178:14|1|3|12","188:38-188:40|1|3|12","300:21-300:23|2|3|12","808:7-808:9|7|3|20"],"kind":8,"storage":0},{"id":4,"usr":6398227684748869942,"detailed_name":"unsigned long state::inlen","short_name_offset":21,"short_name_size":5,"hover":"","comments":"available input at in","declarations":[],"spell":"106:19-106:24|0|2|2","extent":"106:5-106:24|0|2|0","type":2,"uses":["133:28-133:33|0|3|12","173:27-173:32|1|3|12","182:29-182:34|1|3|12","298:28-298:33|2|3|12","809:7-809:12|7|3|20"],"kind":8,"storage":0},{"id":5,"usr":5479398142776246479,"detailed_name":"unsigned long state::incnt","short_name_offset":21,"short_name_size":5,"hover":"","comments":"bytes read so far","declarations":[],"spell":"107:19-107:24|0|2|2","extent":"107:5-107:24|0|2|0","type":2,"uses":["133:16-133:21|0|3|12","135:32-135:37|0|3|28","173:12-173:17|1|3|12","175:20-175:25|1|3|28","176:21-176:26|1|3|28","177:18-177:23|1|3|28","178:18-178:23|1|3|28","182:12-182:17|1|3|12","188:44-188:49|1|3|28","192:12-192:17|1|3|4","298:16-298:21|2|3|12","300:27-300:32|2|3|28","810:7-810:12|7|3|20","837:24-837:29|7|3|12"],"kind":8,"storage":0},{"id":6,"usr":11561728752888003908,"detailed_name":"int state::bitbuf","short_name_offset":11,"short_name_size":6,"hover":"","comments":"bit buffer","declarations":[],"spell":"108:9-108:15|0|2|2","extent":"108:5-108:15|0|2|0","type":3,"uses":["131:14-131:20|0|3|12","140:8-140:14|0|3|20","169:8-169:14|1|3|20","274:17-274:23|2|3|12","285:20-285:26|2|3|20","811:7-811:13|7|3|20"],"kind":8,"storage":0},{"id":7,"usr":3978554084860281482,"detailed_name":"int state::bitcnt","short_name_offset":11,"short_name_size":6,"hover":"","comments":"number of bits in bit buffer","declarations":[],"spell":"109:9-109:15|0|2|2","extent":"109:5-109:15|0|2|0","type":3,"uses":["132:15-132:21|0|3|12","135:48-135:54|0|3|12","136:12-136:18|0|3|4","141:8-141:14|0|3|4","170:8-170:14|1|3|20","275:15-275:21|2|3|12","286:20-286:26|2|3|20","286:33-286:39|2|3|12","812:7-812:13|7|3|20"],"kind":8,"storage":0},{"id":8,"usr":10816569081478842109,"detailed_name":"jmp_buf state::env","short_name_offset":15,"short_name_size":3,"hover":"","comments":"input limit error return state for bits() and decode()","declarations":[],"spell":"112:13-112:16|0|2|2","extent":"112:5-112:16|0|2|0","type":4,"uses":["134:24-134:27|0|3|4","299:24-299:27|2|3|4","815:18-815:21|7|3|4"],"kind":8,"storage":0},{"id":9,"usr":13709164038635070556,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"126:30-126:31|0|3|2","extent":"126:16-126:31|0|3|0","type":0,"uses":["131:11-131:12|0|3|12","132:12-132:13|0|3|12","133:13-133:14|0|3|12","133:25-133:26|0|3|12","134:21-134:22|0|3|12","135:23-135:24|0|3|12","135:29-135:30|0|3|12","135:45-135:46|0|3|12","136:9-136:10|0|3|12","140:5-140:6|0|3|12","141:5-141:6|0|3|12"],"kind":253,"storage":1},{"id":10,"usr":15910507080304514993,"detailed_name":"int need","short_name_offset":4,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"126:37-126:41|0|3|2","extent":"126:33-126:41|0|3|0","type":3,"uses":["132:24-132:28|0|3|12","140:30-140:34|0|3|12","141:18-141:22|0|3|12","144:32-144:36|0|3|12"],"kind":253,"storage":1},{"id":11,"usr":14495258626962466604,"detailed_name":"long val","short_name_offset":5,"short_name_size":3,"hover":"","comments":"bit accumulator (can use up to 20 bits)","declarations":[],"spell":"128:10-128:13|0|3|2","extent":"128:5-128:13|0|3|0","type":5,"uses":["131:5-131:8|0|3|20","135:9-135:12|0|3|4","140:23-140:26|0|3|12","144:18-144:21|0|3|12"],"kind":13,"storage":1},{"id":12,"usr":1973562448246529825,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"164:32-164:33|1|3|2","extent":"164:18-164:33|1|3|0","type":0,"uses":["169:5-169:6|1|3|12","170:5-170:6|1|3|12","173:9-173:10|1|3|12","173:24-173:25|1|3|12","175:11-175:12|1|3|12","175:17-175:18|1|3|12","176:12-176:13|1|3|12","176:18-176:19|1|3|12","177:9-177:10|1|3|12","177:15-177:16|1|3|12","178:9-178:10|1|3|12","178:15-178:16|1|3|12","182:9-182:10|1|3|12","182:26-182:27|1|3|12","184:9-184:10|1|3|12","185:13-185:14|1|3|12","185:31-185:32|1|3|12","188:13-188:14|1|3|12","188:20-188:21|1|3|12","188:35-188:36|1|3|12","188:41-188:42|1|3|12","191:9-191:10|1|3|12","192:9-192:10|1|3|12"],"kind":253,"storage":1},{"id":13,"usr":14871508120027630360,"detailed_name":"unsigned int len","short_name_offset":13,"short_name_size":3,"hover":"","comments":"length of stored block","declarations":[],"spell":"166:14-166:17|1|3|2","extent":"166:5-166:17|1|3|0","type":6,"uses":["175:5-175:8|1|3|20","176:5-176:8|1|3|4","177:32-177:35|1|3|12","178:33-178:36|1|3|12","182:20-182:23|1|3|12","185:25-185:28|1|3|12","187:16-187:19|1|3|28","191:22-191:25|1|3|12","192:21-192:24|1|3|12"],"kind":13,"storage":1},{"id":14,"usr":12663137278527846974,"detailed_name":"short *huffman::count","short_name_offset":16,"short_name_size":5,"hover":"","comments":"number of symbols of each length","declarations":[],"spell":"207:12-207:17|7|2|2","extent":"207:5-207:17|7|2|0","type":8,"uses":["278:15-278:20|2|3|12","349:12-349:17|3|3|12","351:13-351:18|3|3|12","352:12-352:17|3|3|12","359:20-359:25|3|3|12","367:40-367:45|3|3|12","549:17-549:22|5|3|20","551:18-551:23|5|3|20","678:13-678:18|6|3|20","680:14-680:19|6|3|20","737:44-737:49|6|3|12","737:63-737:68|6|3|12","742:46-742:51|6|3|12","742:66-742:71|6|3|12"],"kind":8,"storage":0},{"id":15,"usr":3816990665215647724,"detailed_name":"short *huffman::symbol","short_name_offset":16,"short_name_size":6,"hover":"","comments":"canonically ordered symbols","declarations":[],"spell":"208:12-208:18|7|2|2","extent":"208:5-208:18|7|2|0","type":8,"uses":["287:27-287:33|2|3|12","375:16-375:22|3|3|12","550:17-550:23|5|3|20","552:18-552:24|5|3|20","679:13-679:19|6|3|20","681:14-681:20|6|3|20"],"kind":8,"storage":0},{"id":16,"usr":10005739215780600590,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"263:32-263:33|2|3|2","extent":"263:18-263:33|2|3|0","type":0,"uses":["274:14-274:15|2|3|12","275:12-275:13|2|3|12","285:17-285:18|2|3|12","286:17-286:18|2|3|12","286:30-286:31|2|3|12","298:13-298:14|2|3|12","298:25-298:26|2|3|12","299:21-299:22|2|3|12","300:18-300:19|2|3|12","300:24-300:25|2|3|12"],"kind":253,"storage":1},{"id":17,"usr":3381985709307036534,"detailed_name":"const struct huffman *h","short_name_offset":22,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"263:57-263:58|2|3|2","extent":"263:35-263:58|2|3|0","type":7,"uses":["278:12-278:13|2|3|12","287:24-287:25|2|3|12"],"kind":253,"storage":1},{"id":18,"usr":2791169646942862544,"detailed_name":"int len","short_name_offset":4,"short_name_size":3,"hover":"","comments":"current number of bits in code","declarations":[],"spell":"265:9-265:12|2|3|2","extent":"265:5-265:12|2|3|0","type":3,"uses":["277:5-277:8|2|3|20","286:42-286:45|2|3|12","293:13-293:16|2|3|28","295:30-295:33|2|3|12"],"kind":13,"storage":1},{"id":19,"usr":14148845858773562242,"detailed_name":"int code","short_name_offset":4,"short_name_size":4,"hover":"","comments":"len bits being decoded","declarations":[],"spell":"266:9-266:13|2|3|2","extent":"266:5-266:13|2|3|0","type":3,"uses":["276:5-276:9|2|3|20","281:13-281:17|2|3|4","284:17-284:21|2|3|12","287:43-287:47|2|3|12","292:13-292:17|2|3|4"],"kind":13,"storage":1},{"id":20,"usr":17093003071855750637,"detailed_name":"int first","short_name_offset":4,"short_name_size":5,"hover":"","comments":"first code of length len","declarations":[],"spell":"267:9-267:14|2|3|2","extent":"267:5-267:14|2|3|0","type":3,"uses":["276:12-276:17|2|3|20","284:32-284:37|2|3|12","287:50-287:55|2|3|12","290:13-290:18|2|3|4","291:13-291:18|2|3|4"],"kind":13,"storage":1},{"id":21,"usr":9135758150212354097,"detailed_name":"int count","short_name_offset":4,"short_name_size":5,"hover":"","comments":"number of codes of length len","declarations":[],"spell":"268:9-268:14|2|3|2","extent":"268:5-268:14|2|3|0","type":3,"uses":["283:13-283:18|2|3|20","284:24-284:29|2|3|12","289:22-289:27|2|3|12","290:22-290:27|2|3|12"],"kind":13,"storage":1},{"id":22,"usr":5130440607707155713,"detailed_name":"int index","short_name_offset":4,"short_name_size":5,"hover":"","comments":"index of first code of length len in symbol table","declarations":[],"spell":"269:9-269:14|2|3|2","extent":"269:5-269:14|2|3|0","type":3,"uses":["276:20-276:25|2|3|20","287:34-287:39|2|3|12","289:13-289:18|2|3|4"],"kind":13,"storage":1},{"id":23,"usr":15573382852526900791,"detailed_name":"int bitbuf","short_name_offset":4,"short_name_size":6,"hover":"","comments":"bits from stream","declarations":[],"spell":"270:9-270:15|2|3|2","extent":"270:5-270:15|2|3|0","type":3,"uses":["274:5-274:11|2|3|20","281:21-281:27|2|3|12","282:13-282:19|2|3|4","285:29-285:35|2|3|12","300:9-300:15|2|3|20"],"kind":13,"storage":1},{"id":24,"usr":12231073373143434482,"detailed_name":"int left","short_name_offset":4,"short_name_size":4,"hover":"","comments":"bits left in next or left to process","declarations":[],"spell":"271:9-271:13|2|3|2","extent":"271:5-271:13|2|3|0","type":3,"uses":["275:5-275:9|2|3|20","280:16-280:20|2|3|28","295:9-295:13|2|3|20","296:13-296:17|2|3|12","301:13-301:17|2|3|12","302:13-302:17|2|3|20"],"kind":13,"storage":1},{"id":25,"usr":4322655731347148567,"detailed_name":"short *next","short_name_offset":7,"short_name_size":4,"hover":"","comments":"next number of codes","declarations":[],"spell":"272:12-272:16|2|3|2","extent":"272:5-272:16|2|3|0","type":8,"uses":["278:5-278:9|2|3|20","283:22-283:26|2|3|28"],"kind":13,"storage":1},{"id":26,"usr":17298387178886910556,"detailed_name":"struct huffman *h","short_name_offset":16,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"340:37-340:38|3|3|2","extent":"340:21-340:38|3|3|0","type":7,"uses":["349:9-349:10|3|3|12","351:10-351:11|3|3|12","352:9-352:10|3|3|12","359:17-359:18|3|3|12","367:37-367:38|3|3|12","375:13-375:14|3|3|12"],"kind":253,"storage":1},{"id":27,"usr":17034144601084792608,"detailed_name":"const short *length","short_name_offset":13,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"340:53-340:59|3|3|2","extent":"340:40-340:59|3|3|0","type":8,"uses":["351:19-351:25|3|3|12","374:13-374:19|3|3|12","375:28-375:34|3|3|12"],"kind":253,"storage":1},{"id":28,"usr":3328133695096114448,"detailed_name":"int n","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"340:65-340:66|3|3|2","extent":"340:61-340:66|3|3|0","type":3,"uses":["350:31-350:32|3|3|12","352:24-352:25|3|3|12","373:31-373:32|3|3|12"],"kind":253,"storage":1},{"id":29,"usr":8386544678096589969,"detailed_name":"int symbol","short_name_offset":4,"short_name_size":6,"hover":"","comments":"current symbol when stepping through length[]","declarations":[],"spell":"342:9-342:15|3|3|2","extent":"342:5-342:15|3|3|0","type":3,"uses":["350:10-350:16|3|3|20","350:22-350:28|3|3|12","350:34-350:40|3|3|28","351:26-351:32|3|3|12","373:10-373:16|3|3|20","373:22-373:28|3|3|12","373:34-373:40|3|3|28","374:20-374:26|3|3|12","375:35-375:41|3|3|12","375:49-375:55|3|3|12"],"kind":13,"storage":1},{"id":30,"usr":16643646225370980097,"detailed_name":"int len","short_name_offset":4,"short_name_size":3,"hover":"","comments":"current length when stepping through h->count[]","declarations":[],"spell":"343:9-343:12|3|3|2","extent":"343:5-343:12|3|3|0","type":3,"uses":["348:10-348:13|3|3|20","348:19-348:22|3|3|12","348:35-348:38|3|3|28","349:18-349:21|3|3|12","357:10-357:13|3|3|20","357:19-357:22|3|3|12","357:35-357:38|3|3|28","359:26-359:29|3|3|12","366:10-366:13|3|3|20","366:19-366:22|3|3|12","366:34-366:37|3|3|28","367:14-367:17|3|3|12","367:30-367:33|3|3|12","367:46-367:49|3|3|12"],"kind":13,"storage":1},{"id":31,"usr":6657513439946597490,"detailed_name":"int left","short_name_offset":4,"short_name_size":4,"hover":"","comments":"number of possible codes left of current length","declarations":[],"spell":"344:9-344:13|3|3|2","extent":"344:5-344:13|3|3|0","type":3,"uses":["356:5-356:9|3|3|20","358:9-358:13|3|3|4","359:9-359:13|3|3|4","360:13-360:17|3|3|12","361:20-361:24|3|3|12","378:12-378:16|3|3|12"],"kind":13,"storage":1},{"id":32,"usr":7832913495952058036,"detailed_name":"short [16] offs","short_name_offset":11,"short_name_size":4,"hover":"","comments":"offsets in symbol table for each length","declarations":[],"spell":"345:11-345:15|3|3|2","extent":"345:5-345:26|3|3|0","type":8,"uses":["365:5-365:9|3|3|4","367:9-367:13|3|3|4","367:25-367:29|3|3|4","375:23-375:27|3|3|4"],"kind":13,"storage":1},{"id":33,"usr":10806713833424877815,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"436:31-436:32|4|3|2","extent":"436:17-436:32|4|3|0","type":0,"uses":["460:25-460:26|4|3|12","465:17-465:18|4|3|12","466:21-466:22|4|3|12","466:34-466:35|4|3|12","468:17-468:18|4|3|12","468:24-468:25|4|3|12","470:13-470:14|4|3|12","477:39-477:40|4|3|12","480:29-480:30|4|3|12","483:41-483:42|4|3|12","485:24-485:25|4|3|12","490:17-490:18|4|3|12","491:21-491:22|4|3|12","491:39-491:40|4|3|12","494:21-494:22|4|3|12","494:28-494:29|4|3|12","499:29-499:30|4|3|12","499:36-499:37|4|3|12","500:21-500:22|4|3|12","504:17-504:18|4|3|12"],"kind":253,"storage":1},{"id":34,"usr":11812767012206693123,"detailed_name":"const struct huffman *lencode","short_name_offset":22,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"437:39-437:46|4|3|2","extent":"437:17-437:46|4|3|0","type":7,"uses":["460:28-460:35|4|3|12"],"kind":253,"storage":1},{"id":35,"usr":16279296215126185709,"detailed_name":"const struct huffman *distcode","short_name_offset":22,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"438:39-438:47|4|3|2","extent":"438:17-438:47|4|3|0","type":7,"uses":["480:32-480:40|4|3|12"],"kind":253,"storage":1},{"id":36,"usr":6629657775497507650,"detailed_name":"int symbol","short_name_offset":4,"short_name_size":6,"hover":"","comments":"decoded symbol","declarations":[],"spell":"440:9-440:15|4|3|2","extent":"440:5-440:15|4|3|0","type":3,"uses":["460:9-460:15|4|3|20","461:13-461:19|4|3|12","462:20-462:26|4|3|12","463:13-463:19|4|3|12","468:37-468:43|4|3|12","472:18-472:24|4|3|12","474:13-474:19|4|3|4","475:17-475:23|4|3|12","477:24-477:30|4|3|12","477:47-477:53|4|3|12","480:13-480:19|4|3|20","481:17-481:23|4|3|12","482:24-482:30|4|3|12","483:26-483:32|4|3|12","483:49-483:55|4|3|12","506:14-506:20|4|3|12"],"kind":13,"storage":1},{"id":37,"usr":4436037419921760758,"detailed_name":"int len","short_name_offset":4,"short_name_size":3,"hover":"","comments":"length for copy","declarations":[],"spell":"441:9-441:12|4|3|2","extent":"441:5-441:12|4|3|0","type":3,"uses":["477:13-477:16|4|3|20","491:33-491:36|4|3|12","493:24-493:27|4|3|28","504:30-504:33|4|3|12"],"kind":13,"storage":1},{"id":38,"usr":15982937178188113269,"detailed_name":"unsigned int dist","short_name_offset":13,"short_name_size":4,"hover":"","comments":"distance for copy","declarations":[],"spell":"442:14-442:18|4|3|2","extent":"442:5-442:18|4|3|0","type":6,"uses":["483:13-483:17|4|3|20","485:17-485:21|4|3|12","499:48-499:52|4|3|12"],"kind":13,"storage":1},{"id":39,"usr":6736425341857051009,"detailed_name":"const short [29] lens","short_name_offset":17,"short_name_size":4,"hover":"","comments":"Size base for length codes 257..285","declarations":[],"spell":"443:24-443:28|4|3|2","extent":"443:5-445:66|4|3|0","type":8,"uses":["477:19-477:23|4|3|4"],"kind":13,"storage":3},{"id":40,"usr":18419355368711567685,"detailed_name":"const short [29] lext","short_name_offset":17,"short_name_size":4,"hover":"","comments":"Extra bits for length codes 257..285","declarations":[],"spell":"446:24-446:28|4|3|2","extent":"446:5-448:47|4|3|0","type":8,"uses":["477:42-477:46|4|3|4"],"kind":13,"storage":3},{"id":41,"usr":13993821950081229443,"detailed_name":"const short [30] dists","short_name_offset":17,"short_name_size":5,"hover":"","comments":"Offset base for distance codes 0..29","declarations":[],"spell":"449:24-449:29|4|3|2","extent":"449:5-452:35|4|3|0","type":8,"uses":["483:20-483:25|4|3|4"],"kind":13,"storage":3},{"id":42,"usr":3032257842529073440,"detailed_name":"const short [30] dext","short_name_offset":17,"short_name_size":4,"hover":"","comments":"Extra bits for distance codes 0..29","declarations":[],"spell":"453:24-453:28|4|3|2","extent":"453:5-456:24|4|3|0","type":8,"uses":["483:44-483:48|4|3|4"],"kind":13,"storage":3},{"id":43,"usr":11513177769259458492,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"536:31-536:32|5|3|2","extent":"536:17-536:32|5|3|0","type":0,"uses":["575:18-575:19|5|3|12"],"kind":253,"storage":1},{"id":44,"usr":17782368455552084623,"detailed_name":"int virgin","short_name_offset":4,"short_name_size":6,"hover":"int virgin = 1","comments":"","declarations":[],"spell":"538:16-538:22|5|3|2","extent":"538:5-538:26|5|3|0","type":3,"uses":["544:9-544:15|5|3|12","571:9-571:15|5|3|20"],"kind":13,"storage":3},{"id":45,"usr":13385060188558632256,"detailed_name":"short [16] lencnt","short_name_offset":11,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"539:18-539:24|5|3|2","extent":"539:5-539:35|5|3|0","type":8,"uses":["549:25-549:31|5|3|4"],"kind":13,"storage":3},{"id":46,"usr":6467659157096857443,"detailed_name":"short [288] lensym","short_name_offset":12,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"539:37-539:43|5|3|2","extent":"539:5-539:54|5|3|0","type":8,"uses":["550:26-550:32|5|3|4"],"kind":13,"storage":3},{"id":47,"usr":13840032048711886860,"detailed_name":"short [16] distcnt","short_name_offset":11,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"540:18-540:25|5|3|2","extent":"540:5-540:36|5|3|0","type":8,"uses":["551:26-551:33|5|3|4"],"kind":13,"storage":3},{"id":48,"usr":6153235430332390321,"detailed_name":"short [30] distsym","short_name_offset":11,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"540:38-540:45|5|3|2","extent":"540:5-540:56|5|3|0","type":8,"uses":["552:27-552:34|5|3|4"],"kind":13,"storage":3},{"id":49,"usr":2803458083835343745,"detailed_name":"struct huffman lencode","short_name_offset":15,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"541:27-541:34|5|3|2","extent":"541:5-541:34|5|3|0","type":7,"uses":["549:9-549:16|5|3|4","550:9-550:16|5|3|4","563:20-563:27|5|3|132","575:22-575:29|5|3|132"],"kind":13,"storage":3},{"id":50,"usr":14640291718255118068,"detailed_name":"struct huffman distcode","short_name_offset":15,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"541:36-541:44|5|3|2","extent":"541:5-541:44|5|3|0","type":7,"uses":["551:9-551:17|5|3|4","552:9-552:17|5|3|4","568:20-568:28|5|3|132","575:32-575:40|5|3|132"],"kind":13,"storage":3},{"id":51,"usr":12999017567175463785,"detailed_name":"int symbol","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"545:13-545:19|5|3|2","extent":"545:9-545:19|5|3|0","type":3,"uses":["555:14-555:20|5|3|20","555:26-555:32|5|3|12","555:40-555:46|5|3|28","556:21-556:27|5|3|12","557:16-557:22|5|3|12","557:30-557:36|5|3|28","558:21-558:27|5|3|12","559:16-559:22|5|3|12","559:30-559:36|5|3|28","560:21-560:27|5|3|12","561:16-561:22|5|3|12","561:36-561:42|5|3|28","562:21-562:27|5|3|12","566:14-566:20|5|3|20","566:26-566:32|5|3|12","566:46-566:52|5|3|28","567:21-567:27|5|3|12"],"kind":13,"storage":1},{"id":52,"usr":13659400620622330261,"detailed_name":"short [288] lengths","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"546:15-546:22|5|3|2","extent":"546:9-546:33|5|3|0","type":8,"uses":["556:13-556:20|5|3|4","558:13-558:20|5|3|4","560:13-560:20|5|3|4","562:13-562:20|5|3|4","563:29-563:36|5|3|4","567:13-567:20|5|3|4","568:30-568:37|5|3|4"],"kind":13,"storage":1},{"id":53,"usr":15776319355585998885,"detailed_name":"struct state *s","short_name_offset":14,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"665:33-665:34|6|3|2","extent":"665:19-665:34|6|3|0","type":0,"uses":["684:17-684:18|6|3|12","685:18-685:19|6|3|12","686:18-686:19|6|3|12","692:38-692:39|6|3|12","707:25-707:26|6|3|12","718:35-718:36|6|3|12","721:35-721:36|6|3|12","723:36-723:37|6|3|12","746:18-746:19|6|3|12"],"kind":253,"storage":1},{"id":54,"usr":14928803091847176303,"detailed_name":"int nlen","short_name_offset":4,"short_name_size":4,"hover":"","comments":"number of lengths in descriptor","declarations":[],"spell":"667:9-667:13|6|3|2","extent":"667:5-667:13|6|3|0","type":3,"uses":["684:5-684:9|6|3|20","687:9-687:13|6|3|12","703:20-703:24|6|3|12","724:34-724:38|6|3|12","736:40-736:44|6|3|12","737:28-737:32|6|3|12","741:42-741:46|6|3|12"],"kind":13,"storage":1},{"id":55,"usr":6166324426385867172,"detailed_name":"int ndist","short_name_offset":4,"short_name_size":5,"hover":"","comments":"number of lengths in descriptor","declarations":[],"spell":"667:15-667:20|6|3|2","extent":"667:5-667:20|6|3|0","type":3,"uses":["685:5-685:10|6|3|20","687:29-687:34|6|3|12","703:27-703:32|6|3|12","724:41-724:46|6|3|12","741:48-741:53|6|3|12","742:28-742:33|6|3|12"],"kind":13,"storage":1},{"id":56,"usr":17810100814487959173,"detailed_name":"int ncode","short_name_offset":4,"short_name_size":5,"hover":"","comments":"number of lengths in descriptor","declarations":[],"spell":"667:22-667:27|6|3|2","extent":"667:5-667:27|6|3|0","type":3,"uses":["686:5-686:10|6|3|20","691:29-691:34|6|3|12"],"kind":13,"storage":1},{"id":57,"usr":4235486872172310835,"detailed_name":"int index","short_name_offset":4,"short_name_size":5,"hover":"","comments":"index of lengths[]","declarations":[],"spell":"668:9-668:14|6|3|2","extent":"668:5-668:14|6|3|0","type":3,"uses":["691:10-691:15|6|3|20","691:21-691:26|6|3|12","691:36-691:41|6|3|28","692:23-692:28|6|3|12","693:12-693:17|6|3|12","693:24-693:29|6|3|28","694:23-694:28|6|3|12","702:5-702:10|6|3|20","703:12-703:17|6|3|12","711:21-711:26|6|3|28","715:21-715:26|6|3|12","717:31-717:36|6|3|12","724:17-724:22|6|3|12","727:25-727:30|6|3|28"],"kind":13,"storage":1},{"id":58,"usr":8606745109436517714,"detailed_name":"int err","short_name_offset":4,"short_name_size":3,"hover":"","comments":"construct() return value","declarations":[],"spell":"669:9-669:12|6|3|2","extent":"669:5-669:12|6|3|0","type":3,"uses":["697:5-697:8|6|3|20","698:9-698:12|6|3|12","736:5-736:8|6|3|20","737:9-737:12|6|3|12","737:17-737:20|6|3|12","741:5-741:8|6|3|20","742:9-742:12|6|3|12","742:17-742:20|6|3|12"],"kind":13,"storage":1},{"id":59,"usr":6412732602718758180,"detailed_name":"short [316] lengths","short_name_offset":12,"short_name_size":7,"hover":"","comments":"descriptor code lengths","declarations":[],"spell":"670:11-670:18|6|3|2","extent":"670:5-670:28|6|3|0","type":8,"uses":["692:9-692:16|6|3|4","694:9-694:16|6|3|4","697:31-697:38|6|3|4","711:13-711:20|6|3|4","717:23-717:30|6|3|4","727:17-727:24|6|3|4","732:9-732:16|6|3|4","736:31-736:38|6|3|4","741:32-741:39|6|3|4"],"kind":13,"storage":1},{"id":60,"usr":4134025445011397775,"detailed_name":"short [16] lencnt","short_name_offset":11,"short_name_size":6,"hover":"","comments":"lencode memory","declarations":[],"spell":"671:11-671:17|6|3|2","extent":"671:5-671:28|6|3|0","type":8,"uses":["678:21-678:27|6|3|4"],"kind":13,"storage":1},{"id":61,"usr":17173895458322116141,"detailed_name":"short [286] lensym","short_name_offset":12,"short_name_size":6,"hover":"","comments":"lencode memory","declarations":[],"spell":"671:30-671:36|6|3|2","extent":"671:5-671:47|6|3|0","type":8,"uses":["679:22-679:28|6|3|4"],"kind":13,"storage":1},{"id":62,"usr":11128603230075452247,"detailed_name":"short [16] distcnt","short_name_offset":11,"short_name_size":7,"hover":"","comments":"distcode memory","declarations":[],"spell":"672:11-672:18|6|3|2","extent":"672:5-672:29|6|3|0","type":8,"uses":["680:22-680:29|6|3|4"],"kind":13,"storage":1},{"id":63,"usr":15278782149757948198,"detailed_name":"short [30] distsym","short_name_offset":11,"short_name_size":7,"hover":"","comments":"distcode memory","declarations":[],"spell":"672:31-672:38|6|3|2","extent":"672:5-672:49|6|3|0","type":8,"uses":["681:23-681:30|6|3|4"],"kind":13,"storage":1},{"id":64,"usr":12067560793057375422,"detailed_name":"struct huffman lencode","short_name_offset":15,"short_name_size":7,"hover":"","comments":"length and distance codes","declarations":[],"spell":"673:20-673:27|6|3|2","extent":"673:5-673:27|6|3|0","type":7,"uses":["678:5-678:12|6|3|4","679:5-679:12|6|3|4","697:22-697:29|6|3|132","707:29-707:36|6|3|132","736:22-736:29|6|3|132","737:36-737:43|6|3|4","737:55-737:62|6|3|4","746:22-746:29|6|3|132"],"kind":13,"storage":1},{"id":65,"usr":6362617169375423788,"detailed_name":"struct huffman distcode","short_name_offset":15,"short_name_size":8,"hover":"","comments":"length and distance codes","declarations":[],"spell":"673:29-673:37|6|3|2","extent":"673:5-673:37|6|3|0","type":7,"uses":["680:5-680:13|6|3|4","681:5-681:13|6|3|4","741:22-741:30|6|3|132","742:37-742:45|6|3|4","742:57-742:65|6|3|4","746:32-746:40|6|3|132"],"kind":13,"storage":1},{"id":66,"usr":11316799351324151443,"detailed_name":"const short [19] order","short_name_offset":17,"short_name_size":5,"hover":"","comments":"permutation of code length codes","declarations":[],"spell":"674:24-674:29|6|3|2","extent":"674:5-675:75|6|3|0","type":8,"uses":["692:17-692:22|6|3|4","694:17-694:22|6|3|4"],"kind":13,"storage":3},{"id":67,"usr":13752019526550741540,"detailed_name":"int symbol","short_name_offset":4,"short_name_size":6,"hover":"","comments":"decoded value","declarations":[],"spell":"704:13-704:19|6|3|2","extent":"704:9-704:19|6|3|0","type":3,"uses":["707:9-707:15|6|3|20","708:13-708:19|6|3|12","709:20-709:26|6|3|12","710:13-710:19|6|3|12","711:32-711:38|6|3|12","714:17-714:23|6|3|12","718:17-718:23|6|3|20","720:22-720:28|6|3|12","721:17-721:23|6|3|20","723:17-723:23|6|3|20","724:25-724:31|6|3|12","726:20-726:26|6|3|28"],"kind":13,"storage":1},{"id":68,"usr":258975424882680863,"detailed_name":"int len","short_name_offset":4,"short_name_size":3,"hover":"","comments":"last length to repeat","declarations":[],"spell":"705:13-705:16|6|3|2","extent":"705:9-705:16|6|3|0","type":3,"uses":["713:13-713:16|6|3|20","717:17-717:20|6|3|20","727:36-727:39|6|3|12"],"kind":13,"storage":1},{"id":69,"usr":5467788854117839644,"detailed_name":"unsigned char *dest","short_name_offset":15,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"793:25-793:29|7|3|2","extent":"793:10-793:29|7|3|0","type":1,"uses":["803:13-803:17|7|3|12"],"kind":253,"storage":1},{"id":70,"usr":6344742383943618441,"detailed_name":"unsigned long *destlen","short_name_offset":15,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"794:25-794:32|7|3|2","extent":"794:10-794:32|7|3|0","type":2,"uses":["804:17-804:24|7|3|12","836:10-836:17|7|3|12"],"kind":253,"storage":1},{"id":71,"usr":5753866693143816666,"detailed_name":"const unsigned char *source","short_name_offset":21,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"795:31-795:37|7|3|2","extent":"795:10-795:37|7|3|0","type":1,"uses":["808:12-808:18|7|3|12"],"kind":253,"storage":1},{"id":72,"usr":12841473407289827560,"detailed_name":"unsigned long *sourcelen","short_name_offset":15,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"796:25-796:34|7|3|2","extent":"796:10-796:34|7|3|0","type":2,"uses":["809:16-809:25|7|3|12","837:10-837:19|7|3|12"],"kind":253,"storage":1},{"id":73,"usr":1004038098882069095,"detailed_name":"struct state s","short_name_offset":13,"short_name_size":1,"hover":"","comments":"input/output state","declarations":[],"spell":"798:18-798:19|7|3|2","extent":"798:5-798:19|7|3|0","type":0,"uses":["803:5-803:6|7|3|4","804:5-804:6|7|3|4","805:5-805:6|7|3|4","808:5-808:6|7|3|4","809:5-809:6|7|3|4","810:5-810:6|7|3|4","811:5-811:6|7|3|4","812:5-812:6|7|3|4","815:16-815:17|7|3|4","820:26-820:27|7|3|132","821:26-821:27|7|3|132","823:29-823:30|7|3|132","825:32-825:33|7|3|132","827:38-827:39|7|3|132","836:20-836:21|7|3|4","837:22-837:23|7|3|4"],"kind":13,"storage":1},{"id":74,"usr":7082374238386964288,"detailed_name":"int last","short_name_offset":4,"short_name_size":4,"hover":"","comments":"block information","declarations":[],"spell":"799:9-799:13|7|3|2","extent":"799:5-799:13|7|3|0","type":3,"uses":["820:13-820:17|7|3|20","831:19-831:23|7|3|12"],"kind":13,"storage":1},{"id":75,"usr":8266794445797960312,"detailed_name":"int type","short_name_offset":4,"short_name_size":4,"hover":"","comments":"block information","declarations":[],"spell":"799:15-799:19|7|3|2","extent":"799:5-799:19|7|3|0","type":3,"uses":["821:13-821:17|7|3|20","822:19-822:23|7|3|12","824:22-824:26|7|3|12","826:26-826:30|7|3|12"],"kind":13,"storage":1},{"id":76,"usr":6564795785027983488,"detailed_name":"int err","short_name_offset":4,"short_name_size":3,"hover":"","comments":"return value","declarations":[],"spell":"800:9-800:12|7|3|2","extent":"800:5-800:12|7|3|0","type":3,"uses":["816:9-816:12|7|3|20","822:13-822:16|7|3|20","829:17-829:20|7|3|12","835:9-835:12|7|3|12","839:12-839:15|7|3|12"],"kind":13,"storage":1},{"id":77,"usr":428160520706036611,"detailed_name":"local","short_name_offset":0,"short_name_size":5,"hover":"#define local static","comments":"","declarations":[],"spell":"85:9-85:14|-1|1|2","extent":"85:9-85:21|-1|1|0","uses":["126:1-126:6|-1|1|4","164:1-164:6|-1|1|4","263:1-263:6|-1|1|4","340:1-340:6|-1|1|4","436:1-436:6|-1|1|4","536:1-536:6|-1|1|4","665:1-665:6|-1|1|4"],"kind":255,"storage":0},{"id":78,"usr":484607209040119530,"detailed_name":"MAXBITS","short_name_offset":0,"short_name_size":7,"hover":"#define MAXBITS 15","comments":"","declarations":[],"spell":"91:9-91:16|-1|1|2","extent":"91:9-91:19|-1|1|0","uses":["295:17-295:24|-1|1|4","345:16-345:23|-1|1|4","348:26-348:33|-1|1|4","357:26-357:33|-1|1|4","366:25-366:32|-1|1|4","539:25-539:32|-1|1|4","540:26-540:33|-1|1|4","671:18-671:25|-1|1|4","672:19-672:26|-1|1|4"],"kind":255,"storage":0},{"id":79,"usr":18027140596354139557,"detailed_name":"MAXLCODES","short_name_offset":0,"short_name_size":9,"hover":"#define MAXLCODES 286","comments":"","declarations":[],"spell":"92:9-92:18|-1|1|2","extent":"92:9-92:22|-1|1|0","uses":["671:37-671:46|-1|1|4","687:16-687:25|-1|1|4"],"kind":255,"storage":0},{"id":80,"usr":1790815223735968972,"detailed_name":"MAXDCODES","short_name_offset":0,"short_name_size":9,"hover":"#define MAXDCODES 30","comments":"","declarations":[],"spell":"93:9-93:18|-1|1|2","extent":"93:9-93:21|-1|1|0","uses":["540:46-540:55|-1|1|4","566:35-566:44|-1|1|4","568:39-568:48|-1|1|4","672:39-672:48|-1|1|4","687:37-687:46|-1|1|4"],"kind":255,"storage":0},{"id":81,"usr":9381346030147521430,"detailed_name":"MAXCODES","short_name_offset":0,"short_name_size":8,"hover":"#define MAXCODES (MAXLCODES+MAXDCODES)","comments":"","declarations":[],"spell":"94:9-94:17|-1|1|2","extent":"94:9-94:39|-1|1|0","uses":["670:19-670:27|-1|1|4"],"kind":255,"storage":0},{"id":82,"usr":9994787661902099946,"detailed_name":"FIXLCODES","short_name_offset":0,"short_name_size":9,"hover":"#define FIXLCODES 288","comments":"","declarations":[],"spell":"95:9-95:18|-1|1|2","extent":"95:9-95:22|-1|1|0","uses":["539:44-539:53|-1|1|4","546:23-546:32|-1|1|4","561:25-561:34|-1|1|4","563:38-563:47|-1|1|4"],"kind":255,"storage":0},{"id":83,"usr":15836500362781134965,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["184:19-184:22|-1|1|4","465:27-465:30|-1|1|4","490:27-490:30|-1|1|4"],"kind":0,"storage":0},{"id":84,"usr":6176928061434216081,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["815:9-815:15|-1|1|4"],"kind":0,"storage":0}]}