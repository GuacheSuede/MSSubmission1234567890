16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/blast/blast.c","args_hash":10433645398913005206,"includes":[],"dependencies":["/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/contrib/blast/blast.c","/usr/local/lib/clang/7.0.0/include/stddef.h","/usr/include/setjmp.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/x86_64-linux-gnu/bits/setjmp.h","/usr/local/lib/clang/7.0.0/include/__stddef_max_align_t.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":14718442274581576391,"detailed_name":"blast_in","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"typedef unsigned (*blast_in)(void *how, unsigned char **buf)","comments":"\n blast() decompresses the PKWare Data Compression Library (DCL) compressed\n format.  It provides the same functionality as the explode() function in\n that library.  (Note: PKWare overused the \"implode\" verb, and the format\n used by their library implode() function is completely different and\n incompatible with the implode compression method supported by PKZIP.)\n\n The binary mode for stdio functions should be used to assure that the\n compressed data is not corrupted when read or written.  For example:\n fopen(..., \"rb\") and fopen(..., \"wb\").","declarations":[],"spell":"38:20-38:28|-1|1|2","extent":"38:1-38:61|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["38:20-38:28|-1|1|4","45:11-45:19|-1|1|4"]},{"id":2,"usr":1556492678057006057,"detailed_name":"blast_out","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef int (*blast_out)(void *how, unsigned char *buf, unsigned len)","comments":"","declarations":[],"spell":"39:15-39:24|-1|1|2","extent":"39:1-39:70|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["39:15-39:24|-1|1|4","45:40-45:49|-1|1|4"]}],"funcs":[{"id":0,"usr":6792054219351680982,"detailed_name":"int blast(blast_in infun, void *inhow, blast_out outfun, void *outhow, unsigned int *left, unsigned char **in)","short_name_offset":4,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"Definitions for input/output functions passed to blast().  See below for\nwhat the provided functions need to do.","declarations":[{"spell":"45:5-45:10|-1|1|1","param_spellings":["45:20-45:25","45:33-45:38","45:50-45:56","45:64-45:70","46:21-46:25","46:43-46:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[]}