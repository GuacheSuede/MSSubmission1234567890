16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inflate.c","args_hash":10433645398913005206,"includes":[{"line":33,"resolved_path":"/usr/include/zconf.h"}],"dependencies":["/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inflate.c","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/zutil.h","/usr/include/zconf.h","/usr/local/lib/clang/7.0.0/include/stddef.h","/usr/local/lib/clang/7.0.0/include/limits.h","/usr/include/limits.h","/usr/include/x86_64-linux-gnu/bits/libc-header-start.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/x86_64-linux-gnu/bits/posix1_lim.h","/usr/include/x86_64-linux-gnu/bits/local_lim.h","/usr/include/x86_64-linux-gnu/sys/types.h","/usr/include/x86_64-linux-gnu/bits/types.h","/usr/include/x86_64-linux-gnu/bits/types/clock_t.h","/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h","/usr/include/x86_64-linux-gnu/bits/types/time_t.h","/usr/include/x86_64-linux-gnu/bits/types/timer_t.h","/usr/include/x86_64-linux-gnu/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/x86_64-linux-gnu/bits/byteswap.h","/usr/include/x86_64-linux-gnu/bits/uintn-identity.h","/usr/include/x86_64-linux-gnu/sys/select.h","/usr/include/x86_64-linux-gnu/bits/select.h","/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h","/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h","/usr/include/unistd.h","/usr/include/x86_64-linux-gnu/bits/environments.h","/usr/include/x86_64-linux-gnu/bits/getopt_posix.h","/usr/include/string.h","/usr/include/x86_64-linux-gnu/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/stdlib.h","/usr/include/x86_64-linux-gnu/bits/floatn.h","/usr/include/x86_64-linux-gnu/bits/floatn-common.h","/usr/include/alloca.h","/usr/local/lib/clang/7.0.0/include/__stddef_max_align_t.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/usr/local/lib/clang/7.0.0/include/stdarg.h","/usr/include/x86_64-linux-gnu/bits/confname.h","/usr/include/x86_64-linux-gnu/bits/getopt_core.h","/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h","/usr/include/x86_64-linux-gnu/bits/waitflags.h","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inftrees.h","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inflate.h","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inffast.h","/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/zlib-1.2.11/inffixed.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h","/usr/include/linux/limits.h","/usr/include/x86_64-linux-gnu/bits/posix2_lim.h","/usr/include/x86_64-linux-gnu/bits/typesizes.h","/usr/include/x86_64-linux-gnu/bits/endian.h","/usr/include/x86_64-linux-gnu/bits/posix_opt.h","/usr/include/x86_64-linux-gnu/bits/waitstatus.h","/usr/include/x86_64-linux-gnu/bits/stdlib-float.h"],"skipped_by_preprocessor":["36:1-38:7","1778:1-1792:6","1823:1-1827:6","1838:1-1845:7","1847:1-1871:6","1880:1-1885:7","1896:1-1899:7","1908:1-1910:7"],"types":[{"id":0,"usr":980903111474639642,"detailed_name":"voidpf","short_name_offset":0,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[10],"uses":["81:9-81:15|-1|1|4","81:34-81:40|-1|1|4","82:34-82:40|-1|1|4","82:49-82:55|-1|1|4","100:5-100:11|-1|1|4"]},{"id":1,"usr":14436170217867265802,"detailed_name":"alloc_func","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size)","comments":"\n  The 'zlib' compression library provides in-memory compression and\ndecompression functions, including integrity checks of the uncompressed data.\nThis version of the library supports only one compression method (deflation)\nbut other algorithms will be added later and will have the same stream\ninterface.\n\n  Compression can be done in a single step if the buffers are large enough,\nor can be done by repeated calls of the compression function.  In the latter\ncase, the application must provide more input and/or consume the output\n(providing more output space) before each call.\n\n  The compressed data format used by default by the in-memory functions is\nthe zlib format, which is a zlib wrapper documented in RFC 1950, wrapped\naround a deflate stream, which is itself documented in RFC 1951.\n\n  The library also supports reading and writing files in gzip (.gz) format\nwith an interface similar to that of stdio using the functions that start\nwith \"gz\".  The gzip format is different from the zlib format.  gzip is a\ngzip wrapper, documented in RFC 1952, wrapped around a deflate stream.\n\n  This library can optionally read and write gzip and raw deflate streams in\nmemory as well.\n\n  The zlib format was designed to be compact and fast for use in memory\nand on communications channels.  The gzip format was designed for single-\nfile compression on file systems, has a larger header than zlib to maintain\ndirectory information, and uses a different, slower check method than zlib.\n\n  The library does not install any signal handler.  The decoder checks\nthe consistency of the compressed data, so the library should never crash\neven in the case of corrupted input.","declarations":[],"spell":"81:18-81:28|-1|1|2","extent":"81:1-81:71|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8],"uses":["81:18-81:28|-1|1|4","98:5-98:15|-1|1|4"]},{"id":2,"usr":2769278288022376664,"detailed_name":"uInt","short_name_offset":0,"short_name_size":4,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,4,19,20,22,24],"uses":["81:49-81:53|-1|1|4","81:61-81:65|-1|1|4","88:5-88:9|-1|1|4","92:5-92:9|-1|1|4","120:5-120:9|-1|1|4","121:5-121:9|-1|1|4","123:5-123:9|-1|1|4","125:5-125:9|-1|1|4","613:46-613:50|-1|1|4","657:46-657:50|-1|1|4","886:46-886:50|-1|1|4","909:46-909:50|-1|1|4","1688:66-1688:70|-1|1|4","1725:64-1725:68|-1|1|4"]},{"id":3,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":4,"usr":876589351024196228,"detailed_name":"free_func","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef void   (*free_func)  OF((voidpf opaque, voidpf address)","comments":"","declarations":[],"spell":"82:18-82:27|-1|1|2","extent":"82:1-82:64|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[9],"uses":["82:18-82:27|-1|1|4","99:5-99:14|-1|1|4"]},{"id":5,"usr":8611827018016010595,"detailed_name":"internal_state","short_name_offset":0,"short_name_size":14,"kind":23,"hover":"","comments":"","declarations":["84:8-84:22|-1|1|1"],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[7],"uses":["96:12-96:26|-1|1|4"]},{"id":6,"usr":15729590961547248303,"detailed_name":"z_stream_s","short_name_offset":0,"short_name_size":10,"kind":23,"hover":"","comments":"","declarations":[],"spell":"86:16-86:26|-1|1|2","extent":"86:9-106:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"instances":[],"uses":[]},{"id":7,"usr":12676954628573938354,"detailed_name":"z_stream","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"","comments":"","declarations":[],"spell":"106:3-106:11|-1|1|2","extent":"86:1-106:11|-1|1|0","alias_of":6,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["106:3-106:11|-1|1|4","108:9-108:17|-1|1|4"]},{"id":8,"usr":97083651402278683,"detailed_name":"Bytef","short_name_offset":0,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,3,18,21,23],"uses":["87:13-87:18|-1|1|4","91:5-91:10|-1|1|4","119:5-119:10|-1|1|4","122:5-122:10|-1|1|4","124:5-124:10|-1|1|4","612:52-612:57|-1|1|4","656:46-656:51|-1|1|4","885:52-885:57|-1|1|4","908:46-908:51|-1|1|4","1227:34-1227:39|-1|1|4","1228:40-1228:45|-1|1|4","1242:35-1242:40|-1|1|4","1243:41-1243:46|-1|1|4","1265:36-1265:41|-1|1|4","1266:42-1266:47|-1|1|4","1283:37-1283:42|-1|1|4","1284:43-1284:48|-1|1|4","1688:54-1688:59|-1|1|4","1707:56-1707:61|-1|1|4","1725:52-1725:57|-1|1|4","1742:54-1742:59|-1|1|4"]},{"id":9,"usr":3935577257531214198,"detailed_name":"uLong","short_name_offset":0,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,5,12,13,15],"uses":["89:5-89:10|-1|1|4","93:5-93:10|-1|1|4","104:5-104:10|-1|1|4","105:5-105:10|-1|1|4","116:5-116:10|-1|1|4","760:9-760:14|-1|1|4","761:40-761:45|-1|1|4","1174:9-1174:14|-1|1|4","1228:55-1228:60|-1|1|4","1243:56-1243:61|-1|1|4","1258:9-1258:14|-1|1|4","1258:41-1258:46|-1|1|4","1266:57-1266:62|-1|1|4","1284:58-1284:63|-1|1|4","1688:9-1688:14|-1|1|4","1688:35-1688:40|-1|1|4","1707:9-1707:14|-1|1|4","1707:37-1707:42|-1|1|4","1725:9-1725:14|-1|1|4","1725:35-1725:40|-1|1|4","1742:9-1742:14|-1|1|4","1742:35-1742:40|-1|1|4","1876:12-1876:17|-1|1|4","1876:46-1876:51|-1|1|4","1876:53-1876:58|-1|1|4","1877:12-1877:17|-1|1|4","1877:44-1877:49|-1|1|4","1877:51-1877:56|-1|1|4"]},{"id":10,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6],"uses":[]},{"id":11,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[11,14,16,17,25,26],"uses":[]},{"id":12,"usr":8751839191099825261,"detailed_name":"z_streamp","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef z_stream FAR *z_streamp","comments":"","declarations":[],"spell":"108:23-108:32|-1|1|2","extent":"108:1-108:32|-1|1|0","alias_of":7,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["108:23-108:32|-1|1|4","250:33-250:42|-1|1|4","363:36-363:45|-1|1|4","400:33-400:42|-1|1|4","520:36-520:45|-1|1|4","611:46-611:55|-1|1|4","655:46-655:55|-1|1|4","677:37-677:46|-1|1|4","678:37-678:46|-1|1|4","695:38-695:47|-1|1|4","706:39-706:48|-1|1|4","743:37-743:46|-1|1|4","760:40-760:49|-1|1|4","775:40-775:49|-1|1|4","790:38-790:47|-1|1|4","807:42-807:51|-1|1|4","884:46-884:55|-1|1|4","907:46-907:55|-1|1|4","922:37-922:46|-1|1|4","941:37-941:46|-1|1|4","942:37-942:46|-1|1|4","957:38-957:47|-1|1|4","967:39-967:48|-1|1|4","981:38-981:47|-1|1|4","1002:38-1002:47|-1|1|4","1030:42-1030:51|-1|1|4","1096:37-1096:46|-1|1|4","1166:40-1166:49|-1|1|4","1764:38-1764:47|-1|1|4","1766:38-1766:47|-1|1|4","1768:39-1768:48|-1|1|4","1772:39-1772:48|-1|1|4","1774:42-1774:51|-1|1|4","1889:53-1889:62|-1|1|4","1891:53-1891:62|-1|1|4","1892:52-1892:61|-1|1|4","1893:54-1893:63|-1|1|4","1894:53-1894:62|-1|1|4","1895:53-1895:62|-1|1|4"]},{"id":13,"usr":12275716503999853827,"detailed_name":"gz_header_s","short_name_offset":0,"short_name_size":11,"kind":23,"hover":"","comments":"\n   gzip header information passed to and from zlib routines.  See RFC 1952\nfor more details on the meanings of these fields.","declarations":[],"spell":"114:16-114:27|-1|1|2","extent":"114:9-129:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[14,15,16,17,18,19,20,21,22,23,24,25,26],"instances":[],"uses":[]},{"id":14,"usr":9544282583895077579,"detailed_name":"gz_header","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"","comments":"","declarations":[],"spell":"129:3-129:12|-1|1|2","extent":"114:1-129:12|-1|1|0","alias_of":13,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["129:3-129:12|-1|1|4","131:9-131:18|-1|1|4"]},{"id":15,"usr":7382214188082513424,"detailed_name":"gz_headerp","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef gz_header FAR *gz_headerp","comments":"","declarations":[],"spell":"131:24-131:34|-1|1|2","extent":"131:1-131:34|-1|1|0","alias_of":14,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["131:24-131:34|-1|1|4","808:42-808:52|-1|1|4","1031:42-1031:52|-1|1|4"]},{"id":16,"usr":5903504467479433546,"detailed_name":"in_func","short_name_offset":0,"short_name_size":7,"kind":252,"hover":"typedef unsigned (*in_func) OF((void FAR *,\n                                z_const unsigned char FAR * FAR *)","comments":"\nZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,\n                                      unsigned char FAR *window));\n\n   Initialize the internal stream state for decompression using inflateBack()\n calls.  The fields zalloc, zfree and opaque in strm must be initialized\n before the call.  If zalloc and zfree are Z_NULL, then the default library-\n derived memory allocation routines are used.  windowBits is the base two\n logarithm of the window size, in the range 8..15.  window is a caller\n supplied buffer of that size.  Except for special applications where it is\n assured that deflate was used with small window sizes, windowBits must be 15\n and a 32K byte window must be supplied to be able to decompress general\n deflate streams.\n\n   See inflateBack() for the usage of these routines.\n\n   inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of\n the parameters are invalid, Z_MEM_ERROR if the internal state could not be\n allocated, or Z_VERSION_ERROR if the version of the library does not match\n the version of the header file.","declarations":[],"spell":"1092:20-1092:27|-1|1|2","extent":"1092:1-1093:67|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1092:20-1092:27|-1|1|4","1097:37-1097:44|-1|1|4"]},{"id":17,"usr":402079099907669178,"detailed_name":"out_func","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned)","comments":"","declarations":[],"spell":"1094:15-1094:23|-1|1|2","extent":"1094:1-1094:71|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1094:15-1094:23|-1|1|4","1098:37-1098:45|-1|1|4"]},{"id":18,"usr":15095357444125494999,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1227:49-1227:55|-1|1|4","1242:50-1242:56|-1|1|4","1265:51-1265:57|-1|1|4","1283:52-1283:58|-1|1|4"]},{"id":19,"usr":12895281003287589633,"detailed_name":"gzFile_s","short_name_offset":0,"short_name_size":8,"kind":23,"hover":"","comments":"gzgetc() macro and its supporting function and exposed data structure.  Note\nthat the real internal state is much larger than the exposed structure.\nThis abbreviated structure exposes just enough for the gzgetc() macro.  The\nuser should not mess with these exposed elements, since their names or\nbehavior could change in the future, perhaps even capriciously.  They can\nonly be used by the gzgetc() macro.  You have been warned.","declarations":[],"spell":"1817:8-1817:16|-1|1|2","extent":"1817:1-1821:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[27,28,29],"instances":[],"uses":["1300:16-1300:24|-1|1|4"]},{"id":20,"usr":3914855993928005767,"detailed_name":"gzFile","short_name_offset":0,"short_name_size":6,"kind":252,"hover":"typedef struct gzFile_s *gzFile","comments":"\n   This library supports reading and writing files in gzip (.gz) format with\n an interface similar to that of stdio, using the functions that start with\n \"gz\".  The gzip format is different from the zlib format.  gzip is a gzip\n wrapper, documented in RFC 1952, wrapped around a deflate stream.","declarations":[],"spell":"1300:26-1300:32|-1|1|2","extent":"1300:1-1300:32|-1|1|0","alias_of":19,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1300:26-1300:32|-1|1|4","1340:9-1340:15|-1|1|4","1363:34-1363:40|-1|1|4","1379:37-1379:43|-1|1|4","1390:32-1390:38|-1|1|4","1421:38-1421:44|-1|1|4","1446:33-1446:39|-1|1|4","1455:56-1455:62|-1|1|4","1468:39-1468:45|-1|1|4","1483:32-1483:38|-1|1|4","1491:35-1491:41|-1|1|4","1504:32-1504:38|-1|1|4","1510:32-1510:38|-1|1|4","1519:41-1519:47|-1|1|4","1531:33-1531:39|-1|1|4","1566:37-1566:43|-1|1|4","1594:31-1594:37|-1|1|4","1609:34-1609:40|-1|1|4","1630:36-1630:42|-1|1|4","1643:35-1643:41|-1|1|4","1644:35-1644:41|-1|1|4","1655:42-1655:48|-1|1|4","1671:37-1671:43|-1|1|4","1822:33-1822:39|-1|1|4","1872:12-1872:18|-1|1|4","1873:39-1873:45|-1|1|4","1874:39-1874:45|-1|1|4","1875:41-1875:47|-1|1|4","1902:51-1902:57|-1|1|4"]},{"id":21,"usr":16863200815010501076,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1390:45-1390:50|-1|1|4","1420:38-1420:43|-1|1|4"]},{"id":22,"usr":18021161669265362581,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1420:9-1420:17|-1|1|4","1420:49-1420:57|-1|1|4","1420:64-1420:72|-1|1|4","1454:9-1454:17|-1|1|4","1454:51-1454:59|-1|1|4","1455:39-1455:47|-1|1|4","1708:37-1708:45|-1|1|4","1743:35-1743:43|-1|1|4"]},{"id":23,"usr":16558823581791570623,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1447:33-1447:39|-1|1|4","1454:39-1454:45|-1|1|4"]},{"id":24,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[27],"uses":[]},{"id":25,"usr":5,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[28],"uses":[]},{"id":26,"usr":6251853307624362161,"detailed_name":"off_t","short_name_offset":0,"short_name_size":5,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[29],"uses":["1820:5-1820:14|-1|1|4","1873:12-1873:19|-1|1|4","1873:47-1873:54|-1|1|4","1874:12-1874:19|-1|1|4","1875:12-1875:19|-1|1|4","1876:60-1876:67|-1|1|4","1877:58-1877:65|-1|1|4"]},{"id":27,"usr":1455199509755451390,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1890:15-1890:22|-1|1|4"]},{"id":28,"usr":6839408168893055231,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1904:51-1904:58|-1|1|4"]}],"funcs":[{"id":0,"usr":1936817187010506293,"detailed_name":"extern const char *zlibVersion()","short_name_offset":19,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"basic functions","declarations":[{"spell":"220:30-220:41|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":1640449735814478764,"detailed_name":"extern int deflate(z_streamp strm, int flush)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));\n\n   Initializes the internal stream state for compression.  The fields\n zalloc, zfree and opaque must be initialized before by the caller.  If\n zalloc and zfree are set to Z_NULL, deflateInit updates them to use default\n allocation functions.\n\n   The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:\n 1 gives best speed, 9 gives best compression, 0 gives no compression at all\n (the input data is simply copied a block at a time).  Z_DEFAULT_COMPRESSION\n requests a default compromise between speed and compression (currently\n equivalent to level 6).\n\n   deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough\n memory, Z_STREAM_ERROR if level is not a valid compression level, or\n Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible\n with the version assumed by the caller (ZLIB_VERSION).  msg is set to null\n if there is no error message.  deflateInit does not perform any compression:\n this will be done by deflate().","declarations":[{"spell":"250:21-250:28|-1|1|1","param_spellings":["250:43-250:47","250:53-250:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":8164615646476650932,"detailed_name":"extern int deflateEnd(z_streamp strm)","short_name_offset":11,"short_name_size":10,"kind":12,"storage":2,"hover":"","comments":"\n  deflate compresses as much data as possible, and stops when the input\nbuffer becomes empty or the output buffer becomes full.  It may introduce\nsome output latency (reading input without producing any output) except when\nforced to flush.\n\n  The detailed semantics are as follows.  deflate performs one or both of the\nfollowing actions:\n\n- Compress more input starting at next_in and update next_in and avail_in\n  accordingly.  If not all input can be processed (because there is not\n  enough room in the output buffer), next_in and avail_in are updated and\n  processing will resume at this point for the next call of deflate().\n\n- Generate more output starting at next_out and update next_out and avail_out\n  accordingly.  This action is forced if the parameter flush is non zero.\n  Forcing flush frequently degrades the compression ratio, so this parameter\n  should be set only when necessary.  Some output may be provided even if\n  flush is zero.\n\n  Before the call of deflate(), the application should ensure that at least\none of the actions is possible, by providing more input and/or consuming more\noutput, and updating avail_in or avail_out accordingly; avail_out should\nnever be zero before the call.  The application can consume the compressed\noutput when it wants, for example when the output buffer is full (avail_out\n== 0), or after each call of deflate().  If deflate returns Z_OK and with\nzero avail_out, it must be called again after making room in the output\nbuffer because there might be more output pending. See deflatePending(),\nwhich can be used if desired to determine whether or not there is more ouput\nin that case.\n\n  Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to\ndecide how much data to accumulate before producing output, in order to\nmaximize compression.\n\n  If the parameter flush is set to Z_SYNC_FLUSH, all pending output is\nflushed to the output buffer and the output is aligned on a byte boundary, so\nthat the decompressor can get all input data available so far.  (In\nparticular avail_in is zero after the call if enough output space has been\nprovided before the call.) Flushing may degrade compression for some\ncompression algorithms and so it should be used only when necessary.  This\ncompletes the current deflate block and follows it with an empty stored block\nthat is three bits plus filler bits to the next byte, followed by four bytes\n(00 00 ff ff).\n\n  If flush is set to Z_PARTIAL_FLUSH, all pending output is flushed to the\noutput buffer, but the output is not aligned to a byte boundary.  All of the\ninput data so far will be available to the decompressor, as for Z_SYNC_FLUSH.\nThis completes the current deflate block and follows it with an empty fixed\ncodes block that is 10 bits long.  This assures that enough bytes are output\nin order for the decompressor to finish the block before the empty fixed\ncodes block.\n\n  If flush is set to Z_BLOCK, a deflate block is completed and emitted, as\nfor Z_SYNC_FLUSH, but the output is not aligned on a byte boundary, and up to\nseven bits of the current block are held to be written as the next byte after\nthe next deflate block is completed.  In this case, the decompressor may not\nbe provided enough bits at this point in order to complete decompression of\nthe data provided so far to the compressor.  It may need to wait for the next\nblock to be emitted.  This is for advanced applications that need to control\nthe emission of deflate blocks.\n\n  If flush is set to Z_FULL_FLUSH, all output is flushed as with\nZ_SYNC_FLUSH, and the compression state is reset so that decompression can\nrestart from this point if previous compressed data has been damaged or if\nrandom access is desired.  Using Z_FULL_FLUSH too often can seriously degrade\ncompression.\n\n  If deflate returns with avail_out == 0, this function must be called again\nwith the same value of the flush parameter and more output space (updated\navail_out), until the flush is complete (deflate returns with non-zero\navail_out).  In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that\navail_out is greater than six to avoid repeated flush markers due to\navail_out == 0 on return.\n\n  If the parameter flush is set to Z_FINISH, pending input is processed,\npending output is flushed and deflate returns with Z_STREAM_END if there was\nenough output space.  If deflate returns with Z_OK or Z_BUF_ERROR, this\nfunction must be called again with Z_FINISH and more output space (updated\navail_out) but no more input data, until it returns with Z_STREAM_END or an\nerror.  After deflate has returned Z_STREAM_END, the only possible operations\non the stream are deflateReset or deflateEnd.\n\n  Z_FINISH can be used in the first deflate call after deflateInit if all the\ncompression is to be done in a single step.  In order to complete in one\ncall, avail_out must be at least the value returned by deflateBound (see\nbelow).  Then deflate is guaranteed to return Z_STREAM_END.  If not enough\noutput space is provided, deflate will not return Z_STREAM_END, and it must\nbe called again as described above.\n\n  deflate() sets strm->adler to the Adler-32 checksum of all input read\nso far (that is, total_in bytes).  If a gzip stream is being generated, then\nstrm->adler will be the CRC-32 checksum of the input read so far.  (See\ndeflateInit2 below.)\n\n  deflate() may update strm->data_type if it can make a good guess about\nthe input data type (Z_BINARY or Z_TEXT).  If in doubt, the data is\nconsidered binary.  This field is only for information purposes and does not\naffect the compression algorithm in any manner.\n\n  deflate() returns Z_OK if some progress has been made (more input\nprocessed or more output produced), Z_STREAM_END if all input has been\nconsumed and all output has been produced (only when flush is set to\nZ_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example\nif next_in or next_out was Z_NULL or the state was inadvertently written over\nby the application), or Z_BUF_ERROR if no progress is possible (for example\navail_in or avail_out was zero).  Note that Z_BUF_ERROR is not fatal, and\ndeflate() can be called again with more input and more output space to\ncontinue compressing.","declarations":[{"spell":"363:21-363:31|-1|1|1","param_spellings":["363:46-363:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":5821412312319530216,"detailed_name":"extern int inflate(z_streamp strm, int flush)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));\n\n   Initializes the internal stream state for decompression.  The fields\n next_in, avail_in, zalloc, zfree and opaque must be initialized before by\n the caller.  In the current version of inflate, the provided input is not\n read or consumed.  The allocation of a sliding window will be deferred to\n the first call of inflate (if the decompression does not complete on the\n first call).  If zalloc and zfree are set to Z_NULL, inflateInit updates\n them to use default allocation functions.\n\n   inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough\n memory, Z_VERSION_ERROR if the zlib library version is incompatible with the\n version assumed by the caller, or Z_STREAM_ERROR if the parameters are\n invalid, such as a null pointer to the structure.  msg is set to null if\n there is no error message.  inflateInit does not perform any decompression.\n Actual decompression will be done by inflate().  So next_in, and avail_in,\n next_out, and avail_out are unused and unchanged.  The current\n implementation of inflateInit() does not process any header information --\n that is deferred until inflate() is called.","declarations":[{"spell":"400:21-400:28|-1|1|1","param_spellings":["400:43-400:47","400:53-400:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":3702486739017971830,"detailed_name":"extern int inflateEnd(z_streamp strm)","short_name_offset":11,"short_name_size":10,"kind":12,"storage":2,"hover":"","comments":"\n  inflate decompresses as much data as possible, and stops when the input\nbuffer becomes empty or the output buffer becomes full.  It may introduce\nsome output latency (reading input without producing any output) except when\nforced to flush.\n\nThe detailed semantics are as follows.  inflate performs one or both of the\nfollowing actions:\n\n- Decompress more input starting at next_in and update next_in and avail_in\n  accordingly.  If not all input can be processed (because there is not\n  enough room in the output buffer), then next_in and avail_in are updated\n  accordingly, and processing will resume at this point for the next call of\n  inflate().\n\n- Generate more output starting at next_out and update next_out and avail_out\n  accordingly.  inflate() provides as much output as possible, until there is\n  no more input data or no more space in the output buffer (see below about\n  the flush parameter).\n\n  Before the call of inflate(), the application should ensure that at least\none of the actions is possible, by providing more input and/or consuming more\noutput, and updating the next_* and avail_* values accordingly.  If the\ncaller of inflate() does not provide both available input and available\noutput space, it is possible that there will be no progress made.  The\napplication can consume the uncompressed output when it wants, for example\nwhen the output buffer is full (avail_out == 0), or after each call of\ninflate().  If inflate returns Z_OK and with zero avail_out, it must be\ncalled again after making room in the output buffer because there might be\nmore output pending.\n\n  The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH, Z_FINISH,\nZ_BLOCK, or Z_TREES.  Z_SYNC_FLUSH requests that inflate() flush as much\noutput as possible to the output buffer.  Z_BLOCK requests that inflate()\nstop if and when it gets to the next deflate block boundary.  When decoding\nthe zlib or gzip format, this will cause inflate() to return immediately\nafter the header and before the first block.  When doing a raw inflate,\ninflate() will go ahead and process the first block, and will return when it\ngets to the end of that block, or when it runs out of data.\n\n  The Z_BLOCK option assists in appending to or combining deflate streams.\nTo assist in this, on return inflate() always sets strm->data_type to the\nnumber of unused bits in the last byte taken from strm->next_in, plus 64 if\ninflate() is currently decoding the last block in the deflate stream, plus\n128 if inflate() returned immediately after decoding an end-of-block code or\ndecoding the complete header up to just before the first byte of the deflate\nstream.  The end-of-block will not be indicated until all of the uncompressed\ndata from that block has been written to strm->next_out.  The number of\nunused bits may in general be greater than seven, except when bit 7 of\ndata_type is set, in which case the number of unused bits will be less than\neight.  data_type is set as noted here every time inflate() returns for all\nflush options, and so can be used to determine the amount of currently\nconsumed input in bits.\n\n  The Z_TREES option behaves as Z_BLOCK does, but it also returns when the\nend of each deflate block header is reached, before any actual data in that\nblock is decoded.  This allows the caller to determine the length of the\ndeflate block header for later use in random access within a deflate block.\n256 is added to the value of strm->data_type when inflate() returns\nimmediately after reaching the end of the deflate block header.\n\n  inflate() should normally be called until it returns Z_STREAM_END or an\nerror.  However if all decompression is to be performed in a single step (a\nsingle call of inflate), the parameter flush should be set to Z_FINISH.  In\nthis case all pending input is processed and all pending output is flushed;\navail_out must be large enough to hold all of the uncompressed data for the\noperation to complete.  (The size of the uncompressed data may have been\nsaved by the compressor for this purpose.)  The use of Z_FINISH is not\nrequired to perform an inflation in one step.  However it may be used to\ninform inflate that a faster approach can be used for the single inflate()\ncall.  Z_FINISH also informs inflate to not maintain a sliding window if the\nstream completes, which reduces inflate's memory footprint.  If the stream\ndoes not complete, either because not all of the stream is provided or not\nenough output space is provided, then a sliding window will be allocated and\ninflate() can be called again to continue the operation as if Z_NO_FLUSH had\nbeen used.\n\n   In this implementation, inflate() always flushes as much output as\npossible to the output buffer, and always uses the faster approach on the\nfirst call.  So the effects of the flush parameter in this implementation are\non the return value of inflate() as noted below, when inflate() returns early\nwhen Z_BLOCK or Z_TREES is used, and when inflate() avoids the allocation of\nmemory for a sliding window when Z_FINISH is used.\n\n   If a preset dictionary is needed after this call (see inflateSetDictionary\nbelow), inflate sets strm->adler to the Adler-32 checksum of the dictionary\nchosen by the compressor and returns Z_NEED_DICT; otherwise it sets\nstrm->adler to the Adler-32 checksum of all output produced so far (that is,\ntotal_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described\nbelow.  At the end of the stream, inflate() checks that its computed Adler-32\nchecksum is equal to that saved by the compressor and returns Z_STREAM_END\nonly if the checksum is correct.\n\n  inflate() can decompress and check either zlib-wrapped or gzip-wrapped\ndeflate data.  The header type is detected automatically, if requested when\ninitializing with inflateInit2().  Any information contained in the gzip\nheader is not retained unless inflateGetHeader() is used.  When processing\ngzip-wrapped deflate data, strm->adler32 is set to the CRC-32 of the output\nproduced so far.  The CRC-32 is checked against the gzip trailer, as is the\nuncompressed length, modulo 2^32.\n\n  inflate() returns Z_OK if some progress has been made (more input processed\nor more output produced), Z_STREAM_END if the end of the compressed data has\nbeen reached and all uncompressed output has been produced, Z_NEED_DICT if a\npreset dictionary is needed at this point, Z_DATA_ERROR if the input data was\ncorrupted (input stream not conforming to the zlib format or incorrect check\nvalue, in which case strm->msg points to a string with a more specific\nerror), Z_STREAM_ERROR if the stream structure was inconsistent (for example\nnext_in or next_out was Z_NULL, or the state was inadvertently written over\nby the application), Z_MEM_ERROR if there was not enough memory, Z_BUF_ERROR\nif no progress was possible or if there was not enough room in the output\nbuffer when Z_FINISH is used.  Note that Z_BUF_ERROR is not fatal, and\ninflate() can be called again with more input and more output space to\ncontinue decompressing.  If Z_DATA_ERROR is returned, the application may\nthen call inflateSync() to look for a good compression block if a partial\nrecovery of the data is to be attempted.","declarations":[{"spell":"520:21-520:31|-1|1|1","param_spellings":["520:46-520:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":2645368210491351280,"detailed_name":"extern int deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)","short_name_offset":11,"short_name_size":20,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,\n                                   int  level,\n                                   int  method,\n                                   int  windowBits,\n                                   int  memLevel,\n                                   int  strategy));\n\n   This is another version of deflateInit with more compression options.  The\n fields next_in, zalloc, zfree and opaque must be initialized before by the\n caller.\n\n   The method parameter is the compression method.  It must be Z_DEFLATED in\n this version of the library.\n\n   The windowBits parameter is the base two logarithm of the window size\n (the size of the history buffer).  It should be in the range 8..15 for this\n version of the library.  Larger values of this parameter result in better\n compression at the expense of memory usage.  The default value is 15 if\n deflateInit is used instead.\n\n   For the current implementation of deflate(), a windowBits value of 8 (a\n window size of 256 bytes) is not supported.  As a result, a request for 8\n will result in 9 (a 512-byte window).  In that case, providing 8 to\n inflateInit2() will result in an error when the zlib header with 9 is\n checked against the initialization of inflate().  The remedy is to not use 8\n with deflateInit2() with this initialization, or at least in that case use 9\n with inflateInit2().\n\n   windowBits can also be -8..-15 for raw deflate.  In this case, -windowBits\n determines the window size.  deflate() will then generate raw deflate data\n with no zlib header or trailer, and will not compute a check value.\n\n   windowBits can also be greater than 15 for optional gzip encoding.  Add\n 16 to windowBits to write a simple gzip header and trailer around the\n compressed data instead of a zlib wrapper.  The gzip header will have no\n file name, no extra data, no comment, no modification time (set to zero), no\n header crc, and the operating system will be set to the appropriate value,\n if the operating system was determined at compile time.  If a gzip stream is\n being written, strm->adler is a CRC-32 instead of an Adler-32.\n\n   For raw deflate or gzip encoding, a request for a 256-byte window is\n rejected as invalid, since only the zlib header provides a means of\n transmitting the window size to the decompressor.\n\n   The memLevel parameter specifies how much memory should be allocated\n for the internal compression state.  memLevel=1 uses minimum memory but is\n slow and reduces compression ratio; memLevel=9 uses maximum memory for\n optimal speed.  The default value is 8.  See zconf.h for total memory usage\n as a function of windowBits and memLevel.\n\n   The strategy parameter is used to tune the compression algorithm.  Use the\n value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a\n filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no\n string match), or Z_RLE to limit match distances to one (run-length\n encoding).  Filtered data consists mostly of small values with a somewhat\n random distribution.  In this case, the compression algorithm is tuned to\n compress them better.  The effect of Z_FILTERED is to force more Huffman\n coding and less string matching; it is somewhat intermediate between\n Z_DEFAULT_STRATEGY and Z_HUFFMAN_ONLY.  Z_RLE is designed to be almost as\n fast as Z_HUFFMAN_ONLY, but give better compression for PNG image data.  The\n strategy parameter only affects the compression ratio but not the\n correctness of the compressed output even if it is not set appropriately.\n Z_FIXED prevents the use of dynamic Huffman codes, allowing for a simpler\n decoder for special applications.\n\n   deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough\n memory, Z_STREAM_ERROR if any parameter is invalid (such as an invalid\n method), or Z_VERSION_ERROR if the zlib library version (zlib_version) is\n incompatible with the version assumed by the caller (ZLIB_VERSION).  msg is\n set to null if there is no error message.  deflateInit2 does not perform any\n compression: this will be done by deflate().","declarations":[{"spell":"611:21-611:41|-1|1|1","param_spellings":["611:56-611:60","612:59-612:69","613:52-613:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":10720318238147489213,"detailed_name":"extern int deflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)","short_name_offset":11,"short_name_size":20,"kind":12,"storage":2,"hover":"","comments":"\n   Initializes the compression dictionary from the given byte sequence\n without producing any compressed output.  When using the zlib format, this\n function must be called immediately after deflateInit, deflateInit2 or\n deflateReset, and before any call of deflate.  When doing raw deflate, this\n function must be called either before any call of deflate, or immediately\n after the completion of a deflate block, i.e. after all input has been\n consumed and all output has been delivered when using any of the flush\n options Z_BLOCK, Z_PARTIAL_FLUSH, Z_SYNC_FLUSH, or Z_FULL_FLUSH.  The\n compressor and decompressor must use exactly the same dictionary (see\n inflateSetDictionary).\n\n   The dictionary should consist of strings (byte sequences) that are likely\n to be encountered later in the data to be compressed, with the most commonly\n used strings preferably put towards the end of the dictionary.  Using a\n dictionary is most useful when the data to be compressed is short and can be\n predicted with good accuracy; the data can then be compressed better than\n with the default empty dictionary.\n\n   Depending on the size of the compression data structures selected by\n deflateInit or deflateInit2, a part of the dictionary may in effect be\n discarded, for example if the dictionary is larger than the window size\n provided in deflateInit or deflateInit2.  Thus the strings most likely to be\n useful should be put at the end of the dictionary, not at the front.  In\n addition, the current implementation of deflate will use at most the window\n size minus 262 bytes of the provided dictionary.\n\n   Upon return of this function, strm->adler is set to the Adler-32 value\n of the dictionary; the decompressor may later use this value to determine\n which dictionary has been used by the compressor.  (The Adler-32 value\n applies to the whole dictionary even if only a subset of the dictionary is\n actually used by the compressor.) If a raw deflate was requested, then the\n Adler-32 value is not computed and strm->adler is not set.\n\n   deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a\n parameter is invalid (e.g.  dictionary being Z_NULL) or the stream state is\n inconsistent (for example if deflate has already been called for this stream\n or if not at a block boundary for raw deflate).  deflateSetDictionary does\n not perform any compression: this will be done by deflate().","declarations":[{"spell":"655:21-655:41|-1|1|1","param_spellings":["655:56-655:60","656:53-656:63","657:53-657:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":13248769952487002307,"detailed_name":"extern int deflateCopy(z_streamp dest, z_streamp source)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Returns the sliding dictionary being maintained by deflate.  dictLength is\n set to the number of bytes in the dictionary, and that many bytes are copied\n to dictionary.  dictionary must have enough space, where 32768 bytes is\n always enough.  If deflateGetDictionary() is called with dictionary equal to\n Z_NULL, then only the dictionary length is returned, and nothing is copied.\n Similary, if dictLength is Z_NULL, then it is not set.\n\n   deflateGetDictionary() may return a length less than the window size, even\n when more than the window size in input has been provided. It may return up\n to 258 bytes less in that case, due to how zlib's implementation of deflate\n manages the sliding window and lookahead for matches, where matches can be\n up to 258 bytes long. If the application needs the last window-size bytes of\n input, then that would need to be saved by the application outside of zlib.\n\n   deflateGetDictionary returns Z_OK on success, or Z_STREAM_ERROR if the\n stream state is inconsistent.","declarations":[{"spell":"677:21-677:32|-1|1|1","param_spellings":["677:47-677:51","678:47-678:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":7838681046439870065,"detailed_name":"extern int deflateReset(z_streamp strm)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"\n   Sets the destination stream as a complete copy of the source stream.\n\n   This function can be useful when several compression strategies will be\n tried, for example when there are several ways of pre-processing the input\n data with a filter.  The streams that will be discarded should then be freed\n by calling deflateEnd.  Note that deflateCopy duplicates the internal\n compression state which can be quite large, so this strategy is slow and can\n consume lots of memory.\n\n   deflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not\n enough memory, Z_STREAM_ERROR if the source stream state was inconsistent\n (such as zalloc being Z_NULL).  msg is left unchanged in both source and\n destination.","declarations":[{"spell":"695:21-695:33|-1|1|1","param_spellings":["695:48-695:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":15630239695927351095,"detailed_name":"extern int deflateParams(z_streamp strm, int level, int strategy)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"\n   This function is equivalent to deflateEnd followed by deflateInit, but\n does not free and reallocate the internal compression state.  The stream\n will leave the compression level and any other attributes that may have been\n set unchanged.\n\n   deflateReset returns Z_OK if success, or Z_STREAM_ERROR if the source\n stream state was inconsistent (such as zalloc or state being Z_NULL).","declarations":[{"spell":"706:21-706:34|-1|1|1","param_spellings":["706:49-706:53","707:43-707:48","708:43-708:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":16441640639087511804,"detailed_name":"extern int deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Dynamically update the compression level and compression strategy.  The\n interpretation of level and strategy is as in deflateInit2().  This can be\n used to switch between compression and straight copy of the input data, or\n to switch to a different kind of input data requiring a different strategy.\n If the compression approach (which is a function of the level) or the\n strategy is changed, and if any input has been consumed in a previous\n deflate() call, then the input available so far is compressed with the old\n level and strategy using deflate(strm, Z_BLOCK).  There are three approaches\n for the compression levels 0, 1..3, and 4..9 respectively.  The new level\n and strategy will take effect at the next call of deflate().\n\n   If a deflate(strm, Z_BLOCK) is performed by deflateParams(), and it does\n not have enough output space to complete, then the parameter change will not\n take effect.  In this case, deflateParams() can be called again with the\n same parameters and more output space to try again.\n\n   In order to assure a change in the parameters on the first try, the\n deflate stream should be flushed using deflate() with Z_BLOCK or other flush\n request until strm.avail_out is not zero, before calling deflateParams().\n Then no more input data should be provided before the deflateParams() call.\n If this is done, the old level and strategy will be applied to the data\n compressed before deflateParams(), and the new level and strategy will be\n applied to the the data compressed after deflateParams().\n\n   deflateParams returns Z_OK on success, Z_STREAM_ERROR if the source stream\n state was inconsistent or if a parameter was invalid, or Z_BUF_ERROR if\n there was not enough output space to complete the compression of the\n available input data before a change in the strategy or approach.  Note that\n in the case of a Z_BUF_ERROR, the parameters are not changed.  A return\n value of Z_BUF_ERROR is not fatal, in which case deflateParams() can be\n retried with more output space.","declarations":[{"spell":"743:21-743:32|-1|1|1","param_spellings":["743:47-743:51","744:41-744:52","745:41-745:49","746:41-746:52","747:41-747:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":3381156246591448839,"detailed_name":"extern uLong deflateBound(z_streamp strm, uLong sourceLen)","short_name_offset":13,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"\n   Fine tune deflate's internal compression parameters.  This should only be\n used by someone who understands the algorithm used by zlib's deflate for\n searching for the best matching string, and even then only by the most\n fanatic optimizer trying to squeeze out the last compressed bit for their\n specific input data.  Read the deflate.c source code for the meaning of the\n max_lazy, good_length, nice_length, and max_chain parameters.\n\n   deflateTune() can be called after deflateInit() or deflateInit2(), and\n returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.","declarations":[{"spell":"760:23-760:35|-1|1|1","param_spellings":["760:50-760:54","761:46-761:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":15556906274431596391,"detailed_name":"extern int deflatePending(z_streamp strm, unsigned int *pending, int *bits)","short_name_offset":11,"short_name_size":14,"kind":12,"storage":2,"hover":"","comments":"\n   deflateBound() returns an upper bound on the compressed size after\n deflation of sourceLen bytes.  It must be called after deflateInit() or\n deflateInit2(), and after deflateSetHeader(), if used.  This would be used\n to allocate an output buffer for deflation in a single pass, and so would be\n called before deflate().  If that first deflate() call is provided the\n sourceLen input bytes, an output buffer allocated to the size returned by\n deflateBound(), and the flush value Z_FINISH, then deflate() is guaranteed\n to return Z_STREAM_END.  Note that it is possible for the compressed size to\n be larger than the value returned by deflateBound() if flush options other\n than Z_FINISH or Z_NO_FLUSH are used.","declarations":[{"spell":"775:21-775:35|-1|1|1","param_spellings":["775:50-775:54","776:50-776:57","777:45-777:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":14699197386511627949,"detailed_name":"extern int deflatePrime(z_streamp strm, int bits, int value)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"\n   deflatePending() returns the number of bytes and bits of output that have\n been generated, but not yet provided in the available output.  The bytes not\n provided would be due to the available output space having being consumed.\n The number of bits of output not provided are between 0 and 7, where they\n await more bits to join them in order to fill out a full byte.  If pending\n or bits are Z_NULL, then those values are not set.\n\n   deflatePending returns Z_OK if success, or Z_STREAM_ERROR if the source\n stream state was inconsistent.","declarations":[{"spell":"790:21-790:33|-1|1|1","param_spellings":["790:48-790:52","791:42-791:46","792:42-792:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":7971741151907587625,"detailed_name":"extern int deflateSetHeader(z_streamp strm, gz_headerp head)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"\n   deflatePrime() inserts bits in the deflate output stream.  The intent\n is that this function is used to start off the deflate output with the bits\n leftover from a previous deflate stream when appending to it.  As such, this\n function can only be used for raw deflate, and must be used before the first\n deflate() call after a deflateInit2() or deflateReset().  bits must be less\n than or equal to 16, and that many of the least significant bits of value\n will be inserted in the output.\n\n   deflatePrime returns Z_OK if success, Z_BUF_ERROR if there was not enough\n room in the internal buffer to insert the bits, or Z_STREAM_ERROR if the\n source stream state was inconsistent.","declarations":[{"spell":"807:21-807:37|-1|1|1","param_spellings":["807:52-807:56","808:53-808:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":10471582737869046517,"detailed_name":"extern int inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)","short_name_offset":11,"short_name_size":20,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,\n                                   int  windowBits));\n\n   This is another version of inflateInit with an extra parameter.  The\n fields next_in, avail_in, zalloc, zfree and opaque must be initialized\n before by the caller.\n\n   The windowBits parameter is the base two logarithm of the maximum window\n size (the size of the history buffer).  It should be in the range 8..15 for\n this version of the library.  The default value is 15 if inflateInit is used\n instead.  windowBits must be greater than or equal to the windowBits value\n provided to deflateInit2() while compressing, or it must be equal to 15 if\n deflateInit2() was not used.  If a compressed stream with a larger window\n size is given as input, inflate() will return with the error code\n Z_DATA_ERROR instead of trying to allocate a larger window.\n\n   windowBits can also be zero to request that inflate use the window size in\n the zlib header of the compressed stream.\n\n   windowBits can also be -8..-15 for raw inflate.  In this case, -windowBits\n determines the window size.  inflate() will then process raw deflate data,\n not looking for a zlib or gzip header, not generating a check value, and not\n looking for any check values for comparison at the end of the stream.  This\n is for use with other formats that use the deflate compressed data format\n such as zip.  Those formats provide their own check values.  If a custom\n format is developed using the raw deflate format for compressed data, it is\n recommended that a check value such as an Adler-32 or a CRC-32 be applied to\n the uncompressed data as is done in the zlib, gzip, and zip formats.  For\n most applications, the zlib format should be used as is.  Note that comments\n above on the use in deflateInit2() applies to the magnitude of windowBits.\n\n   windowBits can also be greater than 15 for optional gzip decoding.  Add\n 32 to windowBits to enable zlib and gzip decoding with automatic header\n detection, or add 16 to decode only the gzip format (the zlib format will\n return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm->adler is a\n CRC-32 instead of an Adler-32.  Unlike the gunzip utility and gzread() (see\n below), inflate() will not automatically decode concatenated gzip streams.\n inflate() will return Z_STREAM_END at the end of the gzip stream.  The state\n would need to be reset to continue decoding a subsequent gzip stream.\n\n   inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough\n memory, Z_VERSION_ERROR if the zlib library version is incompatible with the\n version assumed by the caller, or Z_STREAM_ERROR if the parameters are\n invalid, such as a null pointer to the structure.  msg is set to null if\n there is no error message.  inflateInit2 does not perform any decompression\n apart from possibly reading the zlib header if present: actual decompression\n will be done by inflate().  (So next_in and avail_in may be modified, but\n next_out and avail_out are unused and unchanged.) The current implementation\n of inflateInit2() does not process any header information -- that is\n deferred until inflate() is called.","declarations":[{"spell":"884:21-884:41|-1|1|1","param_spellings":["884:56-884:60","885:59-885:69","886:52-886:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":16468826308357575382,"detailed_name":"extern int inflateGetDictionary(z_streamp strm, Bytef *dictionary, uInt *dictLength)","short_name_offset":11,"short_name_size":20,"kind":12,"storage":2,"hover":"","comments":"\n   Initializes the decompression dictionary from the given uncompressed byte\n sequence.  This function must be called immediately after a call of inflate,\n if that call returned Z_NEED_DICT.  The dictionary chosen by the compressor\n can be determined from the Adler-32 value returned by that call of inflate.\n The compressor and decompressor must use exactly the same dictionary (see\n deflateSetDictionary).  For raw inflate, this function can be called at any\n time to set the dictionary.  If the provided dictionary is smaller than the\n window and there is already data in the window, then the provided dictionary\n will amend what's there.  The application must insure that the dictionary\n that was used for compression is provided.\n\n   inflateSetDictionary returns Z_OK if success, Z_STREAM_ERROR if a\n parameter is invalid (e.g.  dictionary being Z_NULL) or the stream state is\n inconsistent, Z_DATA_ERROR if the given dictionary doesn't match the\n expected one (incorrect Adler-32 value).  inflateSetDictionary does not\n perform any decompression: this will be done by subsequent calls of\n inflate().","declarations":[{"spell":"907:21-907:41|-1|1|1","param_spellings":["907:56-907:60","908:53-908:63","909:53-909:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":18066815785461489734,"detailed_name":"extern int inflateSync(z_streamp strm)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Returns the sliding dictionary being maintained by inflate.  dictLength is\n set to the number of bytes in the dictionary, and that many bytes are copied\n to dictionary.  dictionary must have enough space, where 32768 bytes is\n always enough.  If inflateGetDictionary() is called with dictionary equal to\n Z_NULL, then only the dictionary length is returned, and nothing is copied.\n Similary, if dictLength is Z_NULL, then it is not set.\n\n   inflateGetDictionary returns Z_OK on success, or Z_STREAM_ERROR if the\n stream state is inconsistent.","declarations":[{"spell":"922:21-922:32|-1|1|1","param_spellings":["922:47-922:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":3188215239875469599,"detailed_name":"extern int inflateCopy(z_streamp dest, z_streamp source)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Skips invalid compressed data until a possible full flush point (see above\n for the description of deflate with Z_FULL_FLUSH) can be found, or until all\n available input is skipped.  No output is provided.\n\n   inflateSync searches for a 00 00 FF FF pattern in the compressed data.\n All full flush points have this pattern, but not all occurrences of this\n pattern are full flush points.\n\n   inflateSync returns Z_OK if a possible full flush point has been found,\n Z_BUF_ERROR if no more input was provided, Z_DATA_ERROR if no flush point\n has been found, or Z_STREAM_ERROR if the stream structure was inconsistent.\n In the success case, the application may save the current current value of\n total_in which indicates where valid compressed data was found.  In the\n error case, the application may repeatedly call inflateSync, providing more\n input each time, until success or end of the input data.","declarations":[{"spell":"941:21-941:32|-1|1|1","param_spellings":["941:47-941:51","942:47-942:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":14304317041580717896,"detailed_name":"extern int inflateReset(z_streamp strm)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"\n   Sets the destination stream as a complete copy of the source stream.\n\n   This function can be useful when randomly accessing a large stream.  The\n first pass through the stream can periodically record the inflate state,\n allowing restarting inflate at those points when randomly accessing the\n stream.\n\n   inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not\n enough memory, Z_STREAM_ERROR if the source stream state was inconsistent\n (such as zalloc being Z_NULL).  msg is left unchanged in both source and\n destination.","declarations":[{"spell":"957:21-957:33|-1|1|1","param_spellings":["957:48-957:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":2777798344002023573,"detailed_name":"extern int inflateReset2(z_streamp strm, int windowBits)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"\n   This function is equivalent to inflateEnd followed by inflateInit,\n but does not free and reallocate the internal decompression state.  The\n stream will keep attributes that may have been set by inflateInit2.\n\n   inflateReset returns Z_OK if success, or Z_STREAM_ERROR if the source\n stream state was inconsistent (such as zalloc or state being Z_NULL).","declarations":[{"spell":"967:21-967:34|-1|1|1","param_spellings":["967:49-967:53","968:43-968:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":15599964980553879032,"detailed_name":"extern int inflatePrime(z_streamp strm, int bits, int value)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"\n   This function is the same as inflateReset, but it also permits changing\n the wrap and window size requests.  The windowBits parameter is interpreted\n the same as it is for inflateInit2.  If the window size is changed, then the\n memory allocated for the window is freed, and the window will be reallocated\n by inflate() if needed.\n\n   inflateReset2 returns Z_OK if success, or Z_STREAM_ERROR if the source\n stream state was inconsistent (such as zalloc or state being Z_NULL), or if\n the windowBits parameter is invalid.","declarations":[{"spell":"981:21-981:33|-1|1|1","param_spellings":["981:48-981:52","982:42-982:46","983:42-983:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":10282191037502584010,"detailed_name":"extern long inflateMark(z_streamp strm)","short_name_offset":12,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   This function inserts bits in the inflate input stream.  The intent is\n that this function is used to start inflating at a bit position in the\n middle of a byte.  The provided bits will be used before any bytes are used\n from next_in.  This function should only be used with raw inflate, and\n should be used before the first inflate() call after inflateInit2() or\n inflateReset().  bits must be less than or equal to 16, and that many of the\n least significant bits of value will be inserted in the input.\n\n   If bits is negative, then the input stream bit buffer is emptied.  Then\n inflatePrime() can be called again to put bits in the buffer.  This is used\n to clear out bits leftover after feeding inflate a block description prior\n to feeding inflate codes.\n\n   inflatePrime returns Z_OK if success, or Z_STREAM_ERROR if the source\n stream state was inconsistent.","declarations":[{"spell":"1002:22-1002:33|-1|1|1","param_spellings":["1002:48-1002:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":5669847994057569591,"detailed_name":"extern int inflateGetHeader(z_streamp strm, gz_headerp head)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"\n   This function returns two values, one in the lower 16 bits of the return\n value, and the other in the remaining upper bits, obtained by shifting the\n return value down 16 bits.  If the upper value is -1 and the lower value is\n zero, then inflate() is currently decoding information outside of a block.\n If the upper value is -1 and the lower value is non-zero, then inflate is in\n the middle of a stored block, with the lower value equaling the number of\n bytes from the input remaining to copy.  If the upper value is not -1, then\n it is the number of bits back from the current bit position in the input of\n the code (literal or length/distance pair) currently being processed.  In\n that case the lower value is the number of bytes already emitted for that\n code.\n\n   A code is being processed if inflate is waiting for more input to complete\n decoding of the code, or if it has completed decoding but is waiting for\n more output space to write the literal or match data.\n\n   inflateMark() is used to mark locations in the input data for random\n access, which may be at bit positions, and to note those cases where the\n output of a code may span boundaries of random access blocks.  The current\n location in the input stream can be determined from avail_in and data_type\n as noted in the description for the Z_BLOCK flush parameter for inflate.\n\n   inflateMark returns the value noted above, or -65536 if the provided\n source stream state was inconsistent.","declarations":[{"spell":"1030:21-1030:37|-1|1|1","param_spellings":["1030:52-1030:56","1031:53-1031:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":15752387831524145728,"detailed_name":"extern int inflateBack(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1096:21-1096:32|-1|1|1","param_spellings":["1096:47-1096:51","1097:45-1097:47","1097:59-1097:66","1098:46-1098:49","1098:61-1098:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":17721245300317383980,"detailed_name":"extern int inflateBackEnd(z_streamp strm)","short_name_offset":11,"short_name_size":14,"kind":12,"storage":2,"hover":"","comments":"\n   inflateBack() does a raw inflate with a single call using a call-back\n interface for input and output.  This is potentially more efficient than\n inflate() for file i/o applications, in that it avoids copying between the\n output and the sliding window by simply making the window itself the output\n buffer.  inflate() can be faster on modern CPUs when used with large\n buffers.  inflateBack() trusts the application to not change the output\n buffer passed by the output function, at least until inflateBack() returns.\n\n   inflateBackInit() must be called first to allocate the internal state\n and to initialize the state with the user-provided window buffer.\n inflateBack() may then be used multiple times to inflate a complete, raw\n deflate stream with each call.  inflateBackEnd() is then called to free the\n allocated state.\n\n   A raw deflate stream is one with no zlib or gzip header or trailer.\n This routine would normally be used in a utility that reads zip or gzip\n files and writes out uncompressed files.  The utility would decode the\n header and process the trailer on its own, hence this routine expects only\n the raw deflate stream to decompress.  This is different from the default\n behavior of inflate(), which expects a zlib header and trailer around the\n deflate stream.\n\n   inflateBack() uses two subroutines supplied by the caller that are then\n called by inflateBack() for input and output.  inflateBack() calls those\n routines until it reads a complete deflate stream and writes out all of the\n uncompressed data, or until it encounters an error.  The function's\n parameters and return types are defined above in the in_func and out_func\n typedefs.  inflateBack() will call in(in_desc, &buf) which should return the\n number of bytes of provided input, and a pointer to that input in buf.  If\n there is no input available, in() must return zero -- buf is ignored in that\n case -- and inflateBack() will return a buffer error.  inflateBack() will\n call out(out_desc, buf, len) to write the uncompressed data buf[0..len-1].\n out() should return zero on success, or non-zero on failure.  If out()\n returns non-zero, inflateBack() will return with an error.  Neither in() nor\n out() are permitted to change the contents of the window provided to\n inflateBackInit(), which is also the buffer that out() uses to write from.\n The length written by out() will be at most the window size.  Any non-zero\n amount of input may be provided by in().\n\n   For convenience, inflateBack() can be provided input on the first call by\n setting strm->next_in and strm->avail_in.  If that input is exhausted, then\n in() will be called.  Therefore strm->next_in must be initialized before\n calling inflateBack().  If strm->next_in is Z_NULL, then in() will be called\n immediately for input.  If strm->next_in is not Z_NULL, then strm->avail_in\n must also be initialized, and then if strm->avail_in is not zero, input will\n initially be taken from strm->next_in[0 ..  strm->avail_in - 1].\n\n   The in_desc and out_desc parameters of inflateBack() is passed as the\n first parameter of in() and out() respectively when they are called.  These\n descriptors can be optionally used to pass any information that the caller-\n supplied in() and out() functions need to do their job.\n\n   On return, inflateBack() will set strm->next_in and strm->avail_in to\n pass back any unused input that was provided by the last in() call.  The\n return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR\n if in() or out() returned an error, Z_DATA_ERROR if there was a format error\n in the deflate stream (in which case strm->msg is set to indicate the nature\n of the error), or Z_STREAM_ERROR if the stream was not properly initialized.\n In the case of Z_BUF_ERROR, an input or output error can be distinguished\n using strm->next_in which will be Z_NULL only if in() returned an error.  If\n strm->next_in is not Z_NULL, then the Z_BUF_ERROR was due to out() returning\n non-zero.  (in() will always be called before out(), so strm->next_in is\n assured to be defined if out() returns non-zero.)  Note that inflateBack()\n cannot return Z_OK.","declarations":[{"spell":"1166:21-1166:35|-1|1|1","param_spellings":["1166:50-1166:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":7854332736904947335,"detailed_name":"extern uLong zlibCompileFlags()","short_name_offset":13,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"\n   All memory allocated by inflateBackInit() is freed.\n\n   inflateBackEnd() returns Z_OK on success, or Z_STREAM_ERROR if the stream\n state was inconsistent.","declarations":[{"spell":"1174:23-1174:39|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":17485854212518370452,"detailed_name":"extern int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   The following utility functions are implemented on top of the basic\n stream-oriented functions.  To simplify the interface, some default options\n are assumed (compression level and memory usage, standard memory allocation\n functions).  The source code of these utility functions can be modified if\n you need special options.","declarations":[{"spell":"1227:21-1227:29|-1|1|1","param_spellings":["1227:41-1227:45","1227:57-1227:64","1228:47-1228:53","1228:61-1228:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":12591736385599274721,"detailed_name":"extern int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)","short_name_offset":11,"short_name_size":9,"kind":12,"storage":2,"hover":"","comments":"\n   Compresses the source buffer into the destination buffer.  sourceLen is\n the byte length of the source buffer.  Upon entry, destLen is the total size\n of the destination buffer, which must be at least the value returned by\n compressBound(sourceLen).  Upon exit, destLen is the actual size of the\n compressed data.  compress() is equivalent to compress2() with a level\n parameter of Z_DEFAULT_COMPRESSION.\n\n   compress returns Z_OK if success, Z_MEM_ERROR if there was not\n enough memory, Z_BUF_ERROR if there was not enough room in the output\n buffer.","declarations":[{"spell":"1242:21-1242:30|-1|1|1","param_spellings":["1242:42-1242:46","1242:58-1242:65","1243:48-1243:54","1243:62-1243:71","1244:39-1244:44"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":8310114366652150433,"detailed_name":"extern uLong compressBound(uLong sourceLen)","short_name_offset":13,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"\n   Compresses the source buffer into the destination buffer.  The level\n parameter has the same meaning as in deflateInit.  sourceLen is the byte\n length of the source buffer.  Upon entry, destLen is the total size of the\n destination buffer, which must be at least the value returned by\n compressBound(sourceLen).  Upon exit, destLen is the actual size of the\n compressed data.\n\n   compress2 returns Z_OK if success, Z_MEM_ERROR if there was not enough\n memory, Z_BUF_ERROR if there was not enough room in the output buffer,\n Z_STREAM_ERROR if the level parameter is invalid.","declarations":[{"spell":"1258:23-1258:36|-1|1|1","param_spellings":["1258:47-1258:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":13650044970029219935,"detailed_name":"extern int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)","short_name_offset":11,"short_name_size":10,"kind":12,"storage":2,"hover":"","comments":"\n   compressBound() returns an upper bound on the compressed size after\n compress() or compress2() on sourceLen bytes.  It would be used before a\n compress() or compress2() call to allocate the destination buffer.","declarations":[{"spell":"1265:21-1265:31|-1|1|1","param_spellings":["1265:43-1265:47","1265:59-1265:66","1266:49-1266:55","1266:63-1266:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":5743131760724862860,"detailed_name":"extern int uncompress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong *sourceLen)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Decompresses the source buffer into the destination buffer.  sourceLen is\n the byte length of the source buffer.  Upon entry, destLen is the total size\n of the destination buffer, which must be large enough to hold the entire\n uncompressed data.  (The size of the uncompressed data must have been saved\n previously by the compressor and transmitted to the decompressor by some\n mechanism outside the scope of this compression library.) Upon exit, destLen\n is the actual size of the uncompressed data.\n\n   uncompress returns Z_OK if success, Z_MEM_ERROR if there was not\n enough memory, Z_BUF_ERROR if there was not enough room in the output\n buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete.  In\n the case where there is not enough room, uncompress() will fill the output\n buffer with the uncompressed data up to that point.","declarations":[{"spell":"1283:21-1283:32|-1|1|1","param_spellings":["1283:44-1283:48","1283:60-1283:67","1284:50-1284:56","1284:65-1284:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":2072567153952393245,"detailed_name":"extern gzFile gzdopen(int fd, const char *mode)","short_name_offset":14,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN gzFile ZEXPORT gzopen OF((const char *path, const char *mode));\n\n   Opens a gzip (.gz) file for reading or writing.  The mode parameter is as\n in fopen (\"rb\" or \"wb\") but can also include a compression level (\"wb9\") or\n a strategy: 'f' for filtered data as in \"wb6f\", 'h' for Huffman-only\n compression as in \"wb1h\", 'R' for run-length encoding as in \"wb1R\", or 'F'\n for fixed code compression as in \"wb9F\".  (See the description of\n deflateInit2 for more information about the strategy parameter.)  'T' will\n request transparent writing or appending with no compression and not using\n the gzip format.\n\n   \"a\" can be used instead of \"w\" to request that the gzip stream that will\n be written be appended to the file.  \"+\" will result in an error, since\n reading and writing to the same gzip file is not supported.  The addition of\n \"x\" when writing will create the file exclusively, which fails if the file\n already exists.  On systems that support it, the addition of \"e\" when\n reading or writing will set the flag to close the file on an execve() call.\n\n   These functions, as well as gzip, will read and decode a sequence of gzip\n streams in a file.  The append function of gzopen() can be used to create\n such a file.  (Also see gzflush() for another way to do this.)  When\n appending, gzopen does not test whether the file begins with a gzip stream,\n nor does it look for the end of the gzip streams to begin appending.  gzopen\n will simply append a gzip stream to the existing file.\n\n   gzopen can be used to read a file which is not in gzip format; in this\n case gzread will directly read from the file without decompression.  When\n reading, this will be detected automatically by looking for the magic two-\n byte gzip header.\n\n   gzopen returns NULL if the file could not be opened, if there was\n insufficient memory to allocate the gzFile state, or if an invalid mode was\n specified (an 'r', 'w', or 'a' was not provided, or '+' was provided).\n errno can be checked to determine if the reason gzopen failed was that the\n file could not be opened.","declarations":[{"spell":"1340:24-1340:31|-1|1|1","param_spellings":["1340:40-1340:42","1340:56-1340:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":9721811213751098658,"detailed_name":"extern int gzbuffer(gzFile file, unsigned int size)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   gzdopen associates a gzFile with the file descriptor fd.  File descriptors\n are obtained from calls like open, dup, creat, pipe or fileno (if the file\n has been previously opened with fopen).  The mode parameter is as in gzopen.\n\n   The next call of gzclose on the returned gzFile will also close the file\n descriptor fd, just like fclose(fdopen(fd, mode)) closes the file descriptor\n fd.  If you want to keep fd open, use fd = dup(fd_keep); gz = gzdopen(fd,\n mode);.  The duplicated descriptor should be saved to avoid a leak, since\n gzdopen does not close fd if it fails.  If you are using fileno() to get the\n file descriptor from a FILE *, then you will have to use dup() to avoid\n double-close()ing the file descriptor.  Both gzclose() and fclose() will\n close the associated file descriptor, so they need to have different file\n descriptors.\n\n   gzdopen returns NULL if there was insufficient memory to allocate the\n gzFile state, if an invalid mode was specified (an 'r', 'w', or 'a' was not\n provided, or '+' was provided), or if fd is -1.  The file descriptor is not\n used until the next gz* read, write, seek, or close operation, so gzdopen\n will not detect if fd is invalid (unless fd is -1).","declarations":[{"spell":"1363:21-1363:29|-1|1|1","param_spellings":["1363:41-1363:45","1363:56-1363:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":8411756119304010503,"detailed_name":"extern int gzsetparams(gzFile file, int level, int strategy)","short_name_offset":11,"short_name_size":11,"kind":12,"storage":2,"hover":"","comments":"\n   Set the internal buffer size used by this library's functions.  The\n default buffer size is 8192 bytes.  This function must be called after\n gzopen() or gzdopen(), and before any other calls that read or write the\n file.  The buffer memory allocation is always deferred to the first read or\n write.  Three times that size in buffer space is allocated.  A larger buffer\n size of, for example, 64K or 128K bytes will noticeably increase the speed\n of decompression (reading).\n\n   The new buffer size also affects the maximum length for gzprintf().\n\n   gzbuffer() returns 0 on success, or -1 on failure, such as being called\n too late.","declarations":[{"spell":"1379:21-1379:32|-1|1|1","param_spellings":["1379:44-1379:48","1379:54-1379:59","1379:65-1379:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":15717394641155589379,"detailed_name":"extern int gzread(gzFile file, voidp buf, unsigned int len)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"\n   Dynamically update the compression level or strategy.  See the description\n of deflateInit2 for the meaning of these parameters.  Previously provided\n data is flushed before the parameter change.\n\n   gzsetparams returns Z_OK if success, Z_STREAM_ERROR if the file was not\n opened for writing, Z_ERRNO if there is an error writing the flushed data,\n or Z_MEM_ERROR if there is a memory allocation error.","declarations":[{"spell":"1390:21-1390:27|-1|1|1","param_spellings":["1390:39-1390:43","1390:51-1390:54","1390:65-1390:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":7672616482437042940,"detailed_name":"extern z_size_t gzfread(voidp buf, z_size_t size, z_size_t nitems, gzFile file)","short_name_offset":16,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Reads the given number of uncompressed bytes from the compressed file.  If\n the input file is not in gzip format, gzread copies the given number of\n bytes into the buffer directly from the file.\n\n   After reaching the end of a gzip stream in the input, gzread will continue\n to read, looking for another gzip stream.  Any number of gzip streams may be\n concatenated in the input file, and will all be decompressed by gzread().\n If something other than a gzip stream is encountered after a gzip stream,\n that remaining trailing garbage is ignored (and no error is returned).\n\n   gzread can be used to read a gzip file that is being concurrently written.\n Upon reaching the end of the input, gzread will return with the available\n data.  If the error code returned by gzerror is Z_OK or Z_BUF_ERROR, then\n gzclearerr can be used to clear the end of file indicator in order to permit\n gzread to be tried again.  Z_OK indicates that a gzip stream was completed\n on the last gzread.  Z_BUF_ERROR indicates that the input file ended in the\n middle of a gzip stream.  Note that gzread does not return -1 in the event\n of an incomplete gzip stream.  This error is deferred until gzclose(), which\n will return Z_BUF_ERROR if the last gzread ended in the middle of a gzip\n stream.  Alternatively, gzerror can be used before gzclose to detect this\n case.\n\n   gzread returns the number of uncompressed bytes actually read, less than\n len for end of file, or -1 for error.  If len is too large to fit in an int,\n then nothing is read, -1 is returned, and the error state is set to\n Z_STREAM_ERROR.","declarations":[{"spell":"1420:26-1420:33|-1|1|1","param_spellings":["1420:44-1420:47","1420:58-1420:62","1420:73-1420:79","1421:45-1421:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":13508521250517114549,"detailed_name":"extern int gzwrite(gzFile file, voidpc buf, unsigned int len)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Read up to nitems items of size size from file to buf, otherwise operating\n as gzread() does.  This duplicates the interface of stdio's fread(), with\n size_t request and return types.  If the library defines size_t, then\n z_size_t is identical to size_t.  If not, then z_size_t is an unsigned\n integer type that can contain a pointer.\n\n   gzfread() returns the number of full items read of size size, or zero if\n the end of the file was reached and a full item could not be read, or if\n there was an error.  gzerror() must be consulted if zero is returned in\n order to determine if there was an error.  If the multiplication of size and\n nitems overflows, i.e. the product does not fit in a z_size_t, then nothing\n is read, zero is returned, and the error state is set to Z_STREAM_ERROR.\n\n   In the event that the end of file is reached and only a partial item is\n available at the end, i.e. the remaining uncompressed data length is not a\n multiple of size, then the final partial item is nevetheless read into buf\n and the end-of-file flag is set.  The length of the partial item read is not\n provided, but could be inferred from the result of gztell().  This behavior\n is the same as the behavior of fread() implementations in common libraries,\n but it prevents the direct use of gzfread() to read a concurrently written\n file, reseting and retrying on end-of-file, when size is not 1.","declarations":[{"spell":"1446:21-1446:28|-1|1|1","param_spellings":["1446:40-1446:44","1447:40-1447:43","1447:54-1447:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":18106948351346755721,"detailed_name":"extern z_size_t gzfwrite(voidpc buf, z_size_t size, z_size_t nitems, gzFile file)","short_name_offset":16,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   Writes the given number of uncompressed bytes into the compressed file.\n gzwrite returns the number of uncompressed bytes written or 0 in case of\n error.","declarations":[{"spell":"1454:26-1454:34|-1|1|1","param_spellings":["1454:46-1454:49","1454:60-1454:64","1455:48-1455:54","1455:63-1455:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":15793666579758123170,"detailed_name":"extern int gzprintf(gzFile file, const char *format, ...)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   gzfwrite() writes nitems items of size size from buf to file, duplicating\n the interface of stdio's fwrite(), with size_t request and return types.  If\n the library defines size_t, then z_size_t is identical to size_t.  If not,\n then z_size_t is an unsigned integer type that can contain a pointer.\n\n   gzfwrite() returns the number of full items written of size size, or zero\n if there was an error.  If the multiplication of size and nitems overflows,\n i.e. the product does not fit in a z_size_t, then nothing is written, zero\n is returned, and the error state is set to Z_STREAM_ERROR.","declarations":[{"spell":"1468:23-1468:31|-1|1|1","param_spellings":["1468:46-1468:50","1468:64-1468:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":15889396306697459151,"detailed_name":"extern int gzputs(gzFile file, const char *s)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"\n   Converts, formats, and writes the arguments to the compressed file under\n control of the format string, as in fprintf.  gzprintf returns the number of\n uncompressed bytes actually written, or a negative zlib error code in case\n of error.  The number of uncompressed bytes written is limited to 8191, or\n one less than the buffer size given to gzbuffer().  The caller should assure\n that this limit is not exceeded.  If it is exceeded, then gzprintf() will\n return an error (0) with nothing written.  In this case, there may also be a\n buffer overflow with unpredictable consequences, which is possible only if\n zlib was compiled with the insecure functions sprintf() or vsprintf()\n because the secure snprintf() or vsnprintf() functions were not available.\n This can be determined using zlibCompileFlags().","declarations":[{"spell":"1483:21-1483:27|-1|1|1","param_spellings":["1483:39-1483:43","1483:57-1483:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":2556515403340119685,"detailed_name":"extern char *gzgets(gzFile file, char *buf, int len)","short_name_offset":13,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"\n   Writes the given null-terminated string to the compressed file, excluding\n the terminating null character.\n\n   gzputs returns the number of characters written, or -1 in case of error.","declarations":[{"spell":"1491:24-1491:30|-1|1|1","param_spellings":["1491:42-1491:46","1491:54-1491:57","1491:63-1491:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":1817911299907855089,"detailed_name":"extern int gzputc(gzFile file, int c)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"\n   Reads bytes from the compressed file until len-1 characters are read, or a\n newline character is read and transferred to buf, or an end-of-file\n condition is encountered.  If any characters are read or if len == 1, the\n string is terminated with a null character.  If no characters are read due\n to an end-of-file or len < 1, then the buffer is left untouched.\n\n   gzgets returns buf which is a null-terminated string, or it returns NULL\n for end-of-file or in case of error.  If there was an error, the contents at\n buf are indeterminate.","declarations":[{"spell":"1504:21-1504:27|-1|1|1","param_spellings":["1504:39-1504:43","1504:49-1504:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":6454009339815523790,"detailed_name":"extern int gzgetc(gzFile file)","short_name_offset":11,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"\n   Writes c, converted to an unsigned char, into the compressed file.  gzputc\n returns the value that was written, or -1 in case of error.","declarations":[{"spell":"1510:21-1510:27|-1|1|1","param_spellings":["1510:39-1510:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":17442340406197024451,"detailed_name":"extern int gzungetc(int c, gzFile file)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   Reads one byte from the compressed file.  gzgetc returns this byte or -1\n in case of end of file or error.  This is implemented as a macro for speed.\n As such, it does not do all of the checking the other functions do.  I.e.\n it does not check to see if file is NULL, nor whether the structure file\n points to has been clobbered or not.","declarations":[{"spell":"1519:21-1519:29|-1|1|1","param_spellings":["1519:38-1519:39","1519:48-1519:52"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":470230676584617199,"detailed_name":"extern int gzflush(gzFile file, int flush)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Push one character back onto the stream to be read as the first character\n on the next read.  At least one character of push-back is allowed.\n gzungetc() returns the character pushed, or -1 on failure.  gzungetc() will\n fail if c is -1, and may fail if a character has been pushed but not read\n yet.  If gzungetc is used immediately after gzopen or gzdopen, at least the\n output buffer size of pushed characters is allowed.  (See gzbuffer above.)\n The pushed character will be discarded if the stream is repositioned with\n gzseek() or gzrewind().","declarations":[{"spell":"1531:21-1531:28|-1|1|1","param_spellings":["1531:40-1531:44","1531:50-1531:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":11591426424095929094,"detailed_name":"extern int gzrewind(gzFile file)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN z_off_t ZEXPORT gzseek OF((gzFile file,\n                                 z_off_t offset, int whence));\n\n   Sets the starting position for the next gzread or gzwrite on the given\n compressed file.  The offset represents a number of bytes in the\n uncompressed data stream.  The whence parameter is defined as in lseek(2);\n the value SEEK_END is not supported.\n\n   If the file is opened for reading, this function is emulated but can be\n extremely slow.  If the file is opened for writing, only forward seeks are\n supported; gzseek then compresses a sequence of zeroes up to the new\n starting position.\n\n   gzseek returns the resulting offset location as measured in bytes from\n the beginning of the uncompressed stream, or -1 in case of error, in\n particular if the file is opened for writing and the new starting position\n would be before the current position.","declarations":[{"spell":"1566:24-1566:32|-1|1|1","param_spellings":["1566:44-1566:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":14069737361065320778,"detailed_name":"extern int gzeof(gzFile file)","short_name_offset":11,"short_name_size":5,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN z_off_t ZEXPORT gzoffset OF((gzFile file));\n\n   Returns the current offset in the file being read or written.  This offset\n includes the count of bytes that precede the gzip stream, for example when\n appending or when using gzdopen() for reading.  When reading, the offset\n does not include as yet unused buffered input.  This information can be used\n for a progress indicator.  On error, gzoffset() returns -1.","declarations":[{"spell":"1594:21-1594:26|-1|1|1","param_spellings":["1594:38-1594:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":9061996774366558636,"detailed_name":"extern int gzdirect(gzFile file)","short_name_offset":11,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"\n   Returns true (1) if the end-of-file indicator has been set while reading,\n false (0) otherwise.  Note that the end-of-file indicator is set only if the\n read tried to go past the end of the input, but came up short.  Therefore,\n just like feof(), gzeof() may return false even if there is no more data to\n read, in the event that the last read request was for the exact number of\n bytes remaining in the input file.  This will happen if the input file size\n is an exact multiple of the buffer size.\n\n   If gzeof() returns true, then the read functions will return no more data,\n unless the end-of-file indicator is reset by gzclearerr() and the input file\n has grown since the previous end of file was detected.","declarations":[{"spell":"1609:21-1609:29|-1|1|1","param_spellings":["1609:41-1609:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":10254704174956289500,"detailed_name":"extern int gzclose(gzFile file)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Returns true (1) if file is being copied directly while reading, or false\n (0) if file is a gzip stream being decompressed.\n\n   If the input file is empty, gzdirect() will return true, since the input\n does not contain a gzip stream.\n\n   If gzdirect() is used immediately after gzopen() or gzdopen() it will\n cause buffers to be allocated to allow reading the file to determine if it\n is a gzip file.  Therefore if gzbuffer() is used, it should be called before\n gzdirect().\n\n   When writing, gzdirect() returns true (1) if transparent writing was\n requested (\"wT\" for the gzopen() mode), or false (0) otherwise.  (Note:\n gzdirect() is not needed when writing.  Transparent writing must be\n explicitly requested, so the application already knows the answer.  When\n linking statically, using gzdirect() will include all of the zlib code for\n gzip file reading and decompression, which may not be desired.)","declarations":[{"spell":"1630:24-1630:31|-1|1|1","param_spellings":["1630:43-1630:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":6139290939922774422,"detailed_name":"extern int gzclose_r(gzFile file)","short_name_offset":11,"short_name_size":9,"kind":12,"storage":2,"hover":"","comments":"\n   Flushes all pending output if necessary, closes the compressed file and\n deallocates the (de)compression state.  Note that once file is closed, you\n cannot call gzerror with file, since its structures have been deallocated.\n gzclose must not be called more than once on the same file, just as free\n must not be called more than once on the same allocation.\n\n   gzclose will return Z_STREAM_ERROR if file is not valid, Z_ERRNO on a\n file operation error, Z_MEM_ERROR if out of memory, Z_BUF_ERROR if the\n last read ended in the middle of a gzip stream, or Z_OK on success.","declarations":[{"spell":"1643:21-1643:30|-1|1|1","param_spellings":["1643:42-1643:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":17366889352125530114,"detailed_name":"extern int gzclose_w(gzFile file)","short_name_offset":11,"short_name_size":9,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1644:21-1644:30|-1|1|1","param_spellings":["1644:42-1644:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":9852586301013299244,"detailed_name":"extern const char *gzerror(gzFile file, int *errnum)","short_name_offset":19,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Same as gzclose(), but gzclose_r() is only for use when reading, and\n gzclose_w() is only for use when writing or appending.  The advantage to\n using these instead of gzclose() is that they avoid linking in zlib\n compression or decompression code that is not used when only reading or only\n writing respectively.  If gzclose() is used, then both compression and\n decompression code will be included the application when linking to a static\n zlib library.","declarations":[{"spell":"1655:30-1655:37|-1|1|1","param_spellings":["1655:49-1655:53","1655:60-1655:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":984090325117442033,"detailed_name":"extern void gzclearerr(gzFile file)","short_name_offset":12,"short_name_size":10,"kind":12,"storage":2,"hover":"","comments":"\n   Returns the error message for the last error which occurred on the given\n compressed file.  errnum is set to zlib error number.  If an error occurred\n in the file system and not in the compression library, errnum is set to\n Z_ERRNO and the application may consult errno to get the exact error code.\n\n   The application must not modify the returned string.  Future calls to\n this function may invalidate the previously returned string.  If file is\n closed, then the string previously returned by gzerror will no longer be\n available.\n\n   gzerror() should be used to distinguish errors from end-of-file for those\n functions above that do not distinguish those cases in their return values.","declarations":[{"spell":"1671:22-1671:32|-1|1|1","param_spellings":["1671:44-1671:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":5800582227715007876,"detailed_name":"extern uLong adler32(uLong adler, const Bytef *buf, uInt len)","short_name_offset":13,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   These functions are not related to compression but are exported\n anyway because they might be useful in applications using the compression\n library.","declarations":[{"spell":"1688:23-1688:30|-1|1|1","param_spellings":["1688:41-1688:46","1688:61-1688:64","1688:71-1688:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":7623798997239124140,"detailed_name":"extern uLong adler32_z(uLong adler, const Bytef *buf, z_size_t len)","short_name_offset":13,"short_name_size":9,"kind":12,"storage":2,"hover":"","comments":"\n   Update a running Adler-32 checksum with the bytes buf[0..len-1] and\n return the updated checksum.  If buf is Z_NULL, this function returns the\n required initial value for the checksum.\n\n   An Adler-32 checksum is almost as reliable as a CRC-32 but can be computed\n much faster.\n\n Usage example:\n\n   uLong adler = adler32(0L, Z_NULL, 0);\n\n   while (read_buffer(buffer, length) != EOF) {\n     adler = adler32(adler, buffer, length);\n   }\n   if (adler != original_adler) error();","declarations":[{"spell":"1707:23-1707:32|-1|1|1","param_spellings":["1707:43-1707:48","1707:63-1707:66","1708:46-1708:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":14515588301131278882,"detailed_name":"extern uLong crc32(uLong crc, const Bytef *buf, uInt len)","short_name_offset":13,"short_name_size":5,"kind":12,"storage":2,"hover":"","comments":"\nZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,\n                                        z_off_t len2));\n\n   Combine two Adler-32 checksums into one.  For two sequences of bytes, seq1\n and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for\n each, adler1 and adler2.  adler32_combine() returns the Adler-32 checksum of\n seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.  Note\n that the z_off_t type (like off_t) is a signed integer.  If len2 is\n negative, the result has no meaning or utility.","declarations":[{"spell":"1725:23-1725:28|-1|1|1","param_spellings":["1725:41-1725:44","1725:59-1725:62","1725:69-1725:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":15323250284201560971,"detailed_name":"extern uLong crc32_z(uLong adler, const Bytef *buf, z_size_t len)","short_name_offset":13,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"\n   Update a running CRC-32 with the bytes buf[0..len-1] and return the\n updated CRC-32.  If buf is Z_NULL, this function returns the required\n initial value for the crc.  Pre- and post-conditioning (one's complement) is\n performed within this function so it shouldn't be done by the application.\n\n Usage example:\n\n   uLong crc = crc32(0L, Z_NULL, 0);\n\n   while (read_buffer(buffer, length) != EOF) {\n     crc = crc32(crc, buffer, length);\n   }\n   if (crc != original_crc) error();","declarations":[{"spell":"1742:23-1742:30|-1|1|1","param_spellings":["1742:41-1742:46","1742:61-1742:64","1743:44-1743:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":3232034067666556705,"detailed_name":"extern int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"deflateInit and inflateInit are macros to allow checking the zlib version\nand the compiler's view of z_stream:","declarations":[{"spell":"1764:21-1764:33|-1|1|1","param_spellings":["1764:48-1764:52","1764:58-1764:63","1765:50-1765:57","1765:63-1765:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":5367945218699195409,"detailed_name":"extern int inflateInit_(z_streamp strm, const char *version, int stream_size)","short_name_offset":11,"short_name_size":12,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1766:21-1766:33|-1|1|1","param_spellings":["1766:48-1766:52","1767:50-1767:57","1767:63-1767:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":14807807324114362057,"detailed_name":"extern int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1768:21-1768:34|-1|1|1","param_spellings":["1768:49-1768:53","1768:60-1768:65","1768:72-1768:78","1769:43-1769:53","1769:59-1769:67","1770:43-1770:51","1770:65-1770:72","1771:43-1771:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":1187577201852246370,"detailed_name":"extern int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1772:21-1772:34|-1|1|1","param_spellings":["1772:49-1772:53","1772:60-1772:70","1773:51-1773:58","1773:64-1773:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":10851140443233457151,"detailed_name":"extern int inflateBackInit_(z_streamp strm, int windowBits, unsigned char *window, const char *version, int stream_size)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1774:21-1774:37|-1|1|1","param_spellings":["1774:52-1774:56","1774:62-1774:72","1775:61-1775:67","1776:54-1776:61","1777:46-1777:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":11038850435823363949,"detailed_name":"extern int gzgetc_(gzFile file)","short_name_offset":11,"short_name_size":7,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1822:21-1822:28|-1|1|1","param_spellings":["1822:40-1822:44"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":16659193200717213531,"detailed_name":"extern gzFile gzopen(const char *, const char *)","short_name_offset":14,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1872:27-1872:33|-1|1|1","param_spellings":["1872:50-1872:50","1872:64-1872:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":11830803431420709656,"detailed_name":"extern off_t gzseek(gzFile, off_t, int)","short_name_offset":13,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1873:28-1873:34|-1|1|1","param_spellings":["1873:45-1873:45","1873:54-1873:54","1873:59-1873:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":6546209394814345855,"detailed_name":"extern off_t gztell(gzFile)","short_name_offset":13,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1874:28-1874:34|-1|1|1","param_spellings":["1874:45-1874:45"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":10375503189314387263,"detailed_name":"extern off_t gzoffset(gzFile)","short_name_offset":13,"short_name_size":8,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1875:28-1875:36|-1|1|1","param_spellings":["1875:47-1875:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":12105701900040241306,"detailed_name":"extern uLong adler32_combine(uLong, uLong, off_t)","short_name_offset":13,"short_name_size":15,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1876:26-1876:41|-1|1|1","param_spellings":["1876:51-1876:51","1876:58-1876:58","1876:67-1876:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":14414583803566282754,"detailed_name":"extern uLong crc32_combine(uLong, uLong, off_t)","short_name_offset":13,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1877:26-1877:39|-1|1|1","param_spellings":["1877:49-1877:49","1877:56-1877:56","1877:65-1877:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":12105873332093969430,"detailed_name":"extern const char *zError(int)","short_name_offset":19,"short_name_size":6,"kind":12,"storage":2,"hover":"","comments":"undocumented functions","declarations":[{"spell":"1888:32-1888:38|-1|1|1","param_spellings":["1888:56-1888:56"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":1656325297398767286,"detailed_name":"extern int inflateSyncPoint(z_streamp)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"\n Returns true if inflate is currently at the end of a block generated by\n Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n implementation to provide an additional safety check. PPP uses\n Z_SYNC_FLUSH but removes the length bytes of the resulting empty stored\n block. When decompressing, PPP checks that at the end of input packet,\n inflate is waiting for these length bytes.","declarations":[{"spell":"1889:32-1889:48|-1|1|1","param_spellings":["1889:62-1889:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":15446297931860044114,"detailed_name":"extern const z_crc_t *get_crc_table()","short_name_offset":22,"short_name_size":13,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1890:37-1890:50|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":2818895778233322589,"detailed_name":"extern int inflateUndermine(z_streamp, int)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1891:32-1891:48|-1|1|1","param_spellings":["1891:62-1891:62","1891:67-1891:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":14730232919047818903,"detailed_name":"extern int inflateValidate(z_streamp, int)","short_name_offset":11,"short_name_size":15,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1892:32-1892:47|-1|1|1","param_spellings":["1892:61-1892:61","1892:66-1892:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":9854391573594365997,"detailed_name":"extern unsigned long inflateCodesUsed(z_streamp)","short_name_offset":21,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1893:32-1893:48|-1|1|1","param_spellings":["1893:63-1893:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":8786401323198926084,"detailed_name":"extern int inflateResetKeep(z_streamp)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1894:32-1894:48|-1|1|1","param_spellings":["1894:62-1894:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":14968492688165798298,"detailed_name":"extern int deflateResetKeep(z_streamp)","short_name_offset":11,"short_name_size":16,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1895:32-1895:48|-1|1|1","param_spellings":["1895:62-1895:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":12566895709079293863,"detailed_name":"extern int gzvprintf(gzFile file, const char *format, va_list va)","short_name_offset":11,"short_name_size":9,"kind":12,"storage":2,"hover":"","comments":"","declarations":[{"spell":"1902:34-1902:43|-1|1|1","param_spellings":["1902:58-1902:62","1903:63-1903:69","1904:59-1904:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":6493519278879163533,"detailed_name":"Bytef *z_stream_s::next_in","short_name_offset":19,"short_name_size":7,"hover":"","comments":"next input byte","declarations":[],"spell":"87:20-87:27|6|2|2","extent":"87:13-87:27|6|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":1,"usr":6337258917716158774,"detailed_name":"uInt z_stream_s::avail_in","short_name_offset":17,"short_name_size":8,"hover":"","comments":"number of bytes available at next_in","declarations":[],"spell":"88:14-88:22|6|2|2","extent":"88:5-88:22|6|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":2,"usr":1006952980597253558,"detailed_name":"uLong z_stream_s::total_in","short_name_offset":18,"short_name_size":8,"hover":"","comments":"total number of input bytes read so far","declarations":[],"spell":"89:14-89:22|6|2|2","extent":"89:5-89:22|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":3,"usr":6505968431772055346,"detailed_name":"Bytef *z_stream_s::next_out","short_name_offset":19,"short_name_size":8,"hover":"","comments":"next output byte will go here","declarations":[],"spell":"91:15-91:23|6|2|2","extent":"91:5-91:23|6|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":4,"usr":13152890847518810130,"detailed_name":"uInt z_stream_s::avail_out","short_name_offset":17,"short_name_size":9,"hover":"","comments":"remaining free space at next_out","declarations":[],"spell":"92:14-92:23|6|2|2","extent":"92:5-92:23|6|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":5,"usr":7604813754400109614,"detailed_name":"uLong z_stream_s::total_out","short_name_offset":18,"short_name_size":9,"hover":"","comments":"total number of bytes output so far","declarations":[],"spell":"93:14-93:23|6|2|2","extent":"93:5-93:23|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":6,"usr":17487529417456598788,"detailed_name":"char *z_stream_s::msg","short_name_offset":18,"short_name_size":3,"hover":"","comments":"last error message, NULL if no error","declarations":[],"spell":"95:19-95:22|6|2|2","extent":"95:13-95:22|6|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":7,"usr":12347053234197521588,"detailed_name":"struct internal_state *z_stream_s::state","short_name_offset":35,"short_name_size":5,"hover":"","comments":"not visible by applications","declarations":[],"spell":"96:32-96:37|6|2|2","extent":"96:5-96:37|6|2|0","type":5,"uses":[],"kind":8,"storage":0},{"id":8,"usr":10391040158966751581,"detailed_name":"alloc_func z_stream_s::zalloc","short_name_offset":23,"short_name_size":6,"hover":"","comments":"used to allocate the internal state","declarations":[],"spell":"98:16-98:22|6|2|2","extent":"98:5-98:22|6|2|0","type":1,"uses":[],"kind":8,"storage":0},{"id":9,"usr":7194535502864820360,"detailed_name":"free_func z_stream_s::zfree","short_name_offset":22,"short_name_size":5,"hover":"","comments":"used to free the internal state","declarations":[],"spell":"99:16-99:21|6|2|2","extent":"99:5-99:21|6|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":10,"usr":8415580409168919506,"detailed_name":"voidpf z_stream_s::opaque","short_name_offset":19,"short_name_size":6,"hover":"","comments":"private data object passed to zalloc and zfree","declarations":[],"spell":"100:16-100:22|6|2|2","extent":"100:5-100:22|6|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":11,"usr":3603100495911510019,"detailed_name":"int z_stream_s::data_type","short_name_offset":16,"short_name_size":9,"hover":"","comments":"best guess about the data type: binary or text\nfor deflate, or the decoding state for inflate","declarations":[],"spell":"102:13-102:22|6|2|2","extent":"102:5-102:22|6|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":12,"usr":5191016803633744362,"detailed_name":"uLong z_stream_s::adler","short_name_offset":18,"short_name_size":5,"hover":"","comments":"Adler-32 or CRC-32 value of the uncompressed data","declarations":[],"spell":"104:13-104:18|6|2|2","extent":"104:5-104:18|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":13,"usr":11282119188650864258,"detailed_name":"uLong z_stream_s::reserved","short_name_offset":18,"short_name_size":8,"hover":"","comments":"reserved for future use","declarations":[],"spell":"105:13-105:21|6|2|2","extent":"105:5-105:21|6|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":14,"usr":16003792832309460753,"detailed_name":"int gz_header_s::text","short_name_offset":17,"short_name_size":4,"hover":"","comments":"true if compressed data believed to be text","declarations":[],"spell":"115:13-115:17|13|2|2","extent":"115:5-115:17|13|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":15,"usr":4559871785087101353,"detailed_name":"uLong gz_header_s::time","short_name_offset":19,"short_name_size":4,"hover":"","comments":"modification time","declarations":[],"spell":"116:13-116:17|13|2|2","extent":"116:5-116:17|13|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":16,"usr":3493774984599624128,"detailed_name":"int gz_header_s::xflags","short_name_offset":17,"short_name_size":6,"hover":"","comments":"extra flags (not used when writing a gzip file)","declarations":[],"spell":"117:13-117:19|13|2|2","extent":"117:5-117:19|13|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":17,"usr":3976068742799671199,"detailed_name":"int gz_header_s::os","short_name_offset":17,"short_name_size":2,"hover":"","comments":"operating system","declarations":[],"spell":"118:13-118:15|13|2|2","extent":"118:5-118:15|13|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":18,"usr":12673573986825497982,"detailed_name":"Bytef *gz_header_s::extra","short_name_offset":20,"short_name_size":5,"hover":"","comments":"pointer to extra field or Z_NULL if none","declarations":[],"spell":"119:14-119:19|13|2|2","extent":"119:5-119:19|13|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":19,"usr":2753037821708413750,"detailed_name":"uInt gz_header_s::extra_len","short_name_offset":18,"short_name_size":9,"hover":"","comments":"extra field length (valid if extra != Z_NULL)","declarations":[],"spell":"120:13-120:22|13|2|2","extent":"120:5-120:22|13|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":20,"usr":8650091834633734545,"detailed_name":"uInt gz_header_s::extra_max","short_name_offset":18,"short_name_size":9,"hover":"","comments":"space at extra (only when reading header)","declarations":[],"spell":"121:13-121:22|13|2|2","extent":"121:5-121:22|13|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":21,"usr":15018443896173731957,"detailed_name":"Bytef *gz_header_s::name","short_name_offset":20,"short_name_size":4,"hover":"","comments":"pointer to zero-terminated file name or Z_NULL","declarations":[],"spell":"122:14-122:18|13|2|2","extent":"122:5-122:18|13|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":22,"usr":3687357474653456494,"detailed_name":"uInt gz_header_s::name_max","short_name_offset":18,"short_name_size":8,"hover":"","comments":"space at name (only when reading header)","declarations":[],"spell":"123:13-123:21|13|2|2","extent":"123:5-123:21|13|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":23,"usr":15338941154514693263,"detailed_name":"Bytef *gz_header_s::comment","short_name_offset":20,"short_name_size":7,"hover":"","comments":"pointer to zero-terminated comment or Z_NULL","declarations":[],"spell":"124:14-124:21|13|2|2","extent":"124:5-124:21|13|2|0","type":8,"uses":[],"kind":8,"storage":0},{"id":24,"usr":4729765325459593266,"detailed_name":"uInt gz_header_s::comm_max","short_name_offset":18,"short_name_size":8,"hover":"","comments":"space at comment (only when reading header)","declarations":[],"spell":"125:13-125:21|13|2|2","extent":"125:5-125:21|13|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":25,"usr":5985332252645549371,"detailed_name":"int gz_header_s::hcrc","short_name_offset":17,"short_name_size":4,"hover":"","comments":"true if there was or will be a header crc","declarations":[],"spell":"126:13-126:17|13|2|2","extent":"126:5-126:17|13|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":26,"usr":18102116592448669564,"detailed_name":"int gz_header_s::done","short_name_offset":17,"short_name_size":4,"hover":"","comments":"true when done reading gzip header (not used\nwhen writing a gzip file)","declarations":[],"spell":"127:13-127:17|13|2|2","extent":"127:5-127:17|13|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":27,"usr":3824015291142185435,"detailed_name":"unsigned int gzFile_s::have","short_name_offset":23,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1818:14-1818:18|19|2|2","extent":"1818:5-1818:18|19|2|0","type":24,"uses":[],"kind":8,"storage":0},{"id":28,"usr":18326571263293889684,"detailed_name":"unsigned char *gzFile_s::next","short_name_offset":25,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1819:20-1819:24|19|2|2","extent":"1819:5-1819:24|19|2|0","type":25,"uses":[],"kind":8,"storage":0},{"id":29,"usr":9195233513353608393,"detailed_name":"off_t gzFile_s::pos","short_name_offset":16,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1820:15-1820:18|19|2|2","extent":"1820:5-1820:18|19|2|0","type":26,"uses":[],"kind":8,"storage":0},{"id":30,"usr":6551942361207628541,"detailed_name":"ZLIB_H","short_name_offset":0,"short_name_size":6,"hover":"#define ZLIB_H","comments":"","declarations":[],"spell":"32:9-32:15|-1|1|2","extent":"32:9-32:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":14624085656906559628,"detailed_name":"ZLIB_VERSION","short_name_offset":0,"short_name_size":12,"hover":"#define ZLIB_VERSION \"1.2.11\"","comments":"","declarations":[],"spell":"40:9-40:21|-1|1|2","extent":"40:9-40:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":3225963221264962669,"detailed_name":"ZLIB_VERNUM","short_name_offset":0,"short_name_size":11,"hover":"#define ZLIB_VERNUM 0x12b0","comments":"","declarations":[],"spell":"41:9-41:20|-1|1|2","extent":"41:9-41:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":14757601272087522406,"detailed_name":"ZLIB_VER_MAJOR","short_name_offset":0,"short_name_size":14,"hover":"#define ZLIB_VER_MAJOR 1","comments":"","declarations":[],"spell":"42:9-42:23|-1|1|2","extent":"42:9-42:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":34,"usr":8304914797929108788,"detailed_name":"ZLIB_VER_MINOR","short_name_offset":0,"short_name_size":14,"hover":"#define ZLIB_VER_MINOR 2","comments":"","declarations":[],"spell":"43:9-43:23|-1|1|2","extent":"43:9-43:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":1398334264486426784,"detailed_name":"ZLIB_VER_REVISION","short_name_offset":0,"short_name_size":17,"hover":"#define ZLIB_VER_REVISION 11","comments":"","declarations":[],"spell":"44:9-44:26|-1|1|2","extent":"44:9-44:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":11898772266996501604,"detailed_name":"ZLIB_VER_SUBREVISION","short_name_offset":0,"short_name_size":20,"hover":"#define ZLIB_VER_SUBREVISION 0","comments":"","declarations":[],"spell":"45:9-45:29|-1|1|2","extent":"45:9-45:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":37,"usr":2537333498669209324,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["81:30-81:32|-1|1|4","82:30-82:32|-1|1|4","220:42-220:44|-1|1|4","250:29-250:31|-1|1|4","363:32-363:34|-1|1|4","400:29-400:31|-1|1|4","520:32-520:34|-1|1|4","611:42-611:44|-1|1|4","655:42-655:44|-1|1|4","677:33-677:35|-1|1|4","695:34-695:36|-1|1|4","706:35-706:37|-1|1|4","743:33-743:35|-1|1|4","760:36-760:38|-1|1|4","775:36-775:38|-1|1|4","790:34-790:36|-1|1|4","807:38-807:40|-1|1|4","884:42-884:44|-1|1|4","907:42-907:44|-1|1|4","922:33-922:35|-1|1|4","941:33-941:35|-1|1|4","957:34-957:36|-1|1|4","967:35-967:37|-1|1|4","981:34-981:36|-1|1|4","1002:34-1002:36|-1|1|4","1030:38-1030:40|-1|1|4","1092:29-1092:31|-1|1|4","1094:25-1094:27|-1|1|4","1096:33-1096:35|-1|1|4","1166:36-1166:38|-1|1|4","1174:40-1174:42|-1|1|4","1227:30-1227:32|-1|1|4","1242:31-1242:33|-1|1|4","1258:37-1258:39|-1|1|4","1265:32-1265:34|-1|1|4","1283:33-1283:35|-1|1|4","1340:32-1340:34|-1|1|4","1363:30-1363:32|-1|1|4","1379:33-1379:35|-1|1|4","1390:28-1390:30|-1|1|4","1420:34-1420:36|-1|1|4","1446:29-1446:31|-1|1|4","1454:35-1454:37|-1|1|4","1483:28-1483:30|-1|1|4","1491:31-1491:33|-1|1|4","1504:28-1504:30|-1|1|4","1510:28-1510:30|-1|1|4","1519:30-1519:32|-1|1|4","1531:29-1531:31|-1|1|4","1566:33-1566:35|-1|1|4","1594:27-1594:29|-1|1|4","1609:30-1609:32|-1|1|4","1630:32-1630:34|-1|1|4","1643:31-1643:33|-1|1|4","1644:31-1644:33|-1|1|4","1655:38-1655:40|-1|1|4","1671:33-1671:35|-1|1|4","1688:31-1688:33|-1|1|4","1707:33-1707:35|-1|1|4","1725:31-1725:33|-1|1|4","1742:31-1742:33|-1|1|4","1764:34-1764:36|-1|1|4","1766:34-1766:36|-1|1|4","1768:35-1768:37|-1|1|4","1772:35-1772:37|-1|1|4","1774:38-1774:40|-1|1|4","1822:29-1822:31|-1|1|4","1872:34-1872:36|-1|1|4","1873:35-1873:37|-1|1|4","1874:35-1874:37|-1|1|4","1875:37-1875:39|-1|1|4","1876:42-1876:44|-1|1|4","1877:40-1877:42|-1|1|4","1888:49-1888:51|-1|1|4","1889:49-1889:51|-1|1|4","1890:54-1890:56|-1|1|4","1891:49-1891:51|-1|1|4","1892:48-1892:50|-1|1|4","1893:49-1893:51|-1|1|4","1894:49-1894:51|-1|1|4","1895:49-1895:51|-1|1|4"],"kind":0,"storage":0},{"id":38,"usr":2083439273774655907,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["87:5-87:12|-1|1|4","95:5-95:12|-1|1|4","1093:33-1093:40|-1|1|4"],"kind":0,"storage":0},{"id":39,"usr":1742155389814348645,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["96:27-96:30|-1|1|4","108:18-108:21|-1|1|4","131:19-131:22|-1|1|4","1092:38-1092:41|-1|1|4","1093:55-1093:58|-1|1|4","1093:61-1093:64|-1|1|4","1094:34-1094:37|-1|1|4","1094:55-1094:58|-1|1|4","1097:54-1097:57|-1|1|4","1098:56-1098:59|-1|1|4","1775:56-1775:59|-1|1|4","1890:23-1890:26|-1|1|4"],"kind":0,"storage":0},{"id":40,"usr":9099637677063090140,"detailed_name":"Z_NO_FLUSH","short_name_offset":0,"short_name_size":10,"hover":"#define Z_NO_FLUSH      0","comments":"","declarations":[],"spell":"168:9-168:19|-1|1|2","extent":"168:9-168:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":16749793638187521617,"detailed_name":"Z_PARTIAL_FLUSH","short_name_offset":0,"short_name_size":15,"hover":"#define Z_PARTIAL_FLUSH 1","comments":"","declarations":[],"spell":"169:9-169:24|-1|1|2","extent":"169:9-169:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":16304140710341668211,"detailed_name":"Z_SYNC_FLUSH","short_name_offset":0,"short_name_size":12,"hover":"#define Z_SYNC_FLUSH    2","comments":"","declarations":[],"spell":"170:9-170:21|-1|1|2","extent":"170:9-170:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":9924312684105938308,"detailed_name":"Z_FULL_FLUSH","short_name_offset":0,"short_name_size":12,"hover":"#define Z_FULL_FLUSH    3","comments":"","declarations":[],"spell":"171:9-171:21|-1|1|2","extent":"171:9-171:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":12913952040594354945,"detailed_name":"Z_FINISH","short_name_offset":0,"short_name_size":8,"hover":"#define Z_FINISH        4","comments":"","declarations":[],"spell":"172:9-172:17|-1|1|2","extent":"172:9-172:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":1979394706623368013,"detailed_name":"Z_BLOCK","short_name_offset":0,"short_name_size":7,"hover":"#define Z_BLOCK         5","comments":"","declarations":[],"spell":"173:9-173:16|-1|1|2","extent":"173:9-173:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":2831646925654197788,"detailed_name":"Z_TREES","short_name_offset":0,"short_name_size":7,"hover":"#define Z_TREES         6","comments":"","declarations":[],"spell":"174:9-174:16|-1|1|2","extent":"174:9-174:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":5604014046612304578,"detailed_name":"Z_OK","short_name_offset":0,"short_name_size":4,"hover":"#define Z_OK            0","comments":"","declarations":[],"spell":"177:9-177:13|-1|1|2","extent":"177:9-177:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":5232412328289770973,"detailed_name":"Z_STREAM_END","short_name_offset":0,"short_name_size":12,"hover":"#define Z_STREAM_END    1","comments":"","declarations":[],"spell":"178:9-178:21|-1|1|2","extent":"178:9-178:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":2376444762436486245,"detailed_name":"Z_NEED_DICT","short_name_offset":0,"short_name_size":11,"hover":"#define Z_NEED_DICT     2","comments":"","declarations":[],"spell":"179:9-179:20|-1|1|2","extent":"179:9-179:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":16074232072408066500,"detailed_name":"Z_ERRNO","short_name_offset":0,"short_name_size":7,"hover":"#define Z_ERRNO        (-1)","comments":"","declarations":[],"spell":"180:9-180:16|-1|1|2","extent":"180:9-180:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":15436872012748318356,"detailed_name":"Z_STREAM_ERROR","short_name_offset":0,"short_name_size":14,"hover":"#define Z_STREAM_ERROR (-2)","comments":"","declarations":[],"spell":"181:9-181:23|-1|1|2","extent":"181:9-181:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":1393447844064525679,"detailed_name":"Z_DATA_ERROR","short_name_offset":0,"short_name_size":12,"hover":"#define Z_DATA_ERROR   (-3)","comments":"","declarations":[],"spell":"182:9-182:21|-1|1|2","extent":"182:9-182:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":13223082369157092737,"detailed_name":"Z_MEM_ERROR","short_name_offset":0,"short_name_size":11,"hover":"#define Z_MEM_ERROR    (-4)","comments":"","declarations":[],"spell":"183:9-183:20|-1|1|2","extent":"183:9-183:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":4787670356459790488,"detailed_name":"Z_BUF_ERROR","short_name_offset":0,"short_name_size":11,"hover":"#define Z_BUF_ERROR    (-5)","comments":"","declarations":[],"spell":"184:9-184:20|-1|1|2","extent":"184:9-184:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":1077363722468126386,"detailed_name":"Z_VERSION_ERROR","short_name_offset":0,"short_name_size":15,"hover":"#define Z_VERSION_ERROR (-6)","comments":"","declarations":[],"spell":"185:9-185:24|-1|1|2","extent":"185:9-185:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":4454890453605090471,"detailed_name":"Z_NO_COMPRESSION","short_name_offset":0,"short_name_size":16,"hover":"#define Z_NO_COMPRESSION         0","comments":"","declarations":[],"spell":"190:9-190:25|-1|1|2","extent":"190:9-190:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":14054274323643662996,"detailed_name":"Z_BEST_SPEED","short_name_offset":0,"short_name_size":12,"hover":"#define Z_BEST_SPEED             1","comments":"","declarations":[],"spell":"191:9-191:21|-1|1|2","extent":"191:9-191:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":58,"usr":5716937298651230568,"detailed_name":"Z_BEST_COMPRESSION","short_name_offset":0,"short_name_size":18,"hover":"#define Z_BEST_COMPRESSION       9","comments":"","declarations":[],"spell":"192:9-192:27|-1|1|2","extent":"192:9-192:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":59,"usr":14299430459481068694,"detailed_name":"Z_DEFAULT_COMPRESSION","short_name_offset":0,"short_name_size":21,"hover":"#define Z_DEFAULT_COMPRESSION  (-1)","comments":"","declarations":[],"spell":"193:9-193:30|-1|1|2","extent":"193:9-193:36|-1|1|0","uses":[],"kind":255,"storage":0},{"id":60,"usr":15945140501732117504,"detailed_name":"Z_FILTERED","short_name_offset":0,"short_name_size":10,"hover":"#define Z_FILTERED            1","comments":"","declarations":[],"spell":"196:9-196:19|-1|1|2","extent":"196:9-196:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":61,"usr":5207969457210604557,"detailed_name":"Z_HUFFMAN_ONLY","short_name_offset":0,"short_name_size":14,"hover":"#define Z_HUFFMAN_ONLY        2","comments":"","declarations":[],"spell":"197:9-197:23|-1|1|2","extent":"197:9-197:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":62,"usr":4634767701472793778,"detailed_name":"Z_RLE","short_name_offset":0,"short_name_size":5,"hover":"#define Z_RLE                 3","comments":"","declarations":[],"spell":"198:9-198:14|-1|1|2","extent":"198:9-198:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":63,"usr":4749934479028464175,"detailed_name":"Z_FIXED","short_name_offset":0,"short_name_size":7,"hover":"#define Z_FIXED               4","comments":"","declarations":[],"spell":"199:9-199:16|-1|1|2","extent":"199:9-199:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":64,"usr":213494544856629544,"detailed_name":"Z_DEFAULT_STRATEGY","short_name_offset":0,"short_name_size":18,"hover":"#define Z_DEFAULT_STRATEGY    0","comments":"","declarations":[],"spell":"200:9-200:27|-1|1|2","extent":"200:9-200:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":65,"usr":10982113487119235991,"detailed_name":"Z_BINARY","short_name_offset":0,"short_name_size":8,"hover":"#define Z_BINARY   0","comments":"","declarations":[],"spell":"203:9-203:17|-1|1|2","extent":"203:9-203:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":66,"usr":9489920594315581854,"detailed_name":"Z_TEXT","short_name_offset":0,"short_name_size":6,"hover":"#define Z_TEXT     1","comments":"","declarations":[],"spell":"204:9-204:15|-1|1|2","extent":"204:9-204:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":67,"usr":1409288783162281356,"detailed_name":"Z_ASCII","short_name_offset":0,"short_name_size":7,"hover":"#define Z_ASCII    Z_TEXT","comments":"","declarations":[],"spell":"205:9-205:16|-1|1|2","extent":"205:9-205:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":68,"usr":844078630489697043,"detailed_name":"Z_UNKNOWN","short_name_offset":0,"short_name_size":9,"hover":"#define Z_UNKNOWN  2","comments":"","declarations":[],"spell":"206:9-206:18|-1|1|2","extent":"206:9-206:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":69,"usr":771361629264645531,"detailed_name":"Z_DEFLATED","short_name_offset":0,"short_name_size":10,"hover":"#define Z_DEFLATED   8","comments":"","declarations":[],"spell":"209:9-209:19|-1|1|2","extent":"209:9-209:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":70,"usr":3605586191944868548,"detailed_name":"Z_NULL","short_name_offset":0,"short_name_size":6,"hover":"#define Z_NULL  0","comments":"","declarations":[],"spell":"212:9-212:15|-1|1|2","extent":"212:9-212:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":71,"usr":4872256544152144564,"detailed_name":"zlib_version","short_name_offset":0,"short_name_size":12,"hover":"#define zlib_version zlibVersion()","comments":"","declarations":[],"spell":"214:9-214:21|-1|1|2","extent":"214:9-214:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":72,"usr":12037183719815116223,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["220:1-220:8|-1|1|4","250:1-250:8|-1|1|4","363:1-363:8|-1|1|4","400:1-400:8|-1|1|4","520:1-520:8|-1|1|4","611:1-611:8|-1|1|4","655:1-655:8|-1|1|4","677:1-677:8|-1|1|4","695:1-695:8|-1|1|4","706:1-706:8|-1|1|4","743:1-743:8|-1|1|4","760:1-760:8|-1|1|4","775:1-775:8|-1|1|4","790:1-790:8|-1|1|4","807:1-807:8|-1|1|4","884:1-884:8|-1|1|4","907:1-907:8|-1|1|4","922:1-922:8|-1|1|4","941:1-941:8|-1|1|4","957:1-957:8|-1|1|4","967:1-967:8|-1|1|4","981:1-981:8|-1|1|4","1002:1-1002:8|-1|1|4","1030:1-1030:8|-1|1|4","1096:1-1096:8|-1|1|4","1166:1-1166:8|-1|1|4","1174:1-1174:8|-1|1|4","1227:1-1227:8|-1|1|4","1242:1-1242:8|-1|1|4","1258:1-1258:8|-1|1|4","1265:1-1265:8|-1|1|4","1283:1-1283:8|-1|1|4","1340:1-1340:8|-1|1|4","1363:1-1363:8|-1|1|4","1379:1-1379:8|-1|1|4","1390:1-1390:8|-1|1|4","1420:1-1420:8|-1|1|4","1446:1-1446:8|-1|1|4","1454:1-1454:8|-1|1|4","1468:1-1468:8|-1|1|4","1483:1-1483:8|-1|1|4","1491:1-1491:8|-1|1|4","1504:1-1504:8|-1|1|4","1510:1-1510:8|-1|1|4","1519:1-1519:8|-1|1|4","1531:1-1531:8|-1|1|4","1566:1-1566:8|-1|1|4","1594:1-1594:8|-1|1|4","1609:1-1609:8|-1|1|4","1630:1-1630:8|-1|1|4","1643:1-1643:8|-1|1|4","1644:1-1644:8|-1|1|4","1655:1-1655:8|-1|1|4","1671:1-1671:8|-1|1|4","1688:1-1688:8|-1|1|4","1707:1-1707:8|-1|1|4","1725:1-1725:8|-1|1|4","1742:1-1742:8|-1|1|4","1764:1-1764:8|-1|1|4","1766:1-1766:8|-1|1|4","1768:1-1768:8|-1|1|4","1772:1-1772:8|-1|1|4","1774:1-1774:8|-1|1|4","1822:1-1822:8|-1|1|4","1872:4-1872:11|-1|1|4","1873:4-1873:11|-1|1|4","1874:4-1874:11|-1|1|4","1875:4-1875:11|-1|1|4","1876:4-1876:11|-1|1|4","1877:4-1877:11|-1|1|4","1888:1-1888:8|-1|1|4","1889:1-1889:8|-1|1|4","1890:1-1890:8|-1|1|4","1891:1-1891:8|-1|1|4","1892:1-1892:8|-1|1|4","1893:1-1893:8|-1|1|4","1894:1-1894:8|-1|1|4","1895:1-1895:8|-1|1|4","1902:1-1902:8|-1|1|4"],"kind":0,"storage":0},{"id":73,"usr":11522159651627706389,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["220:22-220:29|-1|1|4","250:13-250:20|-1|1|4","363:13-363:20|-1|1|4","400:13-400:20|-1|1|4","520:13-520:20|-1|1|4","611:13-611:20|-1|1|4","655:13-655:20|-1|1|4","677:13-677:20|-1|1|4","695:13-695:20|-1|1|4","706:13-706:20|-1|1|4","743:13-743:20|-1|1|4","760:15-760:22|-1|1|4","775:13-775:20|-1|1|4","790:13-790:20|-1|1|4","807:13-807:20|-1|1|4","884:13-884:20|-1|1|4","907:13-907:20|-1|1|4","922:13-922:20|-1|1|4","941:13-941:20|-1|1|4","957:13-957:20|-1|1|4","967:13-967:20|-1|1|4","981:13-981:20|-1|1|4","1002:14-1002:21|-1|1|4","1030:13-1030:20|-1|1|4","1096:13-1096:20|-1|1|4","1166:13-1166:20|-1|1|4","1174:15-1174:22|-1|1|4","1227:13-1227:20|-1|1|4","1242:13-1242:20|-1|1|4","1258:15-1258:22|-1|1|4","1265:13-1265:20|-1|1|4","1283:13-1283:20|-1|1|4","1340:16-1340:23|-1|1|4","1363:13-1363:20|-1|1|4","1379:13-1379:20|-1|1|4","1390:13-1390:20|-1|1|4","1420:18-1420:25|-1|1|4","1446:13-1446:20|-1|1|4","1454:18-1454:25|-1|1|4","1483:13-1483:20|-1|1|4","1491:16-1491:23|-1|1|4","1504:13-1504:20|-1|1|4","1510:13-1510:20|-1|1|4","1519:13-1519:20|-1|1|4","1531:13-1531:20|-1|1|4","1566:13-1566:20|-1|1|4","1594:13-1594:20|-1|1|4","1609:13-1609:20|-1|1|4","1630:13-1630:20|-1|1|4","1643:13-1643:20|-1|1|4","1644:13-1644:20|-1|1|4","1655:22-1655:29|-1|1|4","1671:14-1671:21|-1|1|4","1688:15-1688:22|-1|1|4","1707:15-1707:22|-1|1|4","1725:15-1725:22|-1|1|4","1742:15-1742:22|-1|1|4","1764:13-1764:20|-1|1|4","1766:13-1766:20|-1|1|4","1768:13-1768:20|-1|1|4","1772:13-1772:20|-1|1|4","1774:13-1774:20|-1|1|4","1822:13-1822:20|-1|1|4","1872:19-1872:26|-1|1|4","1873:20-1873:27|-1|1|4","1874:20-1874:27|-1|1|4","1875:20-1875:27|-1|1|4","1876:18-1876:25|-1|1|4","1877:18-1877:25|-1|1|4","1888:24-1888:31|-1|1|4","1889:24-1889:31|-1|1|4","1890:29-1890:36|-1|1|4","1891:24-1891:31|-1|1|4","1892:24-1892:31|-1|1|4","1893:24-1893:31|-1|1|4","1894:24-1894:31|-1|1|4","1895:24-1895:31|-1|1|4"],"kind":0,"storage":0},{"id":74,"usr":5657746987981595609,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1468:13-1468:22|-1|1|4","1902:24-1902:33|-1|1|4"],"kind":0,"storage":0},{"id":75,"usr":7472900199677386419,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1468:32-1468:37|-1|1|4","1902:44-1902:49|-1|1|4"],"kind":0,"storage":0},{"id":76,"usr":15116824886921577339,"detailed_name":"deflateInit","short_name_offset":0,"short_name_size":11,"hover":"#define deflateInit(strm, level)\n          deflateInit_((strm), (level), ZLIB_VERSION, (int)sizeof(z_stream))","comments":"","declarations":[],"spell":"1793:11-1793:22|-1|1|2","extent":"1793:11-1794:77|-1|1|0","uses":[],"kind":255,"storage":0},{"id":77,"usr":13455490614888362667,"detailed_name":"inflateInit","short_name_offset":0,"short_name_size":11,"hover":"#define inflateInit(strm)\n          inflateInit_((strm), ZLIB_VERSION, (int)sizeof(z_stream))","comments":"","declarations":[],"spell":"1795:11-1795:22|-1|1|2","extent":"1795:11-1796:68|-1|1|0","uses":[],"kind":255,"storage":0},{"id":78,"usr":7125284505305439169,"detailed_name":"deflateInit2","short_name_offset":0,"short_name_size":12,"hover":"#define deflateInit2(strm, level, method, windowBits, memLevel, strategy)\n          deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\n                        (strategy), ZLIB_VERSION, (int)sizeof(z_stream))","comments":"","declarations":[],"spell":"1797:11-1797:23|-1|1|2","extent":"1797:11-1799:73|-1|1|0","uses":[],"kind":255,"storage":0},{"id":79,"usr":10796093569785080313,"detailed_name":"inflateInit2","short_name_offset":0,"short_name_size":12,"hover":"#define inflateInit2(strm, windowBits)\n          inflateInit2_((strm), (windowBits), ZLIB_VERSION,\n                        (int)sizeof(z_stream))","comments":"","declarations":[],"spell":"1800:11-1800:23|-1|1|2","extent":"1800:11-1802:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":80,"usr":14593451207299143325,"detailed_name":"inflateBackInit","short_name_offset":0,"short_name_size":15,"hover":"#define inflateBackInit(strm, windowBits, window)\n          inflateBackInit_((strm), (windowBits), (window),\n                           ZLIB_VERSION, (int)sizeof(z_stream))","comments":"","declarations":[],"spell":"1803:11-1803:26|-1|1|2","extent":"1803:11-1805:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":81,"usr":10564298975181614486,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1820:5-1820:14|-1|1|4"],"kind":0,"storage":0},{"id":82,"usr":11432541382876047698,"detailed_name":"gzgetc","short_name_offset":0,"short_name_size":6,"hover":"#define gzgetc(g)\n          ((g)->have ? ((g)->have--, (g)->pos++, *((g)->next)++) : (gzgetc)(g))","comments":"","declarations":[],"spell":"1828:11-1828:17|-1|1|2","extent":"1828:11-1829:80|-1|1|0","uses":[],"kind":255,"storage":0},{"id":83,"usr":11747820796456792509,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1847:14-1847:27|-1|1|4"],"kind":0,"storage":0},{"id":84,"usr":15206467459609604184,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1873:12-1873:19|-1|1|4","1873:47-1873:54|-1|1|4","1874:12-1874:19|-1|1|4","1875:12-1875:19|-1|1|4","1876:60-1876:67|-1|1|4","1877:58-1877:65|-1|1|4"],"kind":0,"storage":0},{"id":85,"usr":13840568915034939877,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1900:13-1900:17|-1|1|4"],"kind":0,"storage":0},{"id":86,"usr":16017489286568132637,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["1900:30-1900:45|-1|1|4"],"kind":0,"storage":0}]}