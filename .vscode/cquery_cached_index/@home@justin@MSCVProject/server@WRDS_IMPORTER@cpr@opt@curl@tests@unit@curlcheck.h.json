16
{"last_modification_time":1548181616,"language":1,"import_file":"/home/justin/MSCVProject/server/WRDS_IMPORTER/cpr/opt/curl/tests/unit/unit1304.c","args_hash":10433645398913005206,"includes":[],"dependencies":["/home/justin/MSCVProject/server/WRDS_IMPORTER/cpr/opt/curl/tests/unit/unit1304.c"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0],"uses":[]}],"funcs":[],"vars":[{"id":0,"usr":14600853591681817002,"detailed_name":"int unitfail","short_name_offset":4,"short_name_size":8,"hover":"","comments":"","declarations":["84:12-84:20|-1|1|1"],"type":0,"uses":[],"kind":13,"storage":2},{"id":1,"usr":1955284816410828546,"detailed_name":"fail_if","short_name_offset":0,"short_name_size":7,"hover":"#define fail_if(expr, msg)\n  if(expr) {\n    fprintf(stderr, \"%s:%d Assertion '%s' met: %s\\n\",\n            __FILE__, __LINE__, #expr, msg);\n    unitfail++;\n  }","comments":"","declarations":[],"spell":"25:9-25:16|-1|1|2","extent":"25:9-30:4|-1|1|0","uses":[],"kind":255,"storage":0},{"id":2,"usr":14627347547982980361,"detailed_name":"fail_unless","short_name_offset":0,"short_name_size":11,"hover":"#define fail_unless(expr, msg)\n  if(!(expr)) {\n    fprintf(stderr, \"%s:%d Assertion '%s' failed: %s\\n\",\n            __FILE__, __LINE__, #expr, msg);\n    unitfail++;\n  }","comments":"","declarations":[],"spell":"32:9-32:20|-1|1|2","extent":"32:9-37:4|-1|1|0","uses":[],"kind":255,"storage":0},{"id":3,"usr":8703196728635489693,"detailed_name":"verify_memory","short_name_offset":0,"short_name_size":13,"hover":"#define verify_memory(dynamic, check, len)\n  if(dynamic && memcmp(dynamic, check, len)) {\n    fprintf(stderr, \"%s:%d Memory buffer mismatch size %d. '%s' is not\\n\",\n            __FILE__, __LINE__, len,\n            hexdump((const unsigned char *)check, len));\n    fprintf(stderr, \"%s:%d the same as '%s'\\n\", __FILE__, __LINE__,\n            hexdump((const unsigned char *)dynamic, len));\n    unitfail++;\n  }","comments":"","declarations":[],"spell":"39:9-39:22|-1|1|2","extent":"39:9-47:4|-1|1|0","uses":[],"kind":255,"storage":0},{"id":4,"usr":13311394853731420171,"detailed_name":"fail","short_name_offset":0,"short_name_size":4,"hover":"#define fail(msg) do {\n    fprintf(stderr, \"%s:%d test failed: '%s'\\n\",\n            __FILE__, __LINE__, msg);\n    unitfail++;\n  } WHILE_FALSE","comments":"","declarations":[],"spell":"51:9-51:13|-1|1|2","extent":"51:9-55:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":5,"usr":13755094719029276142,"detailed_name":"abort_if","short_name_offset":0,"short_name_size":8,"hover":"#define abort_if(expr, msg)\n  if(expr) {\n    fprintf(stderr, \"%s:%d Abort assertion '%s' met: %s\\n\",\n            __FILE__, __LINE__, #expr, msg);\n    unitfail++;\n    goto unit_test_abort;\n  }","comments":"","declarations":[],"spell":"59:9-59:17|-1|1|2","extent":"59:9-65:4|-1|1|0","uses":[],"kind":255,"storage":0},{"id":6,"usr":5009741819077384160,"detailed_name":"abort_unless","short_name_offset":0,"short_name_size":12,"hover":"#define abort_unless(expr, msg)\n  if(!(expr)) {\n    fprintf(stderr, \"%s:%d Abort assertion '%s' failed: %s\\n\",\n            __FILE__, __LINE__, #expr, msg);\n    unitfail++;\n    goto unit_test_abort;\n  }","comments":"","declarations":[],"spell":"67:9-67:21|-1|1|2","extent":"67:9-73:4|-1|1|0","uses":[],"kind":255,"storage":0},{"id":7,"usr":8223770013153881612,"detailed_name":"abort_test","short_name_offset":0,"short_name_size":10,"hover":"#define abort_test(msg) do {\n    fprintf(stderr, \"%s:%d test aborted: '%s'\\n\",\n            __FILE__, __LINE__, msg);\n    unitfail++;\n    goto unit_test_abort;\n  } WHILE_FALSE","comments":"","declarations":[],"spell":"75:9-75:19|-1|1|2","extent":"75:9-80:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":8,"usr":2032743978943733582,"detailed_name":"UNITTEST_START","short_name_offset":0,"short_name_size":14,"hover":"#define UNITTEST_START\n  int test(char *arg)\n  {\n    (void)arg;\n    if(unit_setup()) {\n      fail(\"unit_setup() failure\");\n    }\n    else {","comments":"","declarations":[],"spell":"86:9-86:23|-1|1|2","extent":"86:9-93:11|-1|1|0","uses":[],"kind":255,"storage":0},{"id":9,"usr":9670485600086511366,"detailed_name":"UNITTEST_STOP","short_name_offset":0,"short_name_size":13,"hover":"#define UNITTEST_STOP\n    goto unit_test_abort; /* avoid warning */   unit_test_abort:\n    unit_stop();\n  }\n  return unitfail;\n  }","comments":"","declarations":[],"spell":"95:9-95:22|-1|1|2","extent":"95:9-101:4|-1|1|0","uses":[],"kind":255,"storage":0}]}