16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/tests/test-mongoc-version.c","args_hash":10433645398913005206,"includes":[{"line":22,"resolved_path":"/usr/include/stdio.h"},{"line":23,"resolved_path":"/usr/include/math.h"},{"line":24,"resolved_path":"/usr/include/stdlib.h"}],"dependencies":["/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/tests/test-mongoc-version.c"],"skipped_by_preprocessor":["30:1-32:7","60:1-79:6","153:1-155:7","159:1-161:7","287:1-289:7","309:1-311:7","529:1-531:6","712:1-714:7"],"types":[{"id":0,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":9922302970834612110,"detailed_name":"TestFunc","short_name_offset":0,"short_name_size":8,"kind":252,"hover":"typedef void (*TestFunc) (void)","comments":"","declarations":[],"spell":"627:16-627:24|-1|1|2","extent":"627:1-627:32|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["627:16-627:24|-1|1|4","664:52-664:60|-1|1|4","668:56-668:64|-1|1|4","674:31-674:39|-1|1|4"]},{"id":2,"usr":807792426875388324,"detailed_name":"TestFuncWC","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void (*TestFuncWC) (void *)","comments":"","declarations":[],"spell":"628:16-628:26|-1|1|2","extent":"628:1-628:36|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2],"uses":["628:16-628:26|-1|1|4","638:4-638:14|-1|1|4","681:18-681:28|-1|1|4","687:23-687:33|-1|1|4","694:21-694:31|-1|1|4"]},{"id":3,"usr":17835919009549943651,"detailed_name":"TestFuncDtor","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef void (*TestFuncDtor) (void *)","comments":"","declarations":[],"spell":"629:16-629:28|-1|1|2","extent":"629:1-629:38|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[3],"uses":["629:16-629:28|-1|1|4","639:4-639:16|-1|1|4","682:18-682:30|-1|1|4","688:23-688:35|-1|1|4","695:21-695:33|-1|1|4"]},{"id":4,"usr":17398265022419785944,"detailed_name":"CheckFunc","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef int (*CheckFunc) (void)","comments":"","declarations":[],"spell":"630:15-630:24|-1|1|2","extent":"630:1-630:32|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[7],"uses":["630:15-630:24|-1|1|4","643:4-643:13|-1|1|4"]},{"id":5,"usr":1194792558724350569,"detailed_name":"_Test","short_name_offset":0,"short_name_size":5,"kind":23,"hover":"","comments":"","declarations":[],"spell":"635:8-635:13|-1|1|2","extent":"635:1-645:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2,3,4,5,6,7,8],"instances":[],"uses":["631:16-631:21|-1|1|4"]},{"id":6,"usr":11327773633039785144,"detailed_name":"Test","short_name_offset":0,"short_name_size":4,"kind":252,"hover":"typedef struct _Test Test","comments":"","declarations":[],"spell":"631:22-631:26|-1|1|2","extent":"631:1-631:26|-1|1|0","alias_of":5,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,12],"uses":["631:22-631:26|-1|1|4","636:4-636:8|-1|1|4","652:4-652:8|-1|1|4","684:1-684:5|-1|1|4"]},{"id":7,"usr":13667796229622660,"detailed_name":"_TestSuite","short_name_offset":0,"short_name_size":10,"kind":23,"hover":"","comments":"","declarations":[],"spell":"648:8-648:18|-1|1|2","extent":"648:1-658:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[9,10,11,12,13,14,15,16,17],"instances":[],"uses":["632:16-632:26|-1|1|4"]},{"id":8,"usr":4517479008532092553,"detailed_name":"TestSuite","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"typedef struct _TestSuite TestSuite","comments":"","declarations":[],"spell":"632:27-632:36|-1|1|2","extent":"632:1-632:36|-1|1|0","alias_of":7,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["632:27-632:36|-1|1|4","662:17-662:26|-1|1|4","664:16-664:25|-1|1|4","668:20-668:29|-1|1|4","672:31-672:40|-1|1|4","679:18-679:27|-1|1|4","685:23-685:32|-1|1|4","692:21-692:30|-1|1|4","701:16-701:25|-1|1|4","703:20-703:29|-1|1|4"]},{"id":9,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,9,10,11],"uses":[]},{"id":10,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[4],"uses":[]},{"id":11,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[5,8,13,14,15,16,17],"uses":[]},{"id":12,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6],"uses":[]}],"funcs":[{"id":0,"usr":11352860505335169371,"detailed_name":"void TestSuite_Init(TestSuite *suite, const char *name, int argc, char **argv)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"662:1-662:15|-1|1|1","param_spellings":["662:28-662:33","662:47-662:51","662:57-662:61","662:70-662:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":14025986464920504861,"detailed_name":"void TestSuite_Add(TestSuite *suite, const char *name, TestFunc func)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"664:1-664:14|-1|1|1","param_spellings":["664:27-664:32","664:46-664:50","664:61-664:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":3693011188921565610,"detailed_name":"int TestSuite_CheckLive()","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"666:1-666:20|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":10931844064801635230,"detailed_name":"void TestSuite_AddLive(TestSuite *suite, const char *name, TestFunc func)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"668:1-668:18|-1|1|1","param_spellings":["668:31-668:36","668:50-668:54","668:65-668:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":3395162173534673785,"detailed_name":"int TestSuite_CheckMockServerAllowed()","short_name_offset":4,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"670:1-670:33|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":7993272790431031576,"detailed_name":"void _TestSuite_AddMockServerTest(TestSuite *suite, const char *name, TestFunc func, ...)","short_name_offset":5,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"672:1-672:29|-1|1|1","param_spellings":["672:42-672:47","673:43-673:47","674:40-674:44"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":2044283681339628212,"detailed_name":"void TestSuite_AddWC(TestSuite *suite, const char *name, TestFuncWC func, TestFuncDtor dtor, void *ctx)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"679:1-679:16|-1|1|1","param_spellings":["679:29-679:34","680:30-680:34","681:29-681:33","682:31-682:35","683:24-683:27"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":3211691544314138345,"detailed_name":"Test *_V_TestSuite_AddFull(TestSuite *suite, const char *name, TestFuncWC func, TestFuncDtor dtor, void *ctx, int ap)","short_name_offset":6,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"685:1-685:21|-1|1|1","param_spellings":["685:34-685:39","686:35-686:39","687:34-687:38","688:36-688:40","689:29-689:32","690:31-690:33"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":5144036756141411698,"detailed_name":"void _TestSuite_AddFull(TestSuite *suite, const char *name, TestFuncWC func, TestFuncDtor dtor, void *ctx, ...)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"692:1-692:19|-1|1|1","param_spellings":["692:32-692:37","693:33-693:37","694:32-694:36","695:34-695:38","696:27-696:30"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":4333508393603121210,"detailed_name":"int TestSuite_Run(TestSuite *suite)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"701:1-701:14|-1|1|1","param_spellings":["701:27-701:32"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":6394153313357601583,"detailed_name":"void TestSuite_Destroy(TestSuite *suite)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"703:1-703:18|-1|1|1","param_spellings":["703:31-703:36"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":4927418932790473283,"detailed_name":"int test_suite_debug_output()","short_name_offset":4,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"706:1-706:24|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":4105745808225484941,"detailed_name":"int test_suite_valgrind()","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"708:1-708:20|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":4319378772069672951,"detailed_name":"void test_suite_mock_server_log(const char *msg, ...)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"","declarations":[{"spell":"710:1-710:27|-1|1|1","param_spellings":["710:41-710:44"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":15774671474984834219,"detailed_name":"Test *_Test::next","short_name_offset":13,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"636:10-636:14|5|2|2","extent":"636:4-636:14|5|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":1,"usr":10325430833043902171,"detailed_name":"char *_Test::name","short_name_offset":13,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"637:10-637:14|5|2|2","extent":"637:4-637:14|5|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":2,"usr":18343426462170049007,"detailed_name":"TestFuncWC _Test::func","short_name_offset":18,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"638:15-638:19|5|2|2","extent":"638:4-638:19|5|2|0","type":2,"uses":[],"kind":8,"storage":0},{"id":3,"usr":779969598788783108,"detailed_name":"TestFuncDtor _Test::dtor","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"639:17-639:21|5|2|2","extent":"639:4-639:21|5|2|0","type":3,"uses":[],"kind":8,"storage":0},{"id":4,"usr":1375944657050405968,"detailed_name":"void *_Test::ctx","short_name_offset":13,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"640:10-640:13|5|2|2","extent":"640:4-640:13|5|2|0","type":10,"uses":[],"kind":8,"storage":0},{"id":5,"usr":11401967195492599392,"detailed_name":"int _Test::exit_code","short_name_offset":11,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"641:8-641:17|5|2|2","extent":"641:4-641:17|5|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":6,"usr":9373651585647980938,"detailed_name":"unsigned int _Test::seed","short_name_offset":20,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"642:13-642:17|5|2|2","extent":"642:4-642:17|5|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":7,"usr":10335639156554619079,"detailed_name":"CheckFunc [10] _Test::checks","short_name_offset":22,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"643:14-643:20|5|2|2","extent":"643:4-643:42|5|2|0","type":4,"uses":[],"kind":8,"storage":0},{"id":8,"usr":12941195213044160593,"detailed_name":"int _Test::num_checks","short_name_offset":11,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"644:11-644:21|5|2|2","extent":"644:4-644:21|5|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":9,"usr":4369342708553251858,"detailed_name":"char *_TestSuite::prgname","short_name_offset":18,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"649:10-649:17|7|2|2","extent":"649:4-649:17|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":10,"usr":1264344660670083397,"detailed_name":"char *_TestSuite::name","short_name_offset":18,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"650:10-650:14|7|2|2","extent":"650:4-650:14|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":11,"usr":9944983943332001603,"detailed_name":"char *_TestSuite::testname","short_name_offset":18,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"651:10-651:18|7|2|2","extent":"651:4-651:18|7|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":12,"usr":18062267544843236838,"detailed_name":"Test *_TestSuite::tests","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"652:10-652:15|7|2|2","extent":"652:4-652:15|7|2|0","type":6,"uses":[],"kind":8,"storage":0},{"id":13,"usr":9417932408068750355,"detailed_name":"int *_TestSuite::outfile","short_name_offset":17,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"653:10-653:17|7|2|2","extent":"653:4-653:17|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":14,"usr":12282410199933509367,"detailed_name":"int _TestSuite::flags","short_name_offset":16,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"654:8-654:13|7|2|2","extent":"654:4-654:13|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":15,"usr":12517655893818589729,"detailed_name":"int _TestSuite::silent","short_name_offset":16,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"655:8-655:14|7|2|2","extent":"655:4-655:14|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":16,"usr":1333517160489855135,"detailed_name":"int *_TestSuite::mock_server_log_buf","short_name_offset":17,"short_name_size":19,"hover":"","comments":"","declarations":[],"spell":"656:19-656:38|7|2|2","extent":"656:4-656:38|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":17,"usr":14827358024750117225,"detailed_name":"int *_TestSuite::mock_server_log","short_name_offset":17,"short_name_size":15,"hover":"","comments":"","declarations":[],"spell":"657:10-657:25|7|2|2","extent":"657:4-657:25|7|2|0","type":11,"uses":[],"kind":8,"storage":0},{"id":18,"usr":4988817526589346029,"detailed_name":"TEST_SUITE_H","short_name_offset":0,"short_name_size":12,"hover":"#define TEST_SUITE_H","comments":"","declarations":[],"spell":"19:9-19:21|-1|1|2","extent":"19:9-19:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":19,"usr":5795459489702401866,"detailed_name":"OS_RELEASE_FILE_DIR","short_name_offset":0,"short_name_size":19,"hover":"#define OS_RELEASE_FILE_DIR \"src/libmongoc/tests/release_files\"","comments":"","declarations":[],"spell":"35:9-35:28|-1|1|2","extent":"35:9-35:64|-1|1|0","uses":[],"kind":255,"storage":0},{"id":20,"usr":13552102596496791940,"detailed_name":"BINARY_DIR","short_name_offset":0,"short_name_size":10,"hover":"#define BINARY_DIR \"src/libmongoc/tests/binary\"","comments":"","declarations":[],"spell":"40:9-40:19|-1|1|2","extent":"40:9-40:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":21,"usr":9061056452611251654,"detailed_name":"BSON_BINARY_DIR","short_name_offset":0,"short_name_size":15,"hover":"#define BSON_BINARY_DIR \"src/libbson/tests/binary\"","comments":"","declarations":[],"spell":"44:9-44:24|-1|1|2","extent":"44:9-44:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":15776230982603589322,"detailed_name":"JSON_DIR","short_name_offset":0,"short_name_size":8,"hover":"#define JSON_DIR \"src/libmongoc/tests/json\"","comments":"","declarations":[],"spell":"48:9-48:17|-1|1|2","extent":"48:9-48:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":6935163390463758673,"detailed_name":"BSON_JSON_DIR","short_name_offset":0,"short_name_size":13,"hover":"#define BSON_JSON_DIR \"src/libbson/tests/json\"","comments":"","declarations":[],"spell":"52:9-52:22|-1|1|2","extent":"52:9-52:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":24,"usr":4466366699893814394,"detailed_name":"CERT_TEST_DIR","short_name_offset":0,"short_name_size":13,"hover":"#define CERT_TEST_DIR \"src/libmongoc/tests/x509gen\"","comments":"","declarations":[],"spell":"56:9-56:22|-1|1|2","extent":"56:9-56:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":25,"usr":30736519844022724,"detailed_name":"bson_open","short_name_offset":0,"short_name_size":9,"hover":"#define bson_open open","comments":"","declarations":[],"spell":"80:9-80:18|-1|1|2","extent":"80:9-80:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":26,"usr":17357806744178147499,"detailed_name":"bson_read","short_name_offset":0,"short_name_size":9,"hover":"#define bson_read read","comments":"","declarations":[],"spell":"81:9-81:18|-1|1|2","extent":"81:9-81:23|-1|1|0","uses":[],"kind":255,"storage":0},{"id":27,"usr":5399126959010107019,"detailed_name":"bson_close","short_name_offset":0,"short_name_size":10,"hover":"#define bson_close close","comments":"","declarations":[],"spell":"82:9-82:19|-1|1|2","extent":"82:9-82:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":28,"usr":5804696976600929721,"detailed_name":"bson_write","short_name_offset":0,"short_name_size":10,"hover":"#define bson_write write","comments":"","declarations":[],"spell":"83:9-83:19|-1|1|2","extent":"83:9-83:25|-1|1|0","uses":[],"kind":255,"storage":0},{"id":29,"usr":11062581543739068671,"detailed_name":"CERT_CA","short_name_offset":0,"short_name_size":7,"hover":"#define CERT_CA CERT_TEST_DIR \"/ca.pem\"","comments":"","declarations":[],"spell":"87:9-87:16|-1|1|2","extent":"87:9-87:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":30,"usr":4361345903403569122,"detailed_name":"CERT_CRL","short_name_offset":0,"short_name_size":8,"hover":"#define CERT_CRL CERT_TEST_DIR \"/crl.pem\"","comments":"","declarations":[],"spell":"88:9-88:17|-1|1|2","extent":"88:9-88:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":3529295793971640297,"detailed_name":"CERT_SERVER","short_name_offset":0,"short_name_size":11,"hover":"#define CERT_SERVER CERT_TEST_DIR \"/server.pem\"","comments":"","declarations":[],"spell":"89:9-89:20|-1|1|2","extent":"89:9-89:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":4076424767377308014,"detailed_name":"CERT_CLIENT","short_name_offset":0,"short_name_size":11,"hover":"#define CERT_CLIENT CERT_TEST_DIR \"/client.pem\"","comments":"","declarations":[],"spell":"90:9-90:20|-1|1|2","extent":"90:9-90:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":1924858095357443465,"detailed_name":"CERT_ALTNAME","short_name_offset":0,"short_name_size":12,"hover":"#define CERT_ALTNAME\n   CERT_TEST_DIR \"/altname.pem\"","comments":"","declarations":[],"spell":"91:9-91:21|-1|1|2","extent":"91:9-92:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":34,"usr":285622523790742808,"detailed_name":"CERT_WILD","short_name_offset":0,"short_name_size":9,"hover":"#define CERT_WILD CERT_TEST_DIR \"/wild.pem\"","comments":"","declarations":[],"spell":"94:9-94:18|-1|1|2","extent":"94:9-94:44|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":8497942791998536530,"detailed_name":"CERT_COMMONNAME","short_name_offset":0,"short_name_size":15,"hover":"#define CERT_COMMONNAME\n   CERT_TEST_DIR \"/commonName.pem\"","comments":"","declarations":[],"spell":"95:9-95:24|-1|1|2","extent":"95:9-96:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":2206834559006905732,"detailed_name":"CERT_EXPIRED","short_name_offset":0,"short_name_size":12,"hover":"#define CERT_EXPIRED CERT_TEST_DIR \"/expired.pem\"","comments":"","declarations":[],"spell":"97:9-97:21|-1|1|2","extent":"97:9-97:50|-1|1|0","uses":[],"kind":255,"storage":0},{"id":37,"usr":5158606981062557411,"detailed_name":"CERT_PASSWORD","short_name_offset":0,"short_name_size":13,"hover":"#define CERT_PASSWORD \"qwerty\"","comments":"","declarations":[],"spell":"98:9-98:22|-1|1|2","extent":"98:9-98:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":38,"usr":11897076252188030774,"detailed_name":"CERT_PASSWORD_PROTECTED","short_name_offset":0,"short_name_size":23,"hover":"#define CERT_PASSWORD_PROTECTED CERT_TEST_DIR \"/password_protected.pem\"","comments":"","declarations":[],"spell":"99:9-99:32|-1|1|2","extent":"99:9-99:72|-1|1|0","uses":[],"kind":255,"storage":0},{"id":39,"usr":10308616757814316773,"detailed_name":"bson_eq_bson","short_name_offset":0,"short_name_size":12,"hover":"#define bson_eq_bson(bson, expected)\n   do {\n      char *bson_json, *expected_json;\n      const uint8_t *bson_data = bson_get_data ((bson));\n      const uint8_t *expected_data = bson_get_data ((expected));\n      int unequal;\n      unsigned o;\n      int off = -1;\n      unequal = ((expected)->len != (bson)->len) ||\n                memcmp (bson_get_data ((expected)),\n                        bson_get_data ((bson)),\n                        (expected)->len);\n      if (unequal) {\n         bson_json = bson_as_canonical_extended_json (bson, NULL);\n         expected_json = bson_as_canonical_extended_json ((expected), NULL);\n         for (o = 0; o < (bson)->len && o < (expected)->len; o++) {\n            if (bson_data[o] != expected_data[o]) {\n               off = o;\n               break;\n            }\n         }\n         if (off == -1) {\n            off = BSON_MAX ((expected)->len, (bson)->len) - 1;\n         }\n         fprintf (stderr,\n                  \"bson objects unequal (byte %u):\\n(%s)\\n(%s)\\n\",\n                  off,\n                  bson_json,\n                  expected_json);\n         {\n            int fd1 = bson_open (\"failure.bad.bson\", O_RDWR | O_CREAT, 0640);\n            int fd2 =\n               bson_open (\"failure.expected.bson\", O_RDWR | O_CREAT, 0640);\n            BSON_ASSERT (fd1 != -1);\n            BSON_ASSERT (fd2 != -1);\n            BSON_ASSERT ((bson)->len ==\n                         bson_write (fd1, bson_data, (bson)->len));\n            BSON_ASSERT ((expected)->len ==\n                         bson_write (fd2, expected_data, (expected)->len));\n            bson_close (fd1);\n            bson_close (fd2);\n         }\n         BSON_ASSERT (0);\n      }\n   } while (0)","comments":"","declarations":[],"spell":"106:9-106:21|-1|1|2","extent":"106:9-150:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":40,"usr":15466244007444868440,"detailed_name":"ASSERT","short_name_offset":0,"short_name_size":6,"hover":"#define ASSERT BSON_ASSERT","comments":"","declarations":[],"spell":"156:9-156:15|-1|1|2","extent":"156:9-156:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":18306310060582006729,"detailed_name":"ASSERT_OR_PRINT","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_OR_PRINT(_statement, _err)\n   do {\n      if (!(_statement)) {\n         fprintf (stderr,\n                  \"FAIL:%s:%d  %s()\\n  %s\\n  %s\\n\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  #_statement,\n                  _err.message);\n         fflush (stderr);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"163:9-163:24|-1|1|2","extent":"163:9-176:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":3213984514792249193,"detailed_name":"ASSERT_CURSOR_NEXT","short_name_offset":0,"short_name_size":18,"hover":"#define ASSERT_CURSOR_NEXT(_cursor, _doc)\n   do {\n      bson_error_t _err;\n      if (!mongoc_cursor_next ((_cursor), (_doc))) {\n         if (mongoc_cursor_error ((_cursor), &_err)) {\n            fprintf (stderr,\n                     \"FAIL:%s:%d  %s()\\n  %s\\n\\n\",\n                     __FILE__,\n                     __LINE__,\n                     BSON_FUNC,\n                     _err.message);\n         } else {\n            fprintf (stderr,\n                     \"FAIL:%s:%d  %s()\\n  %s\\n\\n\",\n                     __FILE__,\n                     __LINE__,\n                     BSON_FUNC,\n                     \"empty cursor\");\n         }\n         fflush (stderr);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"178:9-178:27|-1|1|2","extent":"178:9-200:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":15647035234130175550,"detailed_name":"ASSERT_CURSOR_DONE","short_name_offset":0,"short_name_size":18,"hover":"#define ASSERT_CURSOR_DONE(_cursor)\n   do {\n      bson_error_t _err;\n      const bson_t *_doc;\n      if (mongoc_cursor_next ((_cursor), &_doc)) {\n         fprintf (stderr,\n                  \"FAIL:%s:%d  %s()\\n  %s\\n\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  \"non-empty cursor\");\n         fflush (stderr);\n         abort ();\n      }\n      if (mongoc_cursor_error ((_cursor), &_err)) {\n         fprintf (stderr,\n                  \"FAIL:%s:%d  %s()\\n  %s\\n\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  _err.message);\n         fflush (stderr);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"203:9-203:27|-1|1|2","extent":"203:9-227:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":7738033760435054080,"detailed_name":"ASSERT_CMPINT_HELPER","short_name_offset":0,"short_name_size":20,"hover":"#define ASSERT_CMPINT_HELPER(a, eq, b, fmt, type)\n   do {\n      /* evaluate once */\n      type _a = a;\n      type _b = b;\n      if (!((_a) eq (_b))) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: %\" fmt \" %s %\" fmt \"\\n\"\n                  \"%s:%d  %s()\\n\",\n                  _a,\n                  #eq,\n                  _b,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"230:9-230:29|-1|1|2","extent":"230:9-247:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":524073817048959283,"detailed_name":"ASSERT_CMPINT","short_name_offset":0,"short_name_size":13,"hover":"#define ASSERT_CMPINT(a, eq, b) ASSERT_CMPINT_HELPER (a, eq, b, \"d\", int)","comments":"","declarations":[],"spell":"250:9-250:22|-1|1|2","extent":"250:9-250:74|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":4300281580588773242,"detailed_name":"ASSERT_CMPUINT","short_name_offset":0,"short_name_size":14,"hover":"#define ASSERT_CMPUINT(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, \"u\", unsigned int)","comments":"","declarations":[],"spell":"251:9-251:23|-1|1|2","extent":"251:9-252:54|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":13794715972433575410,"detailed_name":"ASSERT_CMPLONG","short_name_offset":0,"short_name_size":14,"hover":"#define ASSERT_CMPLONG(a, eq, b) ASSERT_CMPINT_HELPER (a, eq, b, \"ld\", long)","comments":"","declarations":[],"spell":"253:9-253:23|-1|1|2","extent":"253:9-253:77|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":366093113647079918,"detailed_name":"ASSERT_CMPULONG","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_CMPULONG(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, \"lu\", unsigned long)","comments":"","declarations":[],"spell":"254:9-254:24|-1|1|2","extent":"254:9-255:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":4771624696734446226,"detailed_name":"ASSERT_CMPINT32","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_CMPINT32(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, PRId32, int32_t)","comments":"","declarations":[],"spell":"256:9-256:24|-1|1|2","extent":"256:9-257:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":14438177607302771551,"detailed_name":"ASSERT_CMPINT64","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_CMPINT64(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, PRId64, int64_t)","comments":"","declarations":[],"spell":"258:9-258:24|-1|1|2","extent":"258:9-259:52|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":13451408691759443978,"detailed_name":"ASSERT_CMPUINT16","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_CMPUINT16(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, \"hu\", uint16_t)","comments":"","declarations":[],"spell":"260:9-260:25|-1|1|2","extent":"260:9-261:51|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":13844622703549431092,"detailed_name":"ASSERT_CMPUINT32","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_CMPUINT32(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, PRIu32, uint32_t)","comments":"","declarations":[],"spell":"262:9-262:25|-1|1|2","extent":"262:9-263:53|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":4642190995701601013,"detailed_name":"ASSERT_CMPUINT64","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_CMPUINT64(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, PRIu64, uint64_t)","comments":"","declarations":[],"spell":"264:9-264:25|-1|1|2","extent":"264:9-265:53|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":282709477069520212,"detailed_name":"ASSERT_CMPSIZE_T","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_CMPSIZE_T(a, eq, b) ASSERT_CMPINT_HELPER (a, eq, b, \"zd\", size_t)","comments":"","declarations":[],"spell":"266:9-266:25|-1|1|2","extent":"266:9-266:81|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":8154720676095787991,"detailed_name":"ASSERT_CMPSSIZE_T","short_name_offset":0,"short_name_size":17,"hover":"#define ASSERT_CMPSSIZE_T(a, eq, b)\n   ASSERT_CMPINT_HELPER (a, eq, b, \"zx\", ssize_t)","comments":"","declarations":[],"spell":"267:9-267:26|-1|1|2","extent":"267:9-268:50|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":8494016282126701723,"detailed_name":"ASSERT_CMPDOUBLE","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_CMPDOUBLE(a, eq, b) ASSERT_CMPINT_HELPER (a, eq, b, \"f\", double)","comments":"","declarations":[],"spell":"269:9-269:25|-1|1|2","extent":"269:9-269:80|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":354719817114402806,"detailed_name":"ASSERT_CMPVOID","short_name_offset":0,"short_name_size":14,"hover":"#define ASSERT_CMPVOID(a, eq, b) ASSERT_CMPINT_HELPER (a, eq, b, \"p\", void *)","comments":"","declarations":[],"spell":"270:9-270:23|-1|1|2","extent":"270:9-270:78|-1|1|0","uses":[],"kind":255,"storage":0},{"id":58,"usr":10303907444872332007,"detailed_name":"ASSERT_MEMCMP","short_name_offset":0,"short_name_size":13,"hover":"#define ASSERT_MEMCMP(a, b, n)\n   do {\n      if (0 != memcmp (a, b, n)) {\n         fprintf (stderr,\n                  \"Failed comparing %d bytes: \\\"%.*s\\\" != \\\"%.*s\\\"\",\n                  n,\n                  n,\n                  (char *) a,\n                  n,\n                  (char *) b);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"272:9-272:22|-1|1|2","extent":"272:9-284:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":59,"usr":18353461167936397637,"detailed_name":"ASSERT_ALMOST_EQUAL","short_name_offset":0,"short_name_size":19,"hover":"#define ASSERT_ALMOST_EQUAL(a, b)\n   do {\n      /* evaluate once */\n      int64_t _a = (a);\n      int64_t _b = (b);\n      if (!(_a > (_b * 2) / 3 && (_a < (_b * 3) / 2))) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: %\" PRId64\n                  \" not within 50%% of %\" PRId64 \"\\n\"\n                  \"%s:%d  %s()\\n\",\n                  _a,\n                  _b,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"290:9-290:28|-1|1|2","extent":"290:9-307:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":60,"usr":11959413318993536490,"detailed_name":"ASSERT_EQUAL_DOUBLE","short_name_offset":0,"short_name_size":19,"hover":"#define ASSERT_EQUAL_DOUBLE(a, b)\n   do {\n      double _a = fabs ((double) a);\n      double _b = fabs ((double) b);\n      if (!(_a > (_b * 4) / 5 && (_a < (_b * 6) / 5))) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: %f not within 20%% of %f\\n\"\n                  \"%s:%d  %s()\\n\",\n                  (double) a,\n                  (double) b,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"312:9-312:28|-1|1|2","extent":"312:9-327:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":61,"usr":3782291861377414729,"detailed_name":"ASSERT_CMPSTR","short_name_offset":0,"short_name_size":13,"hover":"#define ASSERT_CMPSTR(a, b)\n   do {\n      /* evaluate once */\n      const char *_a = a;\n      const char *_b = b;\n      if (((_a) != (_b)) && !!strcmp ((_a), (_b))) {\n         fprintf (\n            stderr, \"FAIL\\n\\nAssert Failure: \\\"%s\\\" != \\\"%s\\\"\\n\", _a, _b);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"330:9-330:22|-1|1|2","extent":"330:9-340:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":62,"usr":411190324719454147,"detailed_name":"ASSERT_CMPJSON","short_name_offset":0,"short_name_size":14,"hover":"#define ASSERT_CMPJSON(_a, _b)\n   do {\n      size_t i = 0;\n      char *__a = (char *) (_a);\n      char *__b = (char *) (_b);\n      char *__aa = bson_malloc0 (strlen (__a) + 1);\n      char *__bb = bson_malloc0 (strlen (__b) + 1);\n      char *f = __a;\n      do {\n         while (isspace (*__a))\n            __a++;\n         __aa[i++] = *__a++;\n      } while (*__a);\n      i = 0;\n      do {\n         while (isspace (*__b))\n            __b++;\n         __bb[i++] = *__b++;\n      } while (*__b);\n      if (!!strcmp ((__aa), (__bb))) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: \\\"%s\\\" != \\\"%s\\\"\\n\"\n                  \"%s:%d  %s()\\n\",\n                  __aa,\n                  __bb,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n      bson_free (__aa);\n      bson_free (__bb);\n      bson_free (f);\n   } while (0)","comments":"","declarations":[],"spell":"342:9-342:23|-1|1|2","extent":"342:9-375:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":63,"usr":13136052904702650607,"detailed_name":"ASSERT_CMPOID","short_name_offset":0,"short_name_size":13,"hover":"#define ASSERT_CMPOID(a, b)\n   do {\n      if (bson_oid_compare ((a), (b))) {\n         char oid_a[25];\n         char oid_b[25];\n         bson_oid_to_string ((a), oid_a);\n         bson_oid_to_string ((b), oid_b);\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: \"\n                  \"ObjectId(\\\"%s\\\") != ObjectId(\\\"%s\\\")\\n\",\n                  oid_a,\n                  oid_b);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"377:9-377:22|-1|1|2","extent":"377:9-391:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":64,"usr":17683337812710393765,"detailed_name":"ASSERT_CONTAINS","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_CONTAINS(a, b)\n   do {\n      char *_a_lower = bson_strdup (a);\n      char *_b_lower = bson_strdup (b);\n      mongoc_lowercase (_a_lower, _a_lower);\n      mongoc_lowercase (_b_lower, _b_lower);\n      if (NULL == strstr ((_a_lower), (_b_lower))) {\n         fprintf (stderr,\n                  \"%s:%d %s(): [%s] does not contain [%s]\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  a,\n                  b);\n         abort ();\n      }\n      bson_free (_a_lower);\n      bson_free (_b_lower);\n   } while (0)","comments":"","declarations":[],"spell":"394:9-394:24|-1|1|2","extent":"394:9-412:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":65,"usr":14000489629125897099,"detailed_name":"ASSERT_STARTSWITH","short_name_offset":0,"short_name_size":17,"hover":"#define ASSERT_STARTSWITH(a, b)\n   do {\n      /* evaluate once */\n      const char *_a = a;\n      const char *_b = b;\n      if ((_a) != strstr ((_a), (_b))) {\n         fprintf (stderr,\n                  \"%s:%d %s(): : [%s] does not start with [%s]\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  _a,\n                  _b);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"414:9-414:26|-1|1|2","extent":"414:9-429:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":66,"usr":10952165311324588537,"detailed_name":"ASSERT_ERROR_CONTAINS","short_name_offset":0,"short_name_size":21,"hover":"#define ASSERT_ERROR_CONTAINS(error, _domain, _code, _message)\n   do {\n      if (error.domain != _domain) {\n         fprintf (stderr,\n                  \"%s:%d %s(): error domain %d doesn't match expected %d\\n\"\n                  \"error: \\\"%s\\\"\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  error.domain,\n                  _domain,\n                  error.message);\n         abort ();\n      };\n      if (error.code != _code) {\n         fprintf (stderr,\n                  \"%s:%d %s(): error code %d doesn't match expected %d\\n\"\n                  \"error: \\\"%s\\\"\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  error.code,\n                  _code,\n                  error.message);\n         abort ();\n      };\n      ASSERT_CONTAINS (error.message, _message);\n   } while (0);","comments":"","declarations":[],"spell":"431:9-431:30|-1|1|2","extent":"431:9-458:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":67,"usr":6852216094917898418,"detailed_name":"ASSERT_CAPTURED_LOG","short_name_offset":0,"short_name_size":19,"hover":"#define ASSERT_CAPTURED_LOG(_info, _level, _msg)\n   do {\n      if (!has_captured_log (_level, _msg)) {\n         fprintf (stderr,\n                  \"%s:%d %s(): testing %s didn't log \\\"%s\\\"\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  _info,\n                  _msg);\n         print_captured_logs (\"\\t\");\n         abort ();\n      }\n   } while (0);","comments":"","declarations":[],"spell":"460:9-460:28|-1|1|2","extent":"460:9-473:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":68,"usr":7764497983151453971,"detailed_name":"ASSERT_NO_CAPTURED_LOGS","short_name_offset":0,"short_name_size":23,"hover":"#define ASSERT_NO_CAPTURED_LOGS(_info)\n   do {\n      if (has_captured_logs ()) {\n         fprintf (stderr,\n                  \"%s:%d %s(): testing %s shouldn't have logged:\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  _info);\n         print_captured_logs (\"\\t\");\n         abort ();\n      }\n   } while (0);","comments":"","declarations":[],"spell":"475:9-475:32|-1|1|2","extent":"475:9-487:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":69,"usr":9308637102457178446,"detailed_name":"ASSERT_HAS_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define ASSERT_HAS_FIELD(_bson, _field)\n   do {\n      if (!bson_has_field ((_bson), (_field))) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: No field \\\"%s\\\" in \\\"%s\\\"\\n\",\n                  (_field),\n                  bson_as_canonical_extended_json (_bson, NULL));\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"489:9-489:25|-1|1|2","extent":"489:9-498:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":70,"usr":6639723321805113558,"detailed_name":"ASSERT_HAS_NOT_FIELD","short_name_offset":0,"short_name_size":20,"hover":"#define ASSERT_HAS_NOT_FIELD(_bson, _field)\n   do {\n      if (bson_has_field ((_bson), (_field))) {\n         fprintf (\n            stderr,\n            \"FAIL\\n\\nAssert Failure: Unexpected field \\\"%s\\\" in \\\"%s\\\"\\n\",\n            (_field),\n            bson_as_canonical_extended_json (_bson, NULL));\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"500:9-500:29|-1|1|2","extent":"500:9-510:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":71,"usr":12986881692666123943,"detailed_name":"ASSERT_CMPTIME","short_name_offset":0,"short_name_size":14,"hover":"#define ASSERT_CMPTIME(actual, maxduration)\n   do {\n      if (!test_suite_valgrind ()) {\n         ASSERT_CMPINT (actual, <, maxduration);\n      }\n   } while (0)","comments":"","declarations":[],"spell":"513:9-513:23|-1|1|2","extent":"513:9-518:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":72,"usr":5930828652893003587,"detailed_name":"ASSERT_WITHIN_TIME_INTERVAL","short_name_offset":0,"short_name_size":27,"hover":"#define ASSERT_WITHIN_TIME_INTERVAL(actual, minduration, maxduration)\n   do {\n      if (!test_suite_valgrind ()) {\n         ASSERT_CMPINT (actual, >=, minduration);\n         ASSERT_CMPINT (actual, <, maxduration);\n      }\n   } while (0)","comments":"","declarations":[],"spell":"521:9-521:36|-1|1|2","extent":"521:9-527:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":73,"usr":5503471220493399216,"detailed_name":"gettestpid","short_name_offset":0,"short_name_size":10,"hover":"#define gettestpid getpid","comments":"","declarations":[],"spell":"532:9-532:19|-1|1|2","extent":"532:9-532:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":74,"usr":2731936795160222273,"detailed_name":"ASSERT_OR_PRINT_ERRNO","short_name_offset":0,"short_name_size":21,"hover":"#define ASSERT_OR_PRINT_ERRNO(_statement, _errcode)\n   do {\n      if (!(_statement)) {\n         fprintf (\n            stderr,\n            \"FAIL:%s:%d  %s()\\n  %s\\n  Failed with error code: %d (%s)\\n\\n\",\n            __FILE__,\n            __LINE__,\n            BSON_FUNC,\n            #_statement,\n            _errcode,\n            strerror (_errcode));\n         fflush (stderr);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"535:9-535:30|-1|1|2","extent":"535:9-550:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":75,"usr":5882396876710648988,"detailed_name":"ASSERT_COUNT","short_name_offset":0,"short_name_size":12,"hover":"#define ASSERT_COUNT(n, collection)\n   do {\n      int count = (int) mongoc_collection_count_documents (\n         collection, tmp_bson (\"{}\"), NULL, NULL, NULL, NULL);\n      if ((n) != count) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: count of %s is %d, not %d\\n\"\n                  \"%s:%d  %s()\\n\",\n                  mongoc_collection_get_name (collection),\n                  count,\n                  n,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"552:9-552:21|-1|1|2","extent":"552:9-568:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":76,"usr":14257193931873624039,"detailed_name":"ASSERT_CURSOR_COUNT","short_name_offset":0,"short_name_size":19,"hover":"#define ASSERT_CURSOR_COUNT(_n, _cursor)\n   do {\n      int _count = 0;\n      const bson_t *_doc;\n      while (mongoc_cursor_next (_cursor, &_doc)) {\n         _count++;\n      }\n      if ((_n) != _count) {\n         fprintf (stderr,\n                  \"FAIL\\n\\nAssert Failure: cursor count is %d, not %d\\n\"\n                  \"%s:%d  %s()\\n\",\n                  _count,\n                  _n,\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"570:9-570:28|-1|1|2","extent":"570:9-588:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":77,"usr":6724860141597297235,"detailed_name":"WAIT_UNTIL","short_name_offset":0,"short_name_size":10,"hover":"#define WAIT_UNTIL(_pred)\n   do {\n      int64_t _start = bson_get_monotonic_time ();\n      while (!(_pred)) {\n         if (bson_get_monotonic_time () - _start > 10 * 1000 * 1000) {\n            fprintf (stderr,\n                     \"Predicate \\\"%s\\\" timed out\\n\"\n                     \"   %s:%d  %s()\\n\",\n                     #_pred,\n                     __FILE__,\n                     __LINE__,\n                     BSON_FUNC);\n            abort ();\n         }\n         _mongoc_usleep (10 * 1000);\n      }\n   } while (0)","comments":"","declarations":[],"spell":"590:9-590:19|-1|1|2","extent":"590:9-606:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":78,"usr":3867854532790250675,"detailed_name":"ASSERT_WITH_MSG","short_name_offset":0,"short_name_size":15,"hover":"#define ASSERT_WITH_MSG(_statement, ...)\n   do {\n      if (!(_statement)) {\n         fprintf (stderr,\n                  \"FAIL:%s:%d  %s()\\n  %s\\n\\n\",\n                  __FILE__,\n                  __LINE__,\n                  BSON_FUNC,\n                  #_statement);\n         fprintf (stderr, __VA_ARGS__);\n         fflush (stderr);\n         abort ();\n      }\n   } while (0)","comments":"","declarations":[],"spell":"608:9-608:24|-1|1|2","extent":"608:9-621:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":79,"usr":10204908190851579185,"detailed_name":"MAX_TEST_NAME_LENGTH","short_name_offset":0,"short_name_size":20,"hover":"#define MAX_TEST_NAME_LENGTH 500","comments":"","declarations":[],"spell":"623:9-623:29|-1|1|2","extent":"623:9-623:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":80,"usr":10398687974945549510,"detailed_name":"MAX_TEST_CHECK_FUNCS","short_name_offset":0,"short_name_size":20,"hover":"#define MAX_TEST_CHECK_FUNCS 10","comments":"","declarations":[],"spell":"624:9-624:29|-1|1|2","extent":"624:9-624:32|-1|1|0","uses":["643:21-643:41|-1|1|4"],"kind":255,"storage":0},{"id":81,"usr":13214979656782748455,"detailed_name":"TestSuite_AddMockServerTest","short_name_offset":0,"short_name_size":27,"hover":"#define TestSuite_AddMockServerTest(_suite, _name, ...)\n   _TestSuite_AddMockServerTest (_suite, _name, __VA_ARGS__, NULL)","comments":"","declarations":[],"spell":"676:9-676:36|-1|1|2","extent":"676:9-677:67|-1|1|0","uses":[],"kind":255,"storage":0},{"id":82,"usr":1165841615681466047,"detailed_name":"TestSuite_AddFull","short_name_offset":0,"short_name_size":17,"hover":"#define TestSuite_AddFull(_suite, _name, _func, _dtor, _ctx, ...)\n   _TestSuite_AddFull (_suite, _name, _func, _dtor, _ctx, __VA_ARGS__, NULL)","comments":"","declarations":[],"spell":"698:9-698:26|-1|1|2","extent":"698:9-699:77|-1|1|0","uses":[],"kind":255,"storage":0}]}