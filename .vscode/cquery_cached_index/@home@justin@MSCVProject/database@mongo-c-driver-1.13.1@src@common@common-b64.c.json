16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/common/common-b64.c","args_hash":10433645398913005206,"includes":[{"line":43,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/common/common-b64-private.h"}],"dependencies":["/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/common/common-b64-private.h"],"skipped_by_preprocessor":["263:1-270:6"],"types":[{"id":0,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1],"uses":[]},{"id":1,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,3,4,5,6,7],"uses":[]}],"funcs":[{"id":0,"usr":6208035444016678293,"detailed_name":"int bson_b64_ntop(int)","short_name_offset":4,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"(From RFC1521 and draft-ietf-dnssec-secext-03.txt)\nThe following encoding technique is taken from RFC 1521 by Borenstein\nand Freed.  It is reproduced here in a slightly edited form for\nconvenience.\n\nA 65-character subset of US-ASCII is used, enabling 6 bits to be\nrepresented per printable character. (The extra 65th character, \"=\",\nis used to signify a special processing function.)\n\nThe encoding process represents 24-bit groups of input bits as output\nstrings of 4 encoded characters. Proceeding from left to right, a\n24-bit input group is formed by concatenating 3 8-bit input groups.\nThese 24 bits are then treated as 4 concatenated 6-bit groups, each\nof which is translated into a single digit in the base64 alphabet.\n\nEach 6-bit group is used as an index into an array of 64 printable\ncharacters. The character referenced by the index is placed in the\noutput string.\n\n                      Table 1: The Base64 Alphabet\n\n   Value Encoding  Value Encoding  Value Encoding  Value Encoding\n       0 A            17 R            34 i            51 z\n       1 B            18 S            35 j            52 0\n       2 C            19 T            36 k            53 1\n       3 D            20 U            37 l            54 2\n       4 E            21 V            38 m            55 3\n       5 F            22 W            39 n            56 4\n       6 G            23 X            40 o            57 5\n       7 H            24 Y            41 p            58 6\n       8 I            25 Z            42 q            59 7\n       9 J            26 a            43 r            60 8\n      10 K            27 b            44 s            61 9\n      11 L            28 c            45 t            62 +\n      12 M            29 d            46 u            63 /\n      13 N            30 e            47 v\n      14 O            31 f            48 w         (pad) =\n      15 P            32 g            49 x\n      16 Q            33 h            50 y\n\nSpecial processing is performed if fewer than 24 bits are available\nat the end of the data being encoded.  A full encoding quantum is\nalways completed at the end of a quantity.  When fewer than 24 input\nbits are available in an input group, zero bits are added (on the\nright) to form an integral number of 6-bit groups.  Padding at the\nend of the data is performed using the '=' character.\n\nSince all base64 input is an integral number of octets, only the\nfollowing cases can arise:\n\n    (1) the final quantum of encoding input is an integral\n        multiple of 24 bits; here, the final unit of encoded\n   output will be an integral multiple of 4 characters\n   with no \"=\" padding,\n    (2) the final quantum of encoding input is exactly 8 bits;\n        here, the final unit of encoded output will be two\n   characters followed by two \"=\" padding characters, or\n    (3) the final quantum of encoding input is exactly 16 bits;\n        here, the final unit of encoded output will be three\n   characters followed by one \"=\" padding character.","declarations":[],"spell":"117:1-117:14|-1|1|2","extent":"116:1-185:2|-1|1|0","bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":10552480171314043560,"detailed_name":"const char [65] Base64","short_name_offset":16,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"50:19-50:25|-1|1|2","extent":"50:1-51:70|-1|1|0","type":0,"uses":[],"kind":13,"storage":3},{"id":1,"usr":15945159212204206961,"detailed_name":"const char Pad64","short_name_offset":11,"short_name_size":5,"hover":"const char Pad64 = '='","comments":"","declarations":[],"spell":"52:19-52:24|-1|1|2","extent":"52:1-52:30|-1|1|0","type":0,"uses":[],"kind":13,"storage":3},{"id":2,"usr":2515744750478627413,"detailed_name":"int [256] mongoc_b64rmap","short_name_offset":10,"short_name_size":14,"hover":"","comments":"skips all whitespace anywhere.\nconverts characters, four at a time, starting at (or after)\nsrc from base - 64 numbers into three 8 bit bytes in the target area.\nit returns the number of data bytes stored at the target, or -1 on error.","declarations":[],"spell":"255:16-255:30|-1|1|2","type":1,"uses":[],"kind":13,"storage":3},{"id":3,"usr":8242842620716402024,"detailed_name":"const int mongoc_b64rmap_special","short_name_offset":10,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"257:22-257:44|-1|1|2","extent":"257:1-257:44|-1|1|0","type":1,"uses":[],"kind":13,"storage":3},{"id":4,"usr":5472765715252303147,"detailed_name":"const int mongoc_b64rmap_end","short_name_offset":10,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"258:22-258:40|-1|1|2","extent":"258:1-258:40|-1|1|0","type":1,"uses":[],"kind":13,"storage":3},{"id":5,"usr":8950661602221108739,"detailed_name":"const int mongoc_b64rmap_space","short_name_offset":10,"short_name_size":20,"hover":"","comments":"","declarations":[],"spell":"259:22-259:42|-1|1|2","extent":"259:1-259:42|-1|1|0","type":1,"uses":[],"kind":13,"storage":3},{"id":6,"usr":2769485555271752519,"detailed_name":"const int mongoc_b64rmap_invalid","short_name_offset":10,"short_name_size":22,"hover":"","comments":"","declarations":[],"spell":"260:22-260:44|-1|1|2","extent":"260:1-260:44|-1|1|0","type":1,"uses":[],"kind":13,"storage":3},{"id":7,"usr":9615126415240239687,"detailed_name":"int CALLBACK","short_name_offset":4,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"279:8-279:57|-1|1|2","extent":"279:1-279:57|-1|1|0","type":1,"uses":[],"kind":13,"storage":3},{"id":8,"usr":5592907270964015554,"detailed_name":"Assert","short_name_offset":0,"short_name_size":6,"hover":"#define Assert(Cond)\n   if (!(Cond))\n   abort ()","comments":"","declarations":[],"spell":"46:9-46:15|-1|1|2","extent":"46:9-48:12|-1|1|0","uses":["137:7-137:13|-1|1|4","138:7-138:13|-1|1|4","139:7-139:13|-1|1|4","140:7-140:13|-1|1|4","162:7-162:13|-1|1|4","163:7-163:13|-1|1|4","164:7-164:13|-1|1|4"],"kind":255,"storage":0},{"id":9,"usr":5260487143203081166,"detailed_name":"mongoc_common_once_t","short_name_offset":0,"short_name_size":20,"hover":"#define mongoc_common_once_t INIT_ONCE","comments":"","declarations":[],"spell":"271:9-271:29|-1|1|2","extent":"271:9-271:39|-1|1|0","uses":["520:11-520:31|-1|1|4"],"kind":255,"storage":0},{"id":10,"usr":14816800983025474800,"detailed_name":"MONGOC_COMMON_ONCE_INIT","short_name_offset":0,"short_name_size":23,"hover":"#define MONGOC_COMMON_ONCE_INIT INIT_ONCE_STATIC_INIT","comments":"","declarations":[],"spell":"272:9-272:32|-1|1|2","extent":"272:9-272:54|-1|1|0","uses":["520:39-520:62|-1|1|4"],"kind":255,"storage":0},{"id":11,"usr":2719051550698112318,"detailed_name":"mongoc_common_once","short_name_offset":0,"short_name_size":18,"hover":"#define mongoc_common_once(o, c) InitOnceExecuteOnce (o, c, NULL, NULL)","comments":"","declarations":[],"spell":"273:9-273:27|-1|1|2","extent":"273:9-273:72|-1|1|0","uses":["522:4-522:22|-1|1|4"],"kind":255,"storage":0},{"id":12,"usr":4720224974034068847,"detailed_name":"MONGOC_COMMON_ONCE_FUN","short_name_offset":0,"short_name_size":22,"hover":"#define MONGOC_COMMON_ONCE_FUN(n)\n   BOOL CALLBACK n (PINIT_ONCE _ignored_a, PVOID _ignored_b, PVOID *_ignored_c)","comments":"","declarations":[],"spell":"274:9-274:31|-1|1|2","extent":"274:9-275:80|-1|1|0","uses":["279:8-279:30|-1|1|4"],"kind":255,"storage":0},{"id":13,"usr":4013087753088569344,"detailed_name":"MONGOC_COMMON_ONCE_RETURN","short_name_offset":0,"short_name_size":25,"hover":"#define MONGOC_COMMON_ONCE_RETURN return true","comments":"","declarations":[],"spell":"276:9-276:34|-1|1|2","extent":"276:9-276:46|-1|1|0","uses":["304:4-304:29|-1|1|4"],"kind":255,"storage":0}]}