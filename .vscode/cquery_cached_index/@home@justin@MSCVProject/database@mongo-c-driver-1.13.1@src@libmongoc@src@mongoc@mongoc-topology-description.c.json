16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/mongoc-topology-description.c","args_hash":10433645398913005206,"includes":[],"dependencies":[],"skipped_by_preprocessor":["1753:1-1793:7"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,3,4,5,6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,68,69,71,74,78,80,82,83,84,85,86,87,88,89,90,92,93,94,95,96,97,98,99,100,101,105,106,107,109,110,111,113,114,115,116,117,118,119,120,121,122,123,124,126,127,128,129,130,131,132,133,134,135,136,137,138],"uses":[]},{"id":1,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,2,8,9,26,27,33,34,65,66,75,76,102,103],"uses":[]},{"id":2,"usr":15018018413687497505,"detailed_name":"_mongoc_suitable_data_t","short_name_offset":0,"short_name_size":23,"kind":23,"hover":"","comments":"","declarations":[],"spell":"357:16-357:39|-1|1|2","extent":"357:9-364:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[20,21,22,23,24,25],"instances":[],"uses":[]},{"id":3,"usr":4647092908366406626,"detailed_name":"mongoc_suitable_data_t","short_name_offset":0,"short_name_size":22,"kind":252,"hover":"","comments":"","declarations":[],"spell":"364:3-364:25|-1|1|2","extent":"357:1-364:25|-1|1|0","alias_of":2,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[28,35,48],"uses":["364:3-364:25|-1|1|4","370:4-370:26|-1|1|4","370:36-370:58|-1|1|4","428:4-428:26|-1|1|4","428:36-428:58|-1|1|4","601:4-601:26|-1|1|4"]},{"id":4,"usr":1087021994477344048,"detailed_name":"_mongoc_address_and_id_t","short_name_offset":0,"short_name_size":24,"kind":23,"hover":"","comments":"","declarations":[],"spell":"907:16-907:40|-1|1|2","extent":"907:9-911:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[62,63,64],"instances":[],"uses":[]},{"id":5,"usr":5637032680301880736,"detailed_name":"mongoc_address_and_id_t","short_name_offset":0,"short_name_size":23,"kind":252,"hover":"","comments":"","declarations":[],"spell":"911:3-911:26|-1|1|2","extent":"907:1-911:26|-1|1|0","alias_of":4,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[67,72],"uses":["911:3-911:26|-1|1|4","919:4-919:27|-1|1|4","919:37-919:60|-1|1|4","972:4-972:27|-1|1|4"]},{"id":6,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[62,70,73,79,91,108],"uses":[]},{"id":7,"usr":619747787628248979,"detailed_name":"_mongoc_address_and_type_t","short_name_offset":0,"short_name_size":26,"kind":23,"hover":"","comments":"","declarations":[],"spell":"989:16-989:42|-1|1|2","extent":"989:9-992:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[73,74],"instances":[],"uses":[]},{"id":8,"usr":1733965205366601059,"detailed_name":"mongoc_address_and_type_t","short_name_offset":0,"short_name_size":25,"kind":252,"hover":"","comments":"","declarations":[],"spell":"992:3-992:28|-1|1|2","extent":"989:1-992:28|-1|1|0","alias_of":7,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[77,81],"uses":["992:3-992:28|-1|1|4","998:4-998:29|-1|1|4","998:39-998:64|-1|1|4","1030:4-1030:29|-1|1|4"]},{"id":9,"usr":14032934123729366860,"detailed_name":"_mongoc_primary_and_topology_t","short_name_offset":0,"short_name_size":30,"kind":23,"hover":"","comments":"","declarations":[],"spell":"1272:16-1272:46|-1|1|2","extent":"1272:9-1275:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[100,101],"instances":[],"uses":[]},{"id":10,"usr":12932183733961365240,"detailed_name":"mongoc_primary_and_topology_t","short_name_offset":0,"short_name_size":29,"kind":252,"hover":"","comments":"","declarations":[],"spell":"1275:3-1275:32|-1|1|2","extent":"1272:1-1275:32|-1|1|0","alias_of":9,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[104,112],"uses":["1275:3-1275:32|-1|1|4","1282:4-1282:33|-1|1|4","1282:43-1282:72|-1|1|4","1398:4-1398:33|-1|1|4"]},{"id":11,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":12,"usr":9006707322822058951,"detailed_name":"transition_t","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef void (*transition_t) (mongoc_topology_description_t *topology,\n                              mongoc_server_description_t *server)","comments":"\n--------------------------------------------------------------------------\n\n  This table implements the 'ToplogyType' table outlined in the Server\n  Discovery and Monitoring spec. Each row represents a server type,\n  and each column represents the topology type. Given a current topology\n  type T and a newly-observed server type S, use the function at\n  state_transions[S][T] to transition to a new state.\n\n  Rows should be read like so:\n  { server type for this row\n     UNKNOWN,\n     SHARDED,\n     RS_NO_PRIMARY,\n     RS_WITH_PRIMARY\n  }\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1699:16-1699:28|-1|1|2","extent":"1699:1-1700:67|-1|1|0","alias_of":11,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[125],"uses":["1699:16-1699:28|-1|1|4","0:0-0:0|-1|1|4"]}],"funcs":[{"id":0,"usr":82422601106242856,"detailed_name":"static int _is_data_node(int *sd)","short_name_offset":11,"short_name_size":13,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"30:1-30:14|-1|1|2","extent":"29:1-47:2|-1|1|0","bases":[],"derived":[],"vars":[0],"uses":[],"callees":[]},{"id":1,"usr":1022573167205494370,"detailed_name":"static void _mongoc_topology_server_dtor(void *server_, void *ctx_)","short_name_offset":12,"short_name_size":28,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"51:1-51:29|-1|1|2","extent":"50:1-54:2|-1|1|0","bases":[],"derived":[],"vars":[1,2],"uses":[],"callees":[]},{"id":2,"usr":9400788898323564974,"detailed_name":"void mongoc_topology_description_init(int *description, int heartbeat_msec)","short_name_offset":5,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_init --\n\n       Initialize the given topology description\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"72:1-72:33|-1|1|2","extent":"71:1-95:2|-1|1|0","bases":[],"derived":[],"vars":[3,4],"uses":[],"callees":[]},{"id":3,"usr":8892349246528211809,"detailed_name":"void _mongoc_topology_description_copy_to(const int *src, int *dst)","short_name_offset":5,"short_name_size":36,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_copy_to --\n\n       Deep-copy @src to an uninitialized topology description @dst.\n       @dst must not already point to any allocated resources. Clean\n       up with mongoc_topology_description_destroy.\n\n       WARNING: @dst's rand_seed is not initialized.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"117:1-117:37|-1|1|2","extent":"116:1-161:2|-1|1|0","bases":[],"derived":[],"vars":[5,6],"uses":[],"callees":[]},{"id":4,"usr":18038263716802055137,"detailed_name":"void mongoc_topology_description_destroy(int *description)","short_name_offset":5,"short_name_size":35,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_destroy --\n\n       Destroy allocated resources within @description\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"179:1-179:36|-1|1|2","extent":"178:1-196:2|-1|1|0","bases":[],"derived":[],"vars":[7],"uses":[],"callees":[]},{"id":5,"usr":11259004845785513217,"detailed_name":"static int _mongoc_topology_description_has_primary_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":43,"kind":12,"storage":3,"hover":"","comments":"find the primary, then stop iterating","declarations":[],"spell":"200:1-200:44|-1|1|2","extent":"199:1-212:2|-1|1|0","bases":[],"derived":[],"vars":[8,9],"uses":[],"callees":[]},{"id":6,"usr":12880974647278090252,"detailed_name":"static int *_mongoc_topology_description_has_primary(int *description)","short_name_offset":12,"short_name_size":40,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_has_primary --\n\n       If topology has a primary, return it.\n\n Returns:\n       A pointer to the primary, or NULL.\n\n Side effects:\n       None\n\n--------------------------------------------------------------------------","declarations":[],"spell":"230:1-230:41|-1|1|2","extent":"229:1-240:2|-1|1|0","bases":[],"derived":[],"vars":[10],"uses":[],"callees":[]},{"id":7,"usr":2905852767184678969,"detailed_name":"static int _mongoc_topology_description_later_election(int *td, int *sd)","short_name_offset":11,"short_name_size":43,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_later_election --\n\n       Check if we've seen a more recent election in the replica set\n       than this server has.\n\n Returns:\n       True if the topology description's max replica set version plus\n       election id is later than the server description's.\n\n Side effects:\n       None\n\n--------------------------------------------------------------------------","declarations":[],"spell":"260:1-260:44|-1|1|2","extent":"259:1-267:2|-1|1|0","bases":[],"derived":[],"vars":[11,12],"uses":[],"callees":[]},{"id":8,"usr":12889955669096915806,"detailed_name":"static void _mongoc_topology_description_set_max_set_version(int *td, int *sd)","short_name_offset":12,"short_name_size":48,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_set_max_set_version --\n\n       Remember that we've seen a new replica set version. Unconditionally\n       sets td->set_version to sd->set_version.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"280:1-280:49|-1|1|2","extent":"279:1-284:2|-1|1|0","bases":[],"derived":[],"vars":[13,14],"uses":[],"callees":[]},{"id":9,"usr":13577169742290458717,"detailed_name":"static void _mongoc_topology_description_set_max_election_id(int *td, int *sd)","short_name_offset":12,"short_name_size":48,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_set_max_election_id --\n\n       Remember that we've seen a new election id. Unconditionally sets\n       td->max_election_id to sd->election_id.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"297:1-297:49|-1|1|2","extent":"296:1-301:2|-1|1|0","bases":[],"derived":[],"vars":[15,16],"uses":[],"callees":[]},{"id":10,"usr":2408520810336719363,"detailed_name":"static int _mongoc_topology_description_server_is_candidate(int desc_type, int read_mode, int topology_type)","short_name_offset":11,"short_name_size":48,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"304:1-304:49|-1|1|2","extent":"303:1-355:2|-1|1|0","bases":[],"derived":[],"vars":[17,18,19],"uses":[],"callees":[]},{"id":11,"usr":17411354270032695066,"detailed_name":"static int _mongoc_replica_set_read_suitable_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":36,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"367:1-367:37|-1|1|2","extent":"366:1-401:2|-1|1|0","bases":[],"derived":[],"vars":[26,27,28],"uses":[],"callees":[]},{"id":12,"usr":1524662826116142752,"detailed_name":"static void _mongoc_try_mode_secondary(int *set, int *topology, const int *read_pref, int local_threshold_ms)","short_name_offset":12,"short_name_size":26,"kind":12,"storage":3,"hover":"","comments":"if any mongos are candidates, add them to the candidates array","declarations":[],"spell":"406:1-406:27|-1|1|2","extent":"405:1-420:2|-1|1|0","bases":[],"derived":[],"vars":[29,30,31,32],"uses":[],"callees":[]},{"id":13,"usr":2314608388012374927,"detailed_name":"static int _mongoc_find_suitable_mongos_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":31,"kind":12,"storage":3,"hover":"","comments":"if any mongos are candidates, add them to the candidates array","declarations":[],"spell":"425:1-425:32|-1|1|2","extent":"424:1-435:2|-1|1|0","bases":[],"derived":[],"vars":[33,34,35],"uses":[],"callees":[]},{"id":14,"usr":11175315566636389193,"detailed_name":"int mongoc_topology_description_lowest_max_wire_version(const int *td)","short_name_offset":4,"short_name_size":51,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_description_lowest_max_wire_version --\n\n       The topology's max wire version.\n\n       NOTE: this method should only be called while holding the mutex on\n       the owning topology object.\n\n Returns:\n       The minimum of all known servers' max wire versions, or INT32_MAX\n       if there are no known servers.\n\n Side effects:\n       None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"458:1-458:52|-1|1|2","extent":"457:1-474:2|-1|1|0","bases":[],"derived":[],"vars":[36,37],"uses":[],"callees":[]},{"id":15,"usr":14502561601222621094,"detailed_name":"int mongoc_topology_description_all_sds_have_write_date(const int *td)","short_name_offset":4,"short_name_size":51,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_description_all_sds_have_write_date --\n\n       Whether the primary and all secondaries' server descriptions have\n       last_write_date_ms.\n\n Side effects:\n       None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"491:1-491:52|-1|1|2","extent":"490:1-508:2|-1|1|0","bases":[],"derived":[],"vars":[38,39],"uses":[],"callees":[]},{"id":16,"usr":15223105255100623478,"detailed_name":"int _mongoc_topology_description_validate_max_staleness(const int *td, int max_staleness_seconds, int *error)","short_name_offset":4,"short_name_size":51,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n _mongoc_topology_description_validate_max_staleness --\n\n       If the provided \"maxStalenessSeconds\" component of the read\n       preference is not valid for this topology, fill out @error and\n       return false.\n\n Side effects:\n       None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"525:1-525:52|-1|1|2","extent":"524:1-573:2|-1|1|0","bases":[],"derived":[],"vars":[40,41,42],"uses":[],"callees":[]},{"id":17,"usr":13486349601347606410,"detailed_name":"void mongoc_topology_description_suitable_servers(int *set, int optype, int *topology, const int *read_pref, int local_threshold_ms)","short_name_offset":5,"short_name_size":44,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_description_suitable_servers --\n\n       Fill out an array of servers matching the read preference and\n       localThresholdMS.\n\n       NOTE: this method should only be called while holding the mutex on\n       the owning topology object.\n\n Side effects:\n       None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"594:1-594:45|-1|1|2","extent":"593:1-738:2|-1|1|0","bases":[],"derived":[],"vars":[43,44,45,46,47,48,49],"uses":[],"callees":[]},{"id":18,"usr":9754298045153968840,"detailed_name":"int mongoc_topology_description_has_data_node(int *td)","short_name_offset":4,"short_name_size":41,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_has_data_node --\n\n      Internal method: are any servers not Arbiter, Ghost, or Unknown?\n\n--------------------------------------------------------------------------","declarations":[],"spell":"750:1-750:42|-1|1|2","extent":"749:1-763:2|-1|1|0","bases":[],"derived":[],"vars":[50,51],"uses":[],"callees":[]},{"id":19,"usr":571002814856712088,"detailed_name":"int *mongoc_topology_description_select(int *topology, int optype, const int *read_pref, int local_threshold_ms)","short_name_offset":5,"short_name_size":34,"kind":12,"storage":1,"hover":"","comments":"\n-------------------------------------------------------------------------\n\n mongoc_topology_description_select --\n\n      Return a server description of a node that is appropriate for\n      the given read preference and operation type.\n\n      NOTE: this method simply attempts to select a server from the\n      current topology, it does not retry or trigger topology checks.\n\n      NOTE: this method should only be called while holding the mutex on\n      the owning topology object.\n\n Returns:\n      Selected server description, or NULL upon failure.\n\n Side effects:\n      None.\n\n-------------------------------------------------------------------------","declarations":[],"spell":"789:1-789:35|-1|1|2","extent":"788:1-834:2|-1|1|0","bases":[],"derived":[],"vars":[52,53,54,55,56],"uses":[],"callees":[]},{"id":20,"usr":10623950794347344539,"detailed_name":"int *mongoc_topology_description_server_by_id(int *description, int id, int *error)","short_name_offset":5,"short_name_size":40,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_server_by_id --\n\n       Get the server description for @id, if that server is present\n       in @description. Otherwise, return NULL and fill out optional\n       @error.\n\n       NOTE: In most cases, caller should create a duplicate of the\n       returned server description. Caller should hold the mutex on the\n       owning topology object while calling this method and while using\n       the returned reference.\n\n Returns:\n       A mongoc_server_description_t *, or NULL.\n\n Side effects:\n       Fills out optional @error if server not found.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"860:1-860:41|-1|1|2","extent":"859:1-878:2|-1|1|0","bases":[],"derived":[],"vars":[57,58,59],"uses":[],"callees":[]},{"id":21,"usr":3229221682591107879,"detailed_name":"static void _mongoc_topology_description_remove_server(int *description, int *server)","short_name_offset":12,"short_name_size":42,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_remove_server --\n\n       If present, remove this server from this topology description.\n\n Returns:\n       None.\n\n Side effects:\n       Removes the server description from topology and destroys it.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"896:1-896:43|-1|1|2","extent":"895:1-905:2|-1|1|0","bases":[],"derived":[],"vars":[60,61],"uses":[],"callees":[]},{"id":22,"usr":8445359368960042540,"detailed_name":"static int _mongoc_topology_description_has_server_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":42,"kind":12,"storage":3,"hover":"","comments":"find the given server and stop iterating","declarations":[],"spell":"915:1-915:43|-1|1|2","extent":"914:1-927:2|-1|1|0","bases":[],"derived":[],"vars":[65,66,67],"uses":[],"callees":[]},{"id":23,"usr":14973577073252810825,"detailed_name":"static int _mongoc_topology_description_has_set_version(int *td)","short_name_offset":11,"short_name_size":44,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_has_set_version --\n\n       Whether @topology's max replica set version has been set.\n\n Returns:\n       True if the max setVersion was ever set.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"945:1-945:45|-1|1|2","extent":"944:1-948:2|-1|1|0","bases":[],"derived":[],"vars":[68],"uses":[],"callees":[]},{"id":24,"usr":6449795436335623994,"detailed_name":"static int _mongoc_topology_description_has_server(int *description, const char *address, int *id)","short_name_offset":11,"short_name_size":39,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_topology_has_server --\n\n       Return true if @server is in @topology. If so, place its id in\n       @id if given.\n\n Returns:\n       True if server is in topology, false otherwise.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"967:1-967:40|-1|1|2","extent":"966:1-987:2|-1|1|0","bases":[],"derived":[],"vars":[69,70,71,72],"uses":[],"callees":[]},{"id":25,"usr":6155937746844906399,"detailed_name":"static int _mongoc_label_unknown_member_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":31,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"995:1-995:32|-1|1|2","extent":"994:1-1006:2|-1|1|0","bases":[],"derived":[],"vars":[75,76,77],"uses":[],"callees":[]},{"id":26,"usr":11648027638110357273,"detailed_name":"static void _mongoc_topology_description_label_unknown_member(int *description, const char *address, int type)","short_name_offset":12,"short_name_size":49,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_label_unknown_member --\n\n       Find the server description with the given @address and if its\n       type is UNKNOWN, set its type to @type.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1025:1-1025:50|-1|1|2","extent":"1024:1-1040:2|-1|1|0","bases":[],"derived":[],"vars":[78,79,80,81],"uses":[],"callees":[]},{"id":27,"usr":3037440161740039938,"detailed_name":"static void _mongoc_topology_description_set_state(int *description, int type)","short_name_offset":12,"short_name_size":38,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_set_state --\n\n       Change the state of this cluster and unblock things waiting\n       on a change of topology type.\n\n Returns:\n       None.\n\n Side effects:\n       Unblocks anything waiting on this description to change states.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1059:1-1059:39|-1|1|2","extent":"1058:1-1064:2|-1|1|0","bases":[],"derived":[],"vars":[82,83],"uses":[],"callees":[]},{"id":28,"usr":5578540546400113565,"detailed_name":"static void _update_rs_type(int *topology)","short_name_offset":12,"short_name_size":15,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"1068:1-1068:16|-1|1|2","extent":"1067:1-1077:2|-1|1|0","bases":[],"derived":[],"vars":[84],"uses":[],"callees":[]},{"id":29,"usr":13786756587237250085,"detailed_name":"static void _mongoc_topology_description_check_if_has_primary(int *topology, int *server)","short_name_offset":12,"short_name_size":49,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_check_if_has_primary --\n\n       If there is a primary in topology, set topology\n       type to RS_WITH_PRIMARY, otherwise set it to\n       RS_NO_PRIMARY.\n\n Returns:\n       None.\n\n Side effects:\n       Changes the topology type.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1098:1-1098:50|-1|1|2","extent":"1097:1-1102:2|-1|1|0","bases":[],"derived":[],"vars":[85,86],"uses":[],"callees":[]},{"id":30,"usr":9030882103502586998,"detailed_name":"void mongoc_topology_description_invalidate_server(int *topology, int id, const int *error)","short_name_offset":5,"short_name_size":45,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_invalidate_server --\n\n      Invalidate a server if a network error occurred while using it in\n      another part of the client. Server description is set to type\n      UNKNOWN, the error is recorded, and other parameters are reset to\n      defaults. Pass in the reason for invalidation in @error.\n\n      NOTE: this method should only be called while holding the mutex on\n      the owning topology object.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1120:1-1120:46|-1|1|2","extent":"1119:1-1129:2|-1|1|0","bases":[],"derived":[],"vars":[87,88,89],"uses":[],"callees":[]},{"id":31,"usr":3941810984736767483,"detailed_name":"int mongoc_topology_description_add_server(int *topology, const char *server, int *id)","short_name_offset":4,"short_name_size":38,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_add_server --\n\n       Add the specified server to the cluster topology if it is not\n       already a member. If @id, place its id in @id.\n\n       NOTE: this method should only be called while holding the mutex on\n       the owning topology object.\n\n Return:\n       True if the server was added or already existed in the topology,\n       false if an error occurred.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1152:1-1152:39|-1|1|2","extent":"1151:1-1184:2|-1|1|0","bases":[],"derived":[],"vars":[90,91,92],"uses":[],"callees":[]},{"id":32,"usr":8068846018619655650,"detailed_name":"void mongoc_topology_description_update_cluster_time(int *td, const int *reply)","short_name_offset":5,"short_name_size":47,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_update_cluster_time --\n\n  Drivers Session Spec: Drivers MUST examine responses to server commands to\n  see if they contain a top level field named $clusterTime formatted as\n  follows:\n\n  {\n      ...\n      $clusterTime : {\n          clusterTime : <BsonTimestamp>,\n          signature : {\n              hash : <BsonBinaryData>,\n              keyId : <BsonInt64>\n          }\n      },\n      ...\n  }\n\n  Whenever a driver receives a clusterTime from a server it MUST compare it\n  to the current highest seen clusterTime for the cluster. If the new\n  clusterTime is higher than the highest seen clusterTime it MUST become\n  the new highest seen clusterTime. Two clusterTimes are compared using\n  only the BsonTimestamp value of the clusterTime embedded field (be sure to\n  include both the timestamp and the increment of the BsonTimestamp in the\n  comparison). The signature field does not participate in the comparison.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1220:1-1220:48|-1|1|2","extent":"1219:1-1247:2|-1|1|0","bases":[],"derived":[],"vars":[93,94,95],"uses":[],"callees":[]},{"id":33,"usr":13725236941521086406,"detailed_name":"static void _mongoc_topology_description_add_new_servers(int *topology, int *server)","short_name_offset":12,"short_name_size":44,"kind":12,"storage":3,"hover":"","comments":"","declarations":[],"spell":"1251:1-1251:45|-1|1|2","extent":"1250:1-1270:2|-1|1|0","bases":[],"derived":[],"vars":[96,97,98,99],"uses":[],"callees":[]},{"id":34,"usr":11730181682151119519,"detailed_name":"static int _mongoc_topology_description_invalidate_primaries_cb(void *item, void *ctx)","short_name_offset":11,"short_name_size":52,"kind":12,"storage":3,"hover":"","comments":"invalidate old primaries","declarations":[],"spell":"1279:1-1279:53|-1|1|2","extent":"1278:1-1291:2|-1|1|0","bases":[],"derived":[],"vars":[102,103,104],"uses":[],"callees":[]},{"id":35,"usr":13333363736008557630,"detailed_name":"static void _mongoc_topology_description_remove_unreported_servers(int *topology, int *primary)","short_name_offset":12,"short_name_size":54,"kind":12,"storage":3,"hover":"","comments":"Remove and destroy all replica set members not in primary's hosts lists","declarations":[],"spell":"1296:1-1296:55|-1|1|2","extent":"1295:1-1331:2|-1|1|0","bases":[],"derived":[],"vars":[105,106,107,108],"uses":[],"callees":[]},{"id":36,"usr":7768224941359435996,"detailed_name":"static int _mongoc_topology_description_matches_me(int *server)","short_name_offset":11,"short_name_size":39,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_matches_me --\n\n       Server Discovery And Monitoring Spec: \"Removal from the topology of\n       seed list members where the \"me\" property does not match the address\n       used to connect prevents clients from being able to select a server,\n       only to fail to re-select that server once the primary has responded.\n\n Returns:\n       True if \"me\" matches \"connection_address\".\n\n Side Effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1353:1-1353:40|-1|1|2","extent":"1352:1-1363:2|-1|1|0","bases":[],"derived":[],"vars":[109],"uses":[],"callees":[]},{"id":37,"usr":13965970045757862123,"detailed_name":"static void _mongoc_topology_description_update_rs_from_primary(int *topology, int *server)","short_name_offset":12,"short_name_size":51,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_update_rs_from_primary --\n\n       First, determine that this is really the primary:\n          -If this node isn't in the cluster, do nothing.\n          -If the cluster's set name is null, set it to node's set name.\n           Otherwise if the cluster's set name is different from node's,\n           we found a rogue primary, so remove it from the cluster and\n           check the cluster for a primary, then return.\n          -If any of the members of cluster reports an address different\n           from node's, node cannot be the primary.\n       Now that we know this is the primary:\n          -If any hosts, passives, or arbiters in node's description aren't\n           in the cluster, add them as UNKNOWN servers.\n          -If the cluster has any servers that aren't in node's description,\n           remove and destroy them.\n       Finally, check the cluster for the new primary.\n\n Returns:\n       None.\n\n Side effects:\n       Changes to the cluster, possible removal of cluster nodes.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1395:1-1395:52|-1|1|2","extent":"1394:1-1466:2|-1|1|0","bases":[],"derived":[],"vars":[110,111,112],"uses":[],"callees":[]},{"id":38,"usr":2585759037690584904,"detailed_name":"static void _mongoc_topology_description_update_rs_without_primary(int *topology, int *server)","short_name_offset":12,"short_name_size":54,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_update_rs_without_primary --\n\n       Update cluster's information when there is no primary.\n\n Returns:\n       None.\n\n Side Effects:\n       Alters cluster state, may remove node from cluster.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1484:1-1484:55|-1|1|2","extent":"1483:1-1518:2|-1|1|0","bases":[],"derived":[],"vars":[113,114],"uses":[],"callees":[]},{"id":39,"usr":10591519854148802023,"detailed_name":"static void _mongoc_topology_description_update_rs_with_primary_from_member(int *topology, int *server)","short_name_offset":12,"short_name_size":63,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_update_rs_with_primary_from_member --\n\n       Update cluster's information when there is a primary, but the\n       update is coming from another replica set member.\n\n Returns:\n       None.\n\n Side Effects:\n       Alters cluster state.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1537:1-1537:64|-1|1|2","extent":"1536:1-1569:2|-1|1|0","bases":[],"derived":[],"vars":[115,116],"uses":[],"callees":[]},{"id":40,"usr":9501089682573484600,"detailed_name":"static void _mongoc_topology_description_set_topology_type_to_sharded(int *topology, int *server)","short_name_offset":12,"short_name_size":57,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_set_topology_type_to_sharded --\n\n       Sets topology's type to SHARDED.\n\n Returns:\n       None\n\n Side effects:\n       Alter's topology's type\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1587:1-1587:58|-1|1|2","extent":"1586:1-1591:2|-1|1|0","bases":[],"derived":[],"vars":[117,118],"uses":[],"callees":[]},{"id":41,"usr":15790569607066247728,"detailed_name":"static void _mongoc_topology_description_transition_unknown_to_rs_no_primary(int *topology, int *server)","short_name_offset":12,"short_name_size":64,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_transition_unknown_to_rs_no_primary --\n\n       Encapsulates transition from cluster state UNKNOWN to\n       RS_NO_PRIMARY. Sets the type to RS_NO_PRIMARY,\n       then updates the replica set accordingly.\n\n Returns:\n       None.\n\n Side effects:\n       Changes topology state.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1611:1-1611:65|-1|1|2","extent":"1610:1-1617:2|-1|1|0","bases":[],"derived":[],"vars":[119,120],"uses":[],"callees":[]},{"id":42,"usr":13389762338784884422,"detailed_name":"static void _mongoc_topology_description_remove_and_check_primary(int *topology, int *server)","short_name_offset":12,"short_name_size":53,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_remove_and_check_primary --\n\n       Remove the server and check if the topology still has a primary.\n\n Returns:\n       None.\n\n Side effects:\n       Removes server from topology and destroys it.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1635:1-1635:54|-1|1|2","extent":"1634:1-1640:2|-1|1|0","bases":[],"derived":[],"vars":[121,122],"uses":[],"callees":[]},{"id":43,"usr":16059882926857498182,"detailed_name":"static void _mongoc_topology_description_update_unknown_with_standalone(int *topology, int *server)","short_name_offset":12,"short_name_size":59,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_update_unknown_with_standalone --\n\n       If the cluster doesn't contain this server, do nothing.\n       Otherwise, if the topology only has one seed, change its\n       type to SINGLE. If the topology has multiple seeds, it does not\n       include us, so remove this server and destroy it.\n\n Returns:\n       None.\n\n Side effects:\n       Changes the topology type, might remove server from topology.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1661:1-1661:60|-1|1|2","extent":"1660:1-1677:2|-1|1|0","bases":[],"derived":[],"vars":[123,124],"uses":[],"callees":[]},{"id":44,"usr":3454147464742492142,"detailed_name":"static void _mongoc_topology_description_update_session_timeout(int *td)","short_name_offset":12,"short_name_size":51,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_update_session_timeout --\n\n      Fill out td.session_timeout_minutes.\n\n      Server Discovery and Monitoring Spec: \"set logicalSessionTimeoutMinutes\n      to the smallest logicalSessionTimeoutMinutes value among all\n      ServerDescriptions of known ServerType. If any ServerDescription of\n      known ServerType has a null logicalSessionTimeoutMinutes, then\n      logicalSessionTimeoutMinutes MUST be set to null.\"\n\n --------------------------------------------------------------------------","declarations":[],"spell":"1813:1-1813:52|-1|1|2","extent":"1812:1-1839:2|-1|1|0","bases":[],"derived":[],"vars":[126],"uses":[],"callees":[]},{"id":45,"usr":17612658593183504036,"detailed_name":"static void _mongoc_topology_description_check_compatible(int *td)","short_name_offset":12,"short_name_size":45,"kind":12,"storage":3,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_topology_description_check_compatible --\n\n      Fill out td.compatibility_error if any server's wire versions do\n      not overlap with ours. Otherwise clear td.compatibility_error.\n\n      If any server is incompatible, the topology as a whole is considered\n      incompatible.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1856:1-1856:46|-1|1|2","extent":"1855:1-1893:2|-1|1|0","bases":[],"derived":[],"vars":[127],"uses":[],"callees":[]},{"id":46,"usr":7209814259052901308,"detailed_name":"void mongoc_topology_description_handle_ismaster(int *topology, int server_id, const int *ismaster_response, int rtt_msec, const int *error)","short_name_offset":5,"short_name_size":43,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_handle_ismaster --\n\n      Handle an ismaster. This is called by the background SDAM process,\n      and by client when invalidating servers. If there was an error\n      calling ismaster, pass it in as @error.\n\n      NOTE: this method should only be called while holding the mutex on\n      the owning topology object.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1911:1-1911:44|-1|1|2","extent":"1910:1-1974:2|-1|1|0","bases":[],"derived":[],"vars":[128,129,130,131,132],"uses":[],"callees":[]},{"id":47,"usr":4778526262689577031,"detailed_name":"int mongoc_topology_description_has_readable_server(int *td, const int *prefs)","short_name_offset":4,"short_name_size":47,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_has_readable_server --\n\n      SDAM Monitoring Spec:\n      \"Determines if the topology has a readable server available.\"\n\n      NOTE: this method should only be called by user code in an SDAM\n      Monitoring callback, while the monitoring framework holds the mutex\n      on the owning topology object.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1991:1-1991:48|-1|1|2","extent":"1990:1-2003:2|-1|1|0","bases":[],"derived":[],"vars":[133,134],"uses":[],"callees":[]},{"id":48,"usr":10505721256059719847,"detailed_name":"int mongoc_topology_description_has_writable_server(int *td)","short_name_offset":4,"short_name_size":47,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_has_writable_server --\n\n      SDAM Monitoring Spec:\n      \"Determines if the topology has a writable server available.\"\n\n      NOTE: this method should only be called by user code in an SDAM\n      Monitoring callback, while the monitoring framework holds the mutex\n      on the owning topology object.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2020:1-2020:48|-1|1|2","extent":"2019:1-2031:2|-1|1|0","bases":[],"derived":[],"vars":[135],"uses":[],"callees":[]},{"id":49,"usr":12164534548319800947,"detailed_name":"const char *mongoc_topology_description_type(const int *td)","short_name_offset":12,"short_name_size":32,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_type --\n\n      Get this topology's type, one of the types defined in the Server\n      Discovery And Monitoring Spec.\n\n      NOTE: this method should only be called by user code in an SDAM\n      Monitoring callback, while the monitoring framework holds the mutex\n      on the owning topology object.\n\n Returns:\n      A string.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2051:1-2051:33|-1|1|2","extent":"2050:1-2071:2|-1|1|0","bases":[],"derived":[],"vars":[136],"uses":[],"callees":[]},{"id":50,"usr":3371942309659262525,"detailed_name":"int **mongoc_topology_description_get_servers(const int *td, int *n)","short_name_offset":6,"short_name_size":39,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n mongoc_topology_description_get_servers --\n\n      Fetch an array of server descriptions for all known servers in the\n      topology.\n\n Returns:\n      An array you must free with mongoc_server_descriptions_destroy_all.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"2087:1-2087:40|-1|1|2","extent":"2086:1-2116:2|-1|1|0","bases":[],"derived":[],"vars":[137,138],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":17448874674707589338,"detailed_name":"int *sd","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"30:45-30:47|0|3|2","extent":"30:16-30:47|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":8722575589464062510,"detailed_name":"void *server_","short_name_offset":6,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"51:37-51:44|1|3|2","extent":"51:31-51:44|1|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":2,"usr":11124416492542200660,"detailed_name":"void *ctx_","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"51:52-51:56|1|3|2","extent":"51:46-51:56|1|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":3,"usr":15292083490073729940,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"72:66-72:77|2|3|2","extent":"72:35-72:77|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":4,"usr":4330226324368320958,"detailed_name":"int heartbeat_msec","short_name_offset":4,"short_name_size":14,"hover":"","comments":"","declarations":[],"spell":"73:43-73:57|2|3|2","extent":"73:35-73:57|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":5,"usr":1104277954038023484,"detailed_name":"const int *src","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"117:76-117:79|3|3|2","extent":"117:39-117:79|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":6,"usr":5703454335519103894,"detailed_name":"int *dst","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"118:70-118:73|3|3|2","extent":"118:39-118:73|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":7,"usr":6060833331146039895,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"179:69-179:80|4|3|2","extent":"179:38-179:80|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":8,"usr":5110014212442362782,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"200:52-200:56|5|3|2","extent":"200:46-200:56|5|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":9,"usr":13288650303164425120,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"200:64-200:67|5|3|2","extent":"200:58-200:67|5|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":10,"usr":16348563699450446050,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"231:35-231:46|6|3|2","extent":"231:4-231:46|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":11,"usr":8095031869249104004,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"260:77-260:79|7|3|2","extent":"260:46-260:79|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":12,"usr":7117006273778758854,"detailed_name":"int *sd","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"261:75-261:77|7|3|2","extent":"261:46-261:77|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":13,"usr":18092112903056449249,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"281:35-281:37|8|3|2","extent":"281:4-281:37|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":14,"usr":13083522605143225146,"detailed_name":"int *sd","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"281:68-281:70|8|3|2","extent":"281:39-281:70|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":15,"usr":7117721747563763237,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"298:35-298:37|9|3|2","extent":"298:4-298:37|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":16,"usr":1069576741461394554,"detailed_name":"int *sd","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"298:68-298:70|9|3|2","extent":"298:39-298:70|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":17,"usr":6813691739503658418,"detailed_name":"int desc_type","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"305:37-305:46|10|3|2","extent":"305:4-305:46|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":18,"usr":8084259228004917522,"detailed_name":"int read_mode","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"306:23-306:32|10|3|2","extent":"306:4-306:32|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":19,"usr":1857498037869754245,"detailed_name":"int topology_type","short_name_offset":4,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"307:39-307:52|10|3|2","extent":"307:4-307:52|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":20,"usr":18195681299008111787,"detailed_name":"int _mongoc_suitable_data_t::read_mode","short_name_offset":29,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"358:23-358:32|2|2|2","extent":"358:4-358:32|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":21,"usr":17077533306036657219,"detailed_name":"int _mongoc_suitable_data_t::topology_type","short_name_offset":29,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"359:39-359:52|2|2|2","extent":"359:4-359:52|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":22,"usr":5026949990121567424,"detailed_name":"int *_mongoc_suitable_data_t::primary","short_name_offset":30,"short_name_size":7,"hover":"","comments":"OUT","declarations":[],"spell":"360:33-360:40|2|2|2","extent":"360:4-360:40|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":23,"usr":3658348408407478255,"detailed_name":"int **_mongoc_suitable_data_t::candidates","short_name_offset":31,"short_name_size":10,"hover":"","comments":"OUT","declarations":[],"spell":"361:34-361:44|2|2|2","extent":"361:4-361:44|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":24,"usr":999802004898973181,"detailed_name":"int _mongoc_suitable_data_t::candidates_len","short_name_offset":29,"short_name_size":14,"hover":"","comments":"OUT","declarations":[],"spell":"362:11-362:25|2|2|2","extent":"362:4-362:25|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":25,"usr":12834888642745979966,"detailed_name":"int _mongoc_suitable_data_t::has_secondary","short_name_offset":29,"short_name_size":13,"hover":"","comments":"OUT","declarations":[],"spell":"363:9-363:22|2|2|2","extent":"363:4-363:22|2|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":26,"usr":16122437768324249230,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"367:45-367:49|11|3|2","extent":"367:39-367:49|11|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":27,"usr":10070697236443608022,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"367:57-367:60|11|3|2","extent":"367:51-367:60|11|3|0","type":1,"uses":["370:62-370:65|11|3|12"],"kind":253,"storage":1},{"id":28,"usr":11539274607687923369,"detailed_name":"mongoc_suitable_data_t *data","short_name_offset":24,"short_name_size":4,"hover":"mongoc_suitable_data_t *data = (mongoc_suitable_data_t *) ctx","comments":"","declarations":[],"spell":"370:28-370:32|11|3|2","extent":"370:4-370:65|11|3|0","type":3,"uses":[],"kind":13,"storage":1},{"id":29,"usr":11508830609243135399,"detailed_name":"int *set","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"406:45-406:48|12|3|2","extent":"406:29-406:48|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":30,"usr":9973921669244794156,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"407:60-407:68|12|3|2","extent":"407:29-407:68|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":31,"usr":15464440838788604293,"detailed_name":"const int *read_pref","short_name_offset":11,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"408:56-408:65|12|3|2","extent":"408:29-408:65|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":32,"usr":3296181518522595609,"detailed_name":"int local_threshold_ms","short_name_offset":4,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"409:36-409:54|12|3|2","extent":"409:29-409:54|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":33,"usr":10234904933443754242,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"425:40-425:44|13|3|2","extent":"425:34-425:44|13|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":34,"usr":17461451688450830109,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"425:52-425:55|13|3|2","extent":"425:46-425:55|13|3|0","type":1,"uses":["428:62-428:65|13|3|12"],"kind":253,"storage":1},{"id":35,"usr":4467788550458292787,"detailed_name":"mongoc_suitable_data_t *data","short_name_offset":24,"short_name_size":4,"hover":"mongoc_suitable_data_t *data = (mongoc_suitable_data_t *) ctx","comments":"","declarations":[],"spell":"428:28-428:32|13|3|2","extent":"428:4-428:65|13|3|0","type":3,"uses":[],"kind":13,"storage":1},{"id":36,"usr":14565503421599295589,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"459:41-459:43|14|3|2","extent":"459:4-459:43|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":37,"usr":3669786464258334747,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"461:8-461:9|14|3|2","extent":"461:4-461:9|14|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":38,"usr":8880341817111556355,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"492:41-492:43|15|3|2","extent":"492:4-492:43|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":39,"usr":16631241654177472778,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"494:8-494:9|15|3|2","extent":"494:4-494:9|15|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":40,"usr":3352675531691358079,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"526:41-526:43|16|3|2","extent":"526:4-526:43|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":41,"usr":17867673685165666638,"detailed_name":"int max_staleness_seconds","short_name_offset":4,"short_name_size":21,"hover":"","comments":"","declarations":[],"spell":"527:12-527:33|16|3|2","extent":"527:4-527:33|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":42,"usr":544748099366502988,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"528:18-528:23|16|3|2","extent":"528:4-528:23|16|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":43,"usr":10059629160476583708,"detailed_name":"int *set","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"595:20-595:23|17|3|2","extent":"595:4-595:23|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":44,"usr":14158975374906511347,"detailed_name":"int optype","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"596:23-596:29|17|3|2","extent":"596:4-596:29|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":45,"usr":9618639622320839210,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"597:35-597:43|17|3|2","extent":"597:4-597:43|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":46,"usr":10597174133151105236,"detailed_name":"const int *read_pref","short_name_offset":11,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"598:31-598:40|17|3|2","extent":"598:4-598:40|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":47,"usr":14402015554800670113,"detailed_name":"int local_threshold_ms","short_name_offset":4,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"599:11-599:29|17|3|2","extent":"599:4-599:29|17|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":48,"usr":11123452942727280921,"detailed_name":"mongoc_suitable_data_t data","short_name_offset":23,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"601:27-601:31|17|3|2","extent":"601:4-601:31|17|3|0","type":3,"uses":[],"kind":13,"storage":1},{"id":49,"usr":2859709723311837236,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"605:8-605:9|17|3|2","extent":"605:4-605:9|17|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":50,"usr":4750202881236822470,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"750:75-750:77|18|3|2","extent":"750:44-750:77|18|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":51,"usr":17760952828146490263,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"752:8-752:9|18|3|2","extent":"752:4-752:9|18|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":52,"usr":3032660548380370515,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"789:68-789:76|19|3|2","extent":"789:37-789:76|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":53,"usr":16590935283440515255,"detailed_name":"int optype","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"790:56-790:62|19|3|2","extent":"790:37-790:62|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":54,"usr":10346542199834159110,"detailed_name":"const int *read_pref","short_name_offset":11,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"791:64-791:73|19|3|2","extent":"791:37-791:73|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":55,"usr":3917852240069846678,"detailed_name":"int local_threshold_ms","short_name_offset":4,"short_name_size":18,"hover":"","comments":"","declarations":[],"spell":"792:45-792:63|19|3|2","extent":"792:37-792:63|19|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":56,"usr":3161760847555844001,"detailed_name":"int rand_n","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"796:8-796:14|19|3|2","extent":"796:4-796:14|19|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":57,"usr":11716003993626252957,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"861:35-861:46|20|3|2","extent":"861:4-861:46|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":58,"usr":2078532901427617171,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"861:57-861:59|20|3|2","extent":"861:48-861:59|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":59,"usr":16657844941550074770,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"861:75-861:80|20|3|2","extent":"861:61-861:80|20|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":60,"usr":11581784268704305753,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"897:35-897:46|21|3|2","extent":"897:4-897:46|21|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":61,"usr":565270670456657007,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"898:33-898:39|21|3|2","extent":"898:4-898:39|21|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":62,"usr":2583238496167557868,"detailed_name":"const char *_mongoc_address_and_id_t::address","short_name_offset":38,"short_name_size":7,"hover":"","comments":"IN","declarations":[],"spell":"908:16-908:23|4|2|2","extent":"908:4-908:23|4|2|0","type":6,"uses":["977:9-977:16|24|3|20"],"kind":8,"storage":0},{"id":63,"usr":301597219447339417,"detailed_name":"int _mongoc_address_and_id_t::found","short_name_offset":30,"short_name_size":5,"hover":"","comments":"OUT","declarations":[],"spell":"909:9-909:14|4|2|2","extent":"909:4-909:14|4|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":64,"usr":10129820496448630629,"detailed_name":"int _mongoc_address_and_id_t::id","short_name_offset":30,"short_name_size":2,"hover":"","comments":"OUT","declarations":[],"spell":"910:13-910:15|4|2|2","extent":"910:4-910:15|4|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":65,"usr":7385524329532178529,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"915:51-915:55|22|3|2","extent":"915:45-915:55|22|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":66,"usr":7232806902593168518,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"916:51-916:54|22|3|2","extent":"916:45-916:54|22|3|0","type":1,"uses":["919:64-919:67|22|3|12"],"kind":253,"storage":1},{"id":67,"usr":16768965180699749241,"detailed_name":"mongoc_address_and_id_t *data","short_name_offset":25,"short_name_size":4,"hover":"mongoc_address_and_id_t *data = (mongoc_address_and_id_t *) ctx","comments":"","declarations":[],"spell":"919:29-919:33|22|3|2","extent":"919:4-919:67|22|3|0","type":5,"uses":[],"kind":13,"storage":1},{"id":68,"usr":12555515136016677624,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"945:78-945:80|23|3|2","extent":"945:47-945:80|23|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":69,"usr":891671209510635893,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"968:35-968:46|24|3|2","extent":"968:4-968:46|24|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":70,"usr":9417549764472588016,"detailed_name":"const char *address","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"969:16-969:23|24|3|2","extent":"969:4-969:23|24|3|0","type":6,"uses":["975:17-975:24|24|3|12","977:19-977:26|24|3|12"],"kind":253,"storage":1},{"id":71,"usr":8296159742366333171,"detailed_name":"int *id","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"970:14-970:16|24|3|2","extent":"970:4-970:16|24|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":72,"usr":6500258674514102136,"detailed_name":"mongoc_address_and_id_t data","short_name_offset":24,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"972:28-972:32|24|3|2","extent":"972:4-972:32|24|3|0","type":5,"uses":["977:4-977:8|24|3|4"],"kind":13,"storage":1},{"id":73,"usr":6482662492443173987,"detailed_name":"const char *_mongoc_address_and_type_t::address","short_name_offset":40,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"990:16-990:23|7|2|2","extent":"990:4-990:23|7|2|0","type":6,"uses":["1036:9-1036:16|26|3|20"],"kind":8,"storage":0},{"id":74,"usr":13672187509012733909,"detailed_name":"int _mongoc_address_and_type_t::type","short_name_offset":32,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"991:37-991:41|7|2|2","extent":"991:4-991:41|7|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":75,"usr":5016369262803381466,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"995:40-995:44|25|3|2","extent":"995:34-995:44|25|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":76,"usr":16466952181380442292,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"995:52-995:55|25|3|2","extent":"995:46-995:55|25|3|0","type":1,"uses":["998:68-998:71|25|3|12"],"kind":253,"storage":1},{"id":77,"usr":11799434171869438213,"detailed_name":"mongoc_address_and_type_t *data","short_name_offset":27,"short_name_size":4,"hover":"mongoc_address_and_type_t *data = (mongoc_address_and_type_t *) ctx","comments":"","declarations":[],"spell":"998:31-998:35|25|3|2","extent":"998:4-998:71|25|3|0","type":8,"uses":[],"kind":13,"storage":1},{"id":78,"usr":14725942307771319693,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"1026:35-1026:46|26|3|2","extent":"1026:4-1026:46|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":79,"usr":2541038476796387009,"detailed_name":"const char *address","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1027:16-1027:23|26|3|2","extent":"1027:4-1027:23|26|3|0","type":6,"uses":["1033:17-1033:24|26|3|12","1036:19-1036:26|26|3|12"],"kind":253,"storage":1},{"id":80,"usr":825812211798344172,"detailed_name":"int type","short_name_offset":4,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1028:37-1028:41|26|3|2","extent":"1028:4-1028:41|26|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":81,"usr":12110319441988139716,"detailed_name":"mongoc_address_and_type_t data","short_name_offset":26,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1030:30-1030:34|26|3|2","extent":"1030:4-1030:34|26|3|0","type":8,"uses":["1036:4-1036:8|26|3|4"],"kind":13,"storage":1},{"id":82,"usr":5542689895679647086,"detailed_name":"int *description","short_name_offset":5,"short_name_size":11,"hover":"","comments":"","declarations":[],"spell":"1060:35-1060:46|27|3|2","extent":"1060:4-1060:46|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":83,"usr":12923051076435541216,"detailed_name":"int type","short_name_offset":4,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1061:39-1061:43|27|3|2","extent":"1061:4-1061:43|27|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":84,"usr":15491332991236966956,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1068:49-1068:57|28|3|2","extent":"1068:18-1068:57|28|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":85,"usr":4012755098045663650,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1099:35-1099:43|29|3|2","extent":"1099:4-1099:43|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":86,"usr":15961768532318881116,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1099:74-1099:80|29|3|2","extent":"1099:45-1099:80|29|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":87,"usr":16253286297406824149,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1121:35-1121:43|30|3|2","extent":"1121:4-1121:43|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":88,"usr":3020276059174014027,"detailed_name":"int id","short_name_offset":4,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1122:13-1122:15|30|3|2","extent":"1122:4-1122:15|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":89,"usr":5516286752678218424,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1123:24-1123:29|30|3|2","extent":"1123:4-1123:29|30|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":90,"usr":16576099091694867369,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1152:72-1152:80|31|3|2","extent":"1152:41-1152:80|31|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":91,"usr":12155036297561925750,"detailed_name":"const char *server","short_name_offset":12,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1153:53-1153:59|31|3|2","extent":"1153:41-1153:59|31|3|0","type":6,"uses":["1160:17-1160:23|31|3|12"],"kind":253,"storage":1},{"id":92,"usr":17314201395742709787,"detailed_name":"int *id","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1154:51-1154:53|31|3|2","extent":"1154:41-1154:53|31|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":93,"usr":11908667813896192980,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1221:35-1221:37|32|3|2","extent":"1221:4-1221:37|32|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":94,"usr":6178598517034718984,"detailed_name":"const int *reply","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1221:53-1221:58|32|3|2","extent":"1221:39-1221:58|32|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":95,"usr":12951406013917738097,"detailed_name":"const int *data","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1225:19-1225:23|32|3|2","extent":"1225:4-1225:23|32|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":96,"usr":6022624882685504491,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1252:35-1252:43|33|3|2","extent":"1252:4-1252:43|33|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":97,"usr":3032166231778531146,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1252:74-1252:80|33|3|2","extent":"1252:45-1252:80|33|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":98,"usr":16646330778161246969,"detailed_name":"const int *[3] rs_members","short_name_offset":15,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"1255:18-1255:28|33|3|2","type":0,"uses":[],"kind":13,"storage":1},{"id":99,"usr":5496667447138098320,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"1256:8-1256:9|33|3|2","extent":"1256:4-1256:9|33|3|0","type":0,"uses":["1262:9-1262:10|33|3|20","1262:16-1262:17|33|3|12","1262:23-1262:24|33|3|28"],"kind":13,"storage":1},{"id":100,"usr":16156300466364040601,"detailed_name":"int *_mongoc_primary_and_topology_t::topology","short_name_offset":37,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1273:35-1273:43|9|2|2","extent":"1273:4-1273:43|9|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":101,"usr":6344100982568743483,"detailed_name":"int *_mongoc_primary_and_topology_t::primary","short_name_offset":37,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1274:33-1274:40|9|2|2","extent":"1274:4-1274:40|9|2|0","type":0,"uses":[],"kind":8,"storage":0},{"id":102,"usr":4256661635057573403,"detailed_name":"void *item","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1279:61-1279:65|34|3|2","extent":"1279:55-1279:65|34|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":103,"usr":3343334700510581346,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1279:73-1279:76|34|3|2","extent":"1279:67-1279:76|34|3|0","type":1,"uses":["1282:76-1282:79|34|3|12"],"kind":253,"storage":1},{"id":104,"usr":18341026813668188598,"detailed_name":"mongoc_primary_and_topology_t *data","short_name_offset":31,"short_name_size":4,"hover":"mongoc_primary_and_topology_t *data = (mongoc_primary_and_topology_t *) ctx","comments":"","declarations":[],"spell":"1282:35-1282:39|34|3|2","extent":"1282:4-1282:79|34|3|0","type":10,"uses":[],"kind":13,"storage":1},{"id":105,"usr":15531838392974299326,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1297:35-1297:43|35|3|2","extent":"1297:4-1297:43|35|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":106,"usr":3072591416078765558,"detailed_name":"int *primary","short_name_offset":5,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1298:33-1298:40|35|3|2","extent":"1298:4-1298:40|35|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":107,"usr":54792995541307006,"detailed_name":"int i","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"1301:8-1301:9|35|3|2","extent":"1301:4-1301:9|35|3|0","type":0,"uses":[],"kind":13,"storage":1},{"id":108,"usr":10755998688394208240,"detailed_name":"const char *address","short_name_offset":12,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"1303:16-1303:23|35|3|2","extent":"1303:4-1303:23|35|3|0","type":6,"uses":[],"kind":13,"storage":1},{"id":109,"usr":11392584259259600708,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1353:71-1353:77|36|3|2","extent":"1353:42-1353:77|36|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":110,"usr":15930022336812335061,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1396:35-1396:43|37|3|2","extent":"1396:4-1396:43|37|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":111,"usr":6654136023846130589,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1396:74-1396:80|37|3|2","extent":"1396:45-1396:80|37|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":112,"usr":2404800171893554575,"detailed_name":"mongoc_primary_and_topology_t data","short_name_offset":30,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1398:34-1398:38|37|3|2","extent":"1398:4-1398:38|37|3|0","type":10,"uses":[],"kind":13,"storage":1},{"id":113,"usr":5602291051679712925,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1485:35-1485:43|38|3|2","extent":"1485:4-1485:43|38|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":114,"usr":12150933625686610720,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1485:74-1485:80|38|3|2","extent":"1485:45-1485:80|38|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":115,"usr":14697323035483393857,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1538:35-1538:43|39|3|2","extent":"1538:4-1538:43|39|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":116,"usr":10414820504576505721,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1538:74-1538:80|39|3|2","extent":"1538:45-1538:80|39|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":117,"usr":16003207274196157829,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1588:35-1588:43|40|3|2","extent":"1588:4-1588:43|40|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":118,"usr":1197285595351931977,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1588:74-1588:80|40|3|2","extent":"1588:45-1588:80|40|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":119,"usr":12553233632572588513,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1612:35-1612:43|41|3|2","extent":"1612:4-1612:43|41|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":120,"usr":9056356244648522979,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1612:74-1612:80|41|3|2","extent":"1612:45-1612:80|41|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":121,"usr":5081506535899530654,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1636:35-1636:43|42|3|2","extent":"1636:4-1636:43|42|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":122,"usr":2109011403886110131,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1636:74-1636:80|42|3|2","extent":"1636:45-1636:80|42|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":123,"usr":1995265328872420046,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1662:35-1662:43|43|3|2","extent":"1662:4-1662:43|43|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":124,"usr":8245982086963980286,"detailed_name":"int *server","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1662:74-1662:80|43|3|2","extent":"1662:45-1662:80|43|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":125,"usr":16664511517809703418,"detailed_name":"transition_t gSDAMTransitionTable","short_name_offset":13,"short_name_size":20,"hover":"","comments":"","declarations":[],"spell":"1702:14-1702:34|-1|1|2","extent":"1702:1-1702:34|-1|1|0","type":12,"uses":[],"kind":13,"storage":1},{"id":126,"usr":6134838019386065316,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1814:35-1814:37|44|3|2","extent":"1814:4-1814:37|44|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":127,"usr":11979570302427258963,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1857:35-1857:37|45|3|2","extent":"1857:4-1857:37|45|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":128,"usr":18233330457362328866,"detailed_name":"int *topology","short_name_offset":5,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1912:35-1912:43|46|3|2","extent":"1912:4-1912:43|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":129,"usr":5080679545651657557,"detailed_name":"int server_id","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1913:13-1913:22|46|3|2","extent":"1913:4-1913:22|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":130,"usr":1624423215253572678,"detailed_name":"const int *ismaster_response","short_name_offset":11,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"1914:18-1914:35|46|3|2","extent":"1914:4-1914:35|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":131,"usr":9546123827240859940,"detailed_name":"int rtt_msec","short_name_offset":4,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1915:12-1915:20|46|3|2","extent":"1915:4-1915:20|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":132,"usr":5011682092397091697,"detailed_name":"const int *error","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1916:24-1916:29|46|3|2","extent":"1916:4-1916:29|46|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":133,"usr":6015563123214230470,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"1992:35-1992:37|47|3|2","extent":"1992:4-1992:37|47|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":134,"usr":10006997869833242668,"detailed_name":"const int *prefs","short_name_offset":11,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1992:66-1992:71|47|3|2","extent":"1992:39-1992:71|47|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":135,"usr":5228954495923376846,"detailed_name":"int *td","short_name_offset":5,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"2021:35-2021:37|48|3|2","extent":"2021:4-2021:37|48|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":136,"usr":14393057296660666019,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"2051:72-2051:74|49|3|2","extent":"2051:35-2051:74|49|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":137,"usr":17734835622533672467,"detailed_name":"const int *td","short_name_offset":11,"short_name_size":2,"hover":"","comments":"","declarations":[],"spell":"2088:41-2088:43|50|3|2","extent":"2088:4-2088:43|50|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":138,"usr":17616744915327344508,"detailed_name":"int *n","short_name_offset":5,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"2088:53-2088:54|50|3|2","extent":"2088:45-2088:54|50|3|0","type":0,"uses":[],"kind":253,"storage":1}]}