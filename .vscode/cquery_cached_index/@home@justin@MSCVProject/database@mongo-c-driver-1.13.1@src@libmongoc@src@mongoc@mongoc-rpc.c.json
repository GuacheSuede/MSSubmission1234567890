16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/mongoc-rpc.c","args_hash":10433645398913005206,"includes":[{"line":159,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-delete.def"},{"line":160,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-get-more.def"},{"line":161,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-insert.def"},{"line":162,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-kill-cursors.def"},{"line":163,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-msg.def"},{"line":164,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-query.def"},{"line":165,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply.def"},{"line":166,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-compressed.def"},{"line":167,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-update.def"},{"line":219,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-delete.def"},{"line":220,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-get-more.def"},{"line":221,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-insert.def"},{"line":222,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-kill-cursors.def"},{"line":223,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-msg.def"},{"line":224,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-query.def"},{"line":225,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply.def"},{"line":226,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-compressed.def"},{"line":227,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-update.def"},{"line":248,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-delete.def"},{"line":249,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-get-more.def"},{"line":250,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-insert.def"},{"line":251,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-kill-cursors.def"},{"line":252,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-msg.def"},{"line":253,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-query.def"},{"line":254,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply.def"},{"line":255,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-compressed.def"},{"line":256,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-update.def"},{"line":394,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-delete.def"},{"line":395,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-get-more.def"},{"line":396,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-insert.def"},{"line":397,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-kill-cursors.def"},{"line":398,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-msg.def"},{"line":399,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-query.def"},{"line":400,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply.def"},{"line":401,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-compressed.def"},{"line":402,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-update.def"},{"line":553,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-delete.def"},{"line":554,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-get-more.def"},{"line":555,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-header.def"},{"line":556,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-insert.def"},{"line":557,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-kill-cursors.def"},{"line":558,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-msg.def"},{"line":559,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-query.def"},{"line":560,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply.def"},{"line":561,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-reply-header.def"},{"line":562,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-compressed.def"},{"line":563,"resolved_path":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libmongoc/src/mongoc/op-update.def"}],"dependencies":[],"skipped_by_preprocessor":["657:1-694:7","695:1-697:7","704:1-741:7","742:1-744:7"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4,5,6,7,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,32,33,34,36,37,38,40,41,42,44,45,46,47],"uses":[]},{"id":1,"usr":6911600360554855446,"detailed_name":"_mongoc_cluster_t","short_name_offset":0,"short_name_size":17,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[8],"uses":["845:30-845:47|-1|1|4"]},{"id":2,"usr":13,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[12,13,26,31,35,39,43],"uses":[]}],"funcs":[{"id":0,"usr":1795135949689783309,"detailed_name":"void _mongoc_rpc_gather(int *rpc, int *array)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_gather --\n\n       Takes a (native endian) rpc struct and gathers the buffer.\n       Caller should swab to little endian after calling gather.\n\n       Gather, swab, compress write.\n       Read, scatter, uncompress, swab\n\n--------------------------------------------------------------------------","declarations":[],"spell":"598:1-598:19|-1|1|2","extent":"597:1-651:2|-1|1|0","bases":[],"derived":[],"vars":[0,1],"uses":[],"callees":[]},{"id":1,"usr":880867087512600547,"detailed_name":"void _mongoc_rpc_swab_to_le(int *rpc)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"655:1-655:23|-1|1|2","extent":"654:1-698:2|-1|1|0","bases":[],"derived":[],"vars":[2],"uses":[],"callees":[]},{"id":2,"usr":554003712429082628,"detailed_name":"void _mongoc_rpc_swab_from_le(int *rpc)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"702:1-702:25|-1|1|2","extent":"701:1-745:2|-1|1|0","bases":[],"derived":[],"vars":[3],"uses":[],"callees":[]},{"id":3,"usr":726713200924247450,"detailed_name":"void _mongoc_rpc_printf(int *rpc)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"749:1-749:19|-1|1|2","extent":"748:1-784:2|-1|1|0","bases":[],"derived":[],"vars":[4],"uses":[],"callees":[]},{"id":4,"usr":10763208460677253914,"detailed_name":"int _mongoc_rpc_decompress(int *rpc_le, int *buf, int buflen)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_decompress --\n\n       Takes a (little endian) rpc struct assumed to be OP_COMPRESSED\n       and decompresses the opcode into its original opcode.\n       The in-place updated rpc struct remains little endian.\n\n Side effects:\n       Overwrites the RPC, along with the provided buf with the\n       compressed results.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"803:1-803:23|-1|1|2","extent":"802:1-826:2|-1|1|0","bases":[],"derived":[],"vars":[5,6,7],"uses":[],"callees":[]},{"id":5,"usr":5408803427885839617,"detailed_name":"char *_mongoc_rpc_compress(struct _mongoc_cluster_t *cluster, int compressor_id, int *rpc_le, int *error)","short_name_offset":6,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_compress --\n\n       Takes a (little endian) rpc struct and creates a OP_COMPRESSED\n       compressed opcode based on the provided compressor_id.\n       The in-place updated rpc struct remains little endian.\n\n Side effects:\n       Overwrites the RPC, and clears and overwrites the cluster buffer\n       with the compressed results.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"845:1-845:21|-1|1|2","extent":"844:1-915:2|-1|1|0","bases":[],"derived":[],"vars":[8,9,10,11,12,13,14],"uses":[],"callees":[]},{"id":6,"usr":6235210453836863556,"detailed_name":"int _mongoc_rpc_scatter(int *rpc, const int *buf, int buflen)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_scatter --\n\n       Takes a (little endian) rpc struct and scatters the buffer.\n       Caller should check if resulting opcode is OP_COMPRESSED\n       BEFORE swabbing to native endianness.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"930:1-930:20|-1|1|2","extent":"929:1-984:2|-1|1|0","bases":[],"derived":[],"vars":[15,16,17],"uses":[],"callees":[]},{"id":7,"usr":8668967653871282029,"detailed_name":"int _mongoc_rpc_scatter_reply_header_only(int *rpc, const int *buf, int buflen)","short_name_offset":4,"short_name_size":37,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"988:1-988:38|-1|1|2","extent":"987:1-998:2|-1|1|0","bases":[],"derived":[],"vars":[18,19,20],"uses":[],"callees":[]},{"id":8,"usr":4145404774492665391,"detailed_name":"int _mongoc_rpc_get_first_document(int *rpc, int *reply)","short_name_offset":4,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1001:1-1001:31|-1|1|2","extent":"1000:1-1009:2|-1|1|0","bases":[],"derived":[],"vars":[21,22],"uses":[],"callees":[]},{"id":9,"usr":17087600013924987278,"detailed_name":"int _mongoc_rpc_reply_get_first(int *reply, int *bson)","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1012:1-1012:28|-1|1|2","extent":"1011:1-1027:2|-1|1|0","bases":[],"derived":[],"vars":[23,24],"uses":[],"callees":[]},{"id":10,"usr":12047143696801271421,"detailed_name":"void _mongoc_rpc_prep_command(int *rpc, const char *cmd_ns, int *cmd)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_prep_command --\n\n       Prepare an RPC for mongoc_cluster_run_command_rpc. @cmd_ns and\n       @cmd must not be freed or modified while the RPC is in use.\n\n Side effects:\n       Fills out the RPC, including pointers into @cmd_ns and @command.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1045:1-1045:25|-1|1|2","extent":"1044:1-1066:2|-1|1|0","bases":[],"derived":[],"vars":[25,26,27],"uses":[],"callees":[]},{"id":11,"usr":13842254154201346043,"detailed_name":"static int _parse_error_reply(const int *doc, int check_wce, int *code, const char **msg)","short_name_offset":11,"short_name_size":18,"kind":12,"storage":3,"hover":"","comments":"returns true if an error was found.","declarations":[],"spell":"1071:1-1071:19|-1|1|2","extent":"1070:1-1127:2|-1|1|0","bases":[],"derived":[],"vars":[28,29,30,31],"uses":[],"callees":[]},{"id":12,"usr":18125085681870805708,"detailed_name":"int _mongoc_cmd_check_ok(const int *doc, int error_api_version, int *error)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_cmd_check_ok --\n\n       Check if a server reply document is an error message.\n       Optionally fill out a bson_error_t from the server error.\n       Does *not* check for writeConcernError.\n\n Returns:\n       false if @doc is an error message, true otherwise.\n\n Side effects:\n       If @doc is an error reply and @error is not NULL, set its\n       domain, code, and message.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1149:1-1149:21|-1|1|2","extent":"1148:1-1183:2|-1|1|0","bases":[],"derived":[],"vars":[32,33,34,35],"uses":[],"callees":[]},{"id":13,"usr":5337530852999270922,"detailed_name":"int _mongoc_cmd_check_ok_no_wce(const int *doc, int error_api_version, int *error)","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_cmd_check_ok_no_wce --\n\n       Check if a server reply document is an error message.\n       Optionally fill out a bson_error_t from the server error.\n       If the response contains a writeConcernError, this is considered\n       an error and returns false.\n\n Returns:\n       false if @doc is an error message, true otherwise.\n\n Side effects:\n       If @doc is an error reply and @error is not NULL, set its\n       domain, code, and message.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1205:1-1205:28|-1|1|2","extent":"1204:1-1233:2|-1|1|0","bases":[],"derived":[],"vars":[36,37,38,39],"uses":[],"callees":[]},{"id":14,"usr":17459440452600824268,"detailed_name":"static void _mongoc_populate_query_error(const int *doc, int error_api_version, int *error)","short_name_offset":12,"short_name_size":28,"kind":12,"storage":3,"hover":"","comments":"helper function to parse error reply document to an OP_QUERY","declarations":[],"spell":"1238:1-1238:29|-1|1|2","extent":"1237:1-1266:2|-1|1|0","bases":[],"derived":[],"vars":[40,41,42,43],"uses":[],"callees":[]},{"id":15,"usr":9178524603115386103,"detailed_name":"int _mongoc_rpc_check_ok(int *rpc, int error_api_version, int *error, int *error_doc)","short_name_offset":4,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n _mongoc_rpc_check_ok --\n\n       Check if a server OP_REPLY is an error message.\n       Optionally fill out a bson_error_t from the server error.\n       @error_document must be an initialized bson_t or NULL.\n       Does *not* check for writeConcernError.\n\n Returns:\n       false if the reply is an error message, true otherwise.\n\n Side effects:\n       If rpc is an error reply and @error is not NULL, set its\n       domain, code, and message.\n\n       If rpc is an error reply and @error_document is not NULL,\n       it is reinitialized with the server reply.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"1293:1-1293:21|-1|1|2","extent":"1292:1-1341:2|-1|1|0","bases":[],"derived":[],"vars":[44,45,46,47],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":4849282512083978174,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"598:35-598:38|0|3|2","extent":"598:21-598:38|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":1,"usr":12874600906442188349,"detailed_name":"int *array","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"598:56-598:61|0|3|2","extent":"598:40-598:61|0|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":2,"usr":744446120858915890,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"655:39-655:42|1|3|2","extent":"655:25-655:42|1|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":3,"usr":12547068506593869701,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"702:41-702:44|2|3|2","extent":"702:27-702:44|2|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":4,"usr":2588049966100579005,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"749:35-749:38|3|3|2","extent":"749:21-749:38|3|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":5,"usr":4415913200700249272,"detailed_name":"int *rpc_le","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"803:39-803:45|4|3|2","extent":"803:25-803:45|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":6,"usr":17179411677558369068,"detailed_name":"int *buf","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"803:56-803:59|4|3|2","extent":"803:47-803:59|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":7,"usr":9291978184161017386,"detailed_name":"int buflen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"803:68-803:74|4|3|2","extent":"803:61-803:74|4|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":8,"usr":7394679027191677425,"detailed_name":"struct _mongoc_cluster_t *cluster","short_name_offset":26,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"845:49-845:56|5|3|2","extent":"845:23-845:56|5|3|0","type":1,"uses":[],"kind":253,"storage":1},{"id":9,"usr":13865568884292071658,"detailed_name":"int compressor_id","short_name_offset":4,"short_name_size":13,"hover":"","comments":"","declarations":[],"spell":"846:31-846:44|5|3|2","extent":"846:23-846:44|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":10,"usr":7393170970797661649,"detailed_name":"int *rpc_le","short_name_offset":5,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"847:37-847:43|5|3|2","extent":"847:23-847:43|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":11,"usr":1572471516372214744,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"848:37-848:42|5|3|2","extent":"848:23-848:42|5|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":12,"usr":565565019196530455,"detailed_name":"char *output","short_name_offset":6,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"850:10-850:16|5|3|2","extent":"850:4-850:16|5|3|0","type":2,"uses":["907:14-907:20|5|3|12","913:15-913:21|5|3|12"],"kind":13,"storage":1},{"id":13,"usr":1744484421261842011,"detailed_name":"char *data","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"853:10-853:14|5|3|2","extent":"853:4-853:14|5|3|0","type":2,"uses":["876:18-876:22|5|3|12","900:18-900:22|5|3|12","912:15-912:19|5|3|12"],"kind":13,"storage":1},{"id":14,"usr":13386688335623912911,"detailed_name":"int size","short_name_offset":4,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"854:8-854:12|5|3|2","extent":"854:4-854:12|5|3|0","type":0,"uses":["866:17-866:21|5|3|12"],"kind":13,"storage":1},{"id":15,"usr":803269898944882330,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"930:36-930:39|6|3|2","extent":"930:22-930:39|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":16,"usr":9931660430196432140,"detailed_name":"const int *buf","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"930:56-930:59|6|3|2","extent":"930:41-930:59|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":17,"usr":6300757742421212133,"detailed_name":"int buflen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"930:68-930:74|6|3|2","extent":"930:61-930:74|6|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":18,"usr":13642584535496087149,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"988:54-988:57|7|3|2","extent":"988:40-988:57|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":19,"usr":313471935714137772,"detailed_name":"const int *buf","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"989:55-989:58|7|3|2","extent":"989:40-989:58|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":20,"usr":7088531471157515583,"detailed_name":"int buflen","short_name_offset":4,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"990:47-990:53|7|3|2","extent":"990:40-990:53|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":21,"usr":15904603896720751085,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1001:47-1001:50|8|3|2","extent":"1001:33-1001:50|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":22,"usr":6052540620721725565,"detailed_name":"int *reply","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1001:60-1001:65|8|3|2","extent":"1001:52-1001:65|8|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":23,"usr":1623159443215922967,"detailed_name":"int *reply","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1012:50-1012:55|9|3|2","extent":"1012:30-1012:55|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":24,"usr":6029001422899907816,"detailed_name":"int *bson","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1012:65-1012:69|9|3|2","extent":"1012:57-1012:69|9|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":25,"usr":16382250421038844387,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1045:41-1045:44|10|3|2","extent":"1045:27-1045:44|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":26,"usr":17416554205195374685,"detailed_name":"const char *cmd_ns","short_name_offset":12,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"1046:39-1046:45|10|3|2","extent":"1046:27-1046:45|10|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":27,"usr":17794601826910678544,"detailed_name":"int *cmd","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1047:41-1047:44|10|3|2","extent":"1047:27-1047:44|10|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":28,"usr":4691747854655568046,"detailed_name":"const int *doc","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1071:35-1071:38|11|3|2","extent":"1071:21-1071:38|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":29,"usr":12031869536414461934,"detailed_name":"int check_wce","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1072:26-1072:35|11|3|2","extent":"1072:21-1072:35|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":30,"usr":3239296740535675699,"detailed_name":"int *code","short_name_offset":5,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"1073:31-1073:35|11|3|2","extent":"1073:21-1073:35|11|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":31,"usr":6004214555940603299,"detailed_name":"const char **msg","short_name_offset":13,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1074:34-1074:37|11|3|2","extent":"1074:21-1074:37|11|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":32,"usr":14001277411715749980,"detailed_name":"const int *doc","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1149:37-1149:40|12|3|2","extent":"1149:23-1149:40|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":33,"usr":12214995102480319673,"detailed_name":"int error_api_version","short_name_offset":4,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"1150:31-1150:48|12|3|2","extent":"1150:23-1150:48|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":34,"usr":6167028466177891392,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1151:37-1151:42|12|3|2","extent":"1151:23-1151:42|12|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":35,"usr":14682080572369437198,"detailed_name":"const char *msg","short_name_offset":12,"short_name_size":3,"hover":"const char *msg = \"Unknown command error\"","comments":"","declarations":[],"spell":"1158:16-1158:19|12|3|2","extent":"1158:4-1158:45|12|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":36,"usr":15390856241799867828,"detailed_name":"const int *doc","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1205:44-1205:47|13|3|2","extent":"1205:30-1205:47|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":37,"usr":5965715074114733381,"detailed_name":"int error_api_version","short_name_offset":4,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"1206:38-1206:55|13|3|2","extent":"1206:30-1206:55|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":38,"usr":16661955812071120864,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1207:44-1207:49|13|3|2","extent":"1207:30-1207:49|13|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":39,"usr":17712540594105502860,"detailed_name":"const char *msg","short_name_offset":12,"short_name_size":3,"hover":"const char *msg = \"Unknown command error\"","comments":"","declarations":[],"spell":"1213:16-1213:19|13|3|2","extent":"1213:4-1213:45|13|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":40,"usr":2693877096212842784,"detailed_name":"const int *doc","short_name_offset":11,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1238:45-1238:48|14|3|2","extent":"1238:31-1238:48|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":41,"usr":5063019877124407707,"detailed_name":"int error_api_version","short_name_offset":4,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"1239:39-1239:56|14|3|2","extent":"1239:31-1239:56|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":42,"usr":5684562128107113532,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1240:45-1240:50|14|3|2","extent":"1240:31-1240:50|14|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":43,"usr":704921086134600195,"detailed_name":"const char *msg","short_name_offset":12,"short_name_size":3,"hover":"const char *msg = \"Unknown query failure\"","comments":"","declarations":[],"spell":"1247:16-1247:19|14|3|2","extent":"1247:4-1247:45|14|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":44,"usr":15168001864112532835,"detailed_name":"int *rpc","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1293:37-1293:40|15|3|2","extent":"1293:23-1293:40|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":45,"usr":6855213764046318457,"detailed_name":"int error_api_version","short_name_offset":4,"short_name_size":17,"hover":"","comments":"","declarations":[],"spell":"1294:31-1294:48|15|3|2","extent":"1294:23-1294:48|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":46,"usr":1587177534212049417,"detailed_name":"int *error","short_name_offset":5,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1295:37-1295:42|15|3|2","extent":"1295:23-1295:42|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":47,"usr":6293129393595381758,"detailed_name":"int *error_doc","short_name_offset":5,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1296:31-1296:40|15|3|2","extent":"1296:23-1296:40|15|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":48,"usr":14035517325601341169,"detailed_name":"RPC","short_name_offset":0,"short_name_size":3,"hover":"#define RPC(_name, _code)\n   static void _mongoc_rpc_gather_##_name (mongoc_rpc_##_name##_t *rpc,\n                                           mongoc_rpc_header_t *header,\n                                           mongoc_array_t *array)\n   {\n      mongoc_iovec_t iov;\n      BSON_ASSERT (rpc);\n      BSON_ASSERT (array);\n      header->msg_len = 0;\n      _code\n   }","comments":"","declarations":[],"spell":"29:9-29:12|-1|1|2","extent":"29:9-39:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":6008190485329926521,"detailed_name":"UINT8_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define UINT8_FIELD(_name)\n   iov.iov_base = (void *) &rpc->_name;\n   iov.iov_len = 1;\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"40:9-40:20|-1|1|2","extent":"40:9-44:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":10315410701629449718,"detailed_name":"UINT32_FIELD","short_name_offset":0,"short_name_size":12,"hover":"#define UINT32_FIELD(_name)\n   iov.iov_base = (void *) &rpc->_name;\n   iov.iov_len = 4;\n   header->msg_len += (uint32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"45:9-45:21|-1|1|2","extent":"45:9-49:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":17790542005013905992,"detailed_name":"INT32_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT32_FIELD(_name)\n   iov.iov_base = (void *) &rpc->_name;\n   iov.iov_len = 4;\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"50:9-50:20|-1|1|2","extent":"50:9-54:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":563372607598674132,"detailed_name":"ENUM_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define ENUM_FIELD INT32_FIELD","comments":"","declarations":[],"spell":"55:9-55:19|-1|1|2","extent":"55:9-55:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":18357995346554169583,"detailed_name":"INT64_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT64_FIELD(_name)\n   iov.iov_base = (void *) &rpc->_name;\n   iov.iov_len = 8;\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"56:9-56:20|-1|1|2","extent":"56:9-60:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":11685890182502659827,"detailed_name":"CSTRING_FIELD","short_name_offset":0,"short_name_size":13,"hover":"#define CSTRING_FIELD(_name)\n   BSON_ASSERT (rpc->_name);\n   iov.iov_base = (void *) rpc->_name;\n   iov.iov_len = strlen (rpc->_name) + 1;\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"61:9-61:22|-1|1|2","extent":"61:9-66:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":3477342667839651138,"detailed_name":"BSON_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define BSON_FIELD(_name)\n   do {\n      int32_t __l;\n      memcpy (&__l, rpc->_name, 4);\n      __l = BSON_UINT32_FROM_LE (__l);\n      iov.iov_base = (void *) rpc->_name;\n      iov.iov_len = __l;\n      header->msg_len += (int32_t) iov.iov_len;\n      _mongoc_array_append_val (array, iov);\n   } while (0);","comments":"","declarations":[],"spell":"67:9-67:19|-1|1|2","extent":"67:9-76:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":13660307888062319825,"detailed_name":"BSON_OPTIONAL","short_name_offset":0,"short_name_size":13,"hover":"#define BSON_OPTIONAL(_check, _code)\n   if (rpc->_check) {\n      _code\n   }","comments":"","declarations":[],"spell":"77:9-77:22|-1|1|2","extent":"77:9-80:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":4215606214033604684,"detailed_name":"BSON_ARRAY_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define BSON_ARRAY_FIELD(_name)\n   if (rpc->_name##_len) {\n      iov.iov_base = (void *) rpc->_name;\n      iov.iov_len = rpc->_name##_len;\n      header->msg_len += (int32_t) iov.iov_len;\n      _mongoc_array_append_val (array, iov);\n   }","comments":"","declarations":[],"spell":"81:9-81:25|-1|1|2","extent":"81:9-87:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":58,"usr":8007606083370954154,"detailed_name":"IOVEC_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define IOVEC_ARRAY_FIELD(_name)\n   do {\n      ssize_t _i;\n      BSON_ASSERT (rpc->n_##_name);\n      for (_i = 0; _i < rpc->n_##_name; _i++) {\n         BSON_ASSERT (rpc->_name[_i].iov_len);\n         header->msg_len += (int32_t) rpc->_name[_i].iov_len;\n         _mongoc_array_append_val (array, rpc->_name[_i]);\n      }\n   } while (0);","comments":"","declarations":[],"spell":"88:9-88:26|-1|1|2","extent":"88:9-97:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":59,"usr":6529372636471489040,"detailed_name":"SECTION_ARRAY_FIELD","short_name_offset":0,"short_name_size":19,"hover":"#define SECTION_ARRAY_FIELD(_name)\n   do {\n      ssize_t _i;\n      BSON_ASSERT (rpc->n_##_name);\n      for (_i = 0; _i < rpc->n_##_name; _i++) {\n         int32_t __l;\n         iov.iov_base = (void *) &rpc->_name[_i].payload_type;\n         iov.iov_len = 1;\n         header->msg_len += (int32_t) iov.iov_len;\n         _mongoc_array_append_val (array, iov);\n         switch (rpc->_name[_i].payload_type) {\n         case 0:\n            memcpy (&__l, rpc->_name[_i].payload.bson_document, 4);\n            __l = BSON_UINT32_FROM_LE (__l);\n            iov.iov_base = (void *) rpc->_name[_i].payload.bson_document;\n            iov.iov_len = __l;\n            break;\n         case 1:\n            rpc->_name[_i].payload.sequence.size_le =\n               BSON_UINT32_TO_LE (rpc->_name[_i].payload.sequence.size);\n            iov.iov_base = (void *) &rpc->_name[_i].payload.sequence.size_le;\n            iov.iov_len = 4;\n            header->msg_len += 4;\n            _mongoc_array_append_val (array, iov);\n            iov.iov_base =\n               (void *) rpc->_name[_i].payload.sequence.identifier;\n            iov.iov_len =\n               strlen (rpc->_name[_i].payload.sequence.identifier) + 1;\n            header->msg_len += (int32_t) iov.iov_len;\n            _mongoc_array_append_val (array, iov);\n            iov.iov_base =\n               (void *) rpc->_name[_i].payload.sequence.bson_documents;\n            iov.iov_len =\n               rpc->_name[_i].payload.sequence.size - iov.iov_len - 4;\n            break;\n         default:\n            MONGOC_ERROR (\"Unknown Payload Type: %d\",\n                          rpc->_name[_i].payload_type);\n            BSON_ASSERT (0);\n         }\n         header->msg_len += (int32_t) iov.iov_len;\n         _mongoc_array_append_val (array, iov);\n      }\n   } while (0);","comments":"","declarations":[],"spell":"98:9-98:28|-1|1|2","extent":"98:9-141:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":60,"usr":12200990751138617209,"detailed_name":"RAW_BUFFER_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define RAW_BUFFER_FIELD(_name)\n   iov.iov_base = (void *) rpc->_name;\n   iov.iov_len = rpc->_name##_len;\n   BSON_ASSERT (iov.iov_len);\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"142:9-142:25|-1|1|2","extent":"142:9-147:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":61,"usr":1681121726104156382,"detailed_name":"INT64_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define INT64_ARRAY_FIELD(_len, _name)\n   iov.iov_base = (void *) &rpc->_len;\n   iov.iov_len = 4;\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);\n   iov.iov_base = (void *) rpc->_name;\n   iov.iov_len = rpc->_len * 8;\n   BSON_ASSERT (iov.iov_len);\n   header->msg_len += (int32_t) iov.iov_len;\n   _mongoc_array_append_val (array, iov);","comments":"","declarations":[],"spell":"148:9-148:26|-1|1|2","extent":"148:9-157:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":62,"usr":719711817148967943,"detailed_name":"RPC","short_name_offset":0,"short_name_size":3,"hover":"#define RPC(_name, _code)\n   static void _mongoc_rpc_swab_to_le_##_name (mongoc_rpc_##_name##_t *rpc)\n   {\n      BSON_ASSERT (rpc);\n      _code\n   }","comments":"","declarations":[],"spell":"189:9-189:12|-1|1|2","extent":"189:9-194:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":63,"usr":11801819051441629777,"detailed_name":"UINT8_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define UINT8_FIELD(_name)","comments":"","declarations":[],"spell":"195:9-195:20|-1|1|2","extent":"195:9-195:27|-1|1|0","uses":[],"kind":255,"storage":0},{"id":64,"usr":380216799476324165,"detailed_name":"UINT32_FIELD","short_name_offset":0,"short_name_size":12,"hover":"#define UINT32_FIELD(_name)","comments":"","declarations":[],"spell":"196:9-196:21|-1|1|2","extent":"196:9-196:28|-1|1|0","uses":[],"kind":255,"storage":0},{"id":65,"usr":8678036917755145870,"detailed_name":"INT32_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT32_FIELD(_name) rpc->_name = BSON_UINT32_FROM_LE (rpc->_name);","comments":"","declarations":[],"spell":"197:9-197:20|-1|1|2","extent":"197:9-197:74|-1|1|0","uses":[],"kind":255,"storage":0},{"id":66,"usr":15006987150330609149,"detailed_name":"ENUM_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define ENUM_FIELD INT32_FIELD","comments":"","declarations":[],"spell":"198:9-198:19|-1|1|2","extent":"198:9-198:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":67,"usr":5056883290008236664,"detailed_name":"INT64_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT64_FIELD(_name) rpc->_name = BSON_UINT64_FROM_LE (rpc->_name);","comments":"","declarations":[],"spell":"199:9-199:20|-1|1|2","extent":"199:9-199:74|-1|1|0","uses":[],"kind":255,"storage":0},{"id":68,"usr":12718557245259995840,"detailed_name":"CSTRING_FIELD","short_name_offset":0,"short_name_size":13,"hover":"#define CSTRING_FIELD(_name)","comments":"","declarations":[],"spell":"200:9-200:22|-1|1|2","extent":"200:9-200:29|-1|1|0","uses":[],"kind":255,"storage":0},{"id":69,"usr":9424833893149780646,"detailed_name":"BSON_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define BSON_FIELD(_name)","comments":"","declarations":[],"spell":"201:9-201:19|-1|1|2","extent":"201:9-201:26|-1|1|0","uses":[],"kind":255,"storage":0},{"id":70,"usr":7348037635378268259,"detailed_name":"BSON_ARRAY_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define BSON_ARRAY_FIELD(_name)","comments":"","declarations":[],"spell":"202:9-202:25|-1|1|2","extent":"202:9-202:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":71,"usr":3544979452471659257,"detailed_name":"IOVEC_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define IOVEC_ARRAY_FIELD(_name)","comments":"","declarations":[],"spell":"203:9-203:26|-1|1|2","extent":"203:9-203:33|-1|1|0","uses":[],"kind":255,"storage":0},{"id":72,"usr":16871911834215145979,"detailed_name":"SECTION_ARRAY_FIELD","short_name_offset":0,"short_name_size":19,"hover":"#define SECTION_ARRAY_FIELD(_name)","comments":"","declarations":[],"spell":"204:9-204:28|-1|1|2","extent":"204:9-204:35|-1|1|0","uses":[],"kind":255,"storage":0},{"id":73,"usr":7236047535831902048,"detailed_name":"BSON_OPTIONAL","short_name_offset":0,"short_name_size":13,"hover":"#define BSON_OPTIONAL(_check, _code)\n   if (rpc->_check) {\n      _code\n   }","comments":"","declarations":[],"spell":"205:9-205:22|-1|1|2","extent":"205:9-208:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":74,"usr":14839348083257758454,"detailed_name":"RAW_BUFFER_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define RAW_BUFFER_FIELD(_name)","comments":"","declarations":[],"spell":"209:9-209:25|-1|1|2","extent":"209:9-209:32|-1|1|0","uses":[],"kind":255,"storage":0},{"id":75,"usr":2024202628719257886,"detailed_name":"INT64_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define INT64_ARRAY_FIELD(_len, _name)\n   do {\n      ssize_t i;\n      for (i = 0; i < rpc->_len; i++) {\n         rpc->_name[i] = BSON_UINT64_FROM_LE (rpc->_name[i]);\n      }\n      rpc->_len = BSON_UINT32_FROM_LE (rpc->_len);\n   } while (0);","comments":"","declarations":[],"spell":"210:9-210:26|-1|1|2","extent":"210:9-217:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":76,"usr":7799653998558462915,"detailed_name":"RPC","short_name_offset":0,"short_name_size":3,"hover":"#define RPC(_name, _code)\n   static void _mongoc_rpc_swab_from_le_##_name (mongoc_rpc_##_name##_t *rpc)\n   {\n      BSON_ASSERT (rpc);\n      _code\n   }","comments":"","declarations":[],"spell":"233:9-233:12|-1|1|2","extent":"233:9-238:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":77,"usr":8162056242395293887,"detailed_name":"INT64_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define INT64_ARRAY_FIELD(_len, _name)\n   do {\n      ssize_t i;\n      rpc->_len = BSON_UINT32_FROM_LE (rpc->_len);\n      for (i = 0; i < rpc->_len; i++) {\n         rpc->_name[i] = BSON_UINT64_FROM_LE (rpc->_name[i]);\n      }\n   } while (0);","comments":"","declarations":[],"spell":"239:9-239:26|-1|1|2","extent":"239:9-246:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":78,"usr":5910863761138627660,"detailed_name":"RPC","short_name_offset":0,"short_name_size":3,"hover":"#define RPC(_name, _code)\n   static void _mongoc_rpc_printf_##_name (mongoc_rpc_##_name##_t *rpc)\n   {\n      BSON_ASSERT (rpc);\n      _code\n   }","comments":"","declarations":[],"spell":"277:9-277:12|-1|1|2","extent":"277:9-282:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":79,"usr":8679833371926273943,"detailed_name":"UINT8_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define UINT8_FIELD(_name) printf (\"  \" #_name \" : %u\\n\", rpc->_name);","comments":"","declarations":[],"spell":"283:9-283:20|-1|1|2","extent":"283:9-283:71|-1|1|0","uses":[],"kind":255,"storage":0},{"id":80,"usr":4062423455157140758,"detailed_name":"UINT32_FIELD","short_name_offset":0,"short_name_size":12,"hover":"#define UINT32_FIELD(_name) printf (\"  \" #_name \" : %u\\n\", rpc->_name);","comments":"","declarations":[],"spell":"284:9-284:21|-1|1|2","extent":"284:9-284:72|-1|1|0","uses":[],"kind":255,"storage":0},{"id":81,"usr":4779007199128377456,"detailed_name":"INT32_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT32_FIELD(_name) printf (\"  \" #_name \" : %d\\n\", rpc->_name);","comments":"","declarations":[],"spell":"285:9-285:20|-1|1|2","extent":"285:9-285:71|-1|1|0","uses":[],"kind":255,"storage":0},{"id":82,"usr":7388941707518600473,"detailed_name":"ENUM_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define ENUM_FIELD(_name) printf (\"  \" #_name \" : %u\\n\", rpc->_name);","comments":"","declarations":[],"spell":"286:9-286:19|-1|1|2","extent":"286:9-286:70|-1|1|0","uses":[],"kind":255,"storage":0},{"id":83,"usr":7849479965924392617,"detailed_name":"INT64_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT64_FIELD(_name)\n   printf (\"  \" #_name \" : %\" PRIi64 \"\\n\", (int64_t) rpc->_name);","comments":"","declarations":[],"spell":"287:9-287:20|-1|1|2","extent":"287:9-288:66|-1|1|0","uses":[],"kind":255,"storage":0},{"id":84,"usr":1220092928833065898,"detailed_name":"CSTRING_FIELD","short_name_offset":0,"short_name_size":13,"hover":"#define CSTRING_FIELD(_name) printf (\"  \" #_name \" : %s\\n\", rpc->_name);","comments":"","declarations":[],"spell":"289:9-289:22|-1|1|2","extent":"289:9-289:73|-1|1|0","uses":[],"kind":255,"storage":0},{"id":85,"usr":11594639934563608290,"detailed_name":"BSON_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define BSON_FIELD(_name)\n   do {\n      bson_t b;\n      char *s;\n      int32_t __l;\n      memcpy (&__l, rpc->_name, 4);\n      __l = BSON_UINT32_FROM_LE (__l);\n      BSON_ASSERT (\n         bson_init_static (&b, rpc->_name, __l));\n      s = bson_as_relaxed_extended_json (&b, NULL);\n      printf (\"  \" #_name \" : %s\\n\", s);\n      bson_free (s);\n      bson_destroy (&b);\n   } while (0);","comments":"","declarations":[],"spell":"290:9-290:19|-1|1|2","extent":"290:9-303:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":86,"usr":17849376895160222685,"detailed_name":"BSON_ARRAY_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define BSON_ARRAY_FIELD(_name)\n   do {\n      bson_reader_t *__r;\n      bool __eof;\n      const bson_t *__b;\n      __r = bson_reader_new_from_data (rpc->_name, rpc->_name##_len);\n      while ((__b = bson_reader_read (__r, &__eof))) {\n         char *s = bson_as_relaxed_extended_json (__b, NULL);\n         printf (\"  \" #_name \" : %s\\n\", s);\n         bson_free (s);\n      }\n      bson_reader_destroy (__r);\n   } while (0);","comments":"","declarations":[],"spell":"304:9-304:25|-1|1|2","extent":"304:9-316:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":87,"usr":17456871793619521152,"detailed_name":"IOVEC_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define IOVEC_ARRAY_FIELD(_name)\n   do {\n      ssize_t _i;\n      size_t _j;\n      for (_i = 0; _i < rpc->n_##_name; _i++) {\n         printf (\"  \" #_name \" : \");\n         for (_j = 0; _j < rpc->_name[_i].iov_len; _j++) {\n            uint8_t u;\n            u = ((char *) rpc->_name[_i].iov_base)[_j];\n            printf (\" %02x\", u);\n         }\n         printf (\"\\n\");\n      }\n   } while (0);","comments":"","declarations":[],"spell":"317:9-317:26|-1|1|2","extent":"317:9-330:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":88,"usr":17504604534603673128,"detailed_name":"SECTION_ARRAY_FIELD","short_name_offset":0,"short_name_size":19,"hover":"#define SECTION_ARRAY_FIELD(_name)\n   do {\n      ssize_t _i;\n      printf (\"  \" #_name \" : %d\\n\", rpc->n_##_name);\n      for (_i = 0; _i < rpc->n_##_name; _i++) {\n         if (rpc->_name[_i].payload_type == 0) {\n            do {\n               bson_t b;\n               char *s;\n               int32_t __l;\n               memcpy (&__l, rpc->_name[_i].payload.bson_document, 4);\n               __l = BSON_UINT32_FROM_LE (__l);\n               BSON_ASSERT (bson_init_static (\n                  &b, rpc->_name[_i].payload.bson_document, __l));\n               s = bson_as_relaxed_extended_json (&b, NULL);\n               printf (\"  Type %d: %s\\n\", rpc->_name[_i].payload_type, s);\n               bson_free (s);\n               bson_destroy (&b);\n            } while (0);\n         } else if (rpc->_name[_i].payload_type == 1) {\n            bson_reader_t *__r;\n            int max = rpc->_name[_i].payload.sequence.size -\n                      strlen (rpc->_name[_i].payload.sequence.identifier) -\n                      1 - sizeof (int32_t);\n            bool __eof;\n            const bson_t *__b;\n            printf (\"  Identifier: %s\\n\",\n                    rpc->_name[_i].payload.sequence.identifier);\n            printf (\"  Size: %d\\n\", max);\n            __r = bson_reader_new_from_data (\n               rpc->_name[_i].payload.sequence.bson_documents, max);\n            while ((__b = bson_reader_read (__r, &__eof))) {\n               char *s = bson_as_relaxed_extended_json (__b, NULL);\n               bson_free (s);\n            }\n            bson_reader_destroy (__r);\n         }\n      }\n   } while (0);","comments":"","declarations":[],"spell":"331:9-331:28|-1|1|2","extent":"331:9-369:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":89,"usr":8836578856793084802,"detailed_name":"BSON_OPTIONAL","short_name_offset":0,"short_name_size":13,"hover":"#define BSON_OPTIONAL(_check, _code)\n   if (rpc->_check) {\n      _code\n   }","comments":"","declarations":[],"spell":"370:9-370:22|-1|1|2","extent":"370:9-373:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":90,"usr":7605081698966646280,"detailed_name":"RAW_BUFFER_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define RAW_BUFFER_FIELD(_name)\n   {\n      ssize_t __i;\n      printf (\"  \" #_name \" :\");\n      for (__i = 0; __i < rpc->_name##_len; __i++) {\n         uint8_t u;\n         u = ((char *) rpc->_name)[__i];\n         printf (\" %02x\", u);\n      }\n      printf (\"\\n\");\n   }","comments":"","declarations":[],"spell":"374:9-374:25|-1|1|2","extent":"374:9-384:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":91,"usr":4928384047442834793,"detailed_name":"INT64_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define INT64_ARRAY_FIELD(_len, _name)\n   do {\n      ssize_t i;\n      for (i = 0; i < rpc->_len; i++) {\n         printf (\"  \" #_name \" : %\" PRIi64 \"\\n\", (int64_t) rpc->_name[i]);\n      }\n      rpc->_len = BSON_UINT32_FROM_LE (rpc->_len);\n   } while (0);","comments":"","declarations":[],"spell":"385:9-385:26|-1|1|2","extent":"385:9-392:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":92,"usr":2476023880730052232,"detailed_name":"RPC","short_name_offset":0,"short_name_size":3,"hover":"#define RPC(_name, _code)\n   static bool _mongoc_rpc_scatter_##_name (\n      mongoc_rpc_##_name##_t *rpc, const uint8_t *buf, size_t buflen)\n   {\n      BSON_ASSERT (rpc);\n      BSON_ASSERT (buf);\n      BSON_ASSERT (buflen);\n      _code return true;\n   }","comments":"","declarations":[],"spell":"422:9-422:12|-1|1|2","extent":"422:9-430:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":93,"usr":5198953576735398222,"detailed_name":"UINT8_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define UINT8_FIELD(_name)\n   if (buflen < 1) {\n      return false;\n   }\n   memcpy (&rpc->_name, buf, 1);\n   buflen -= 1;\n   buf += 1;","comments":"","declarations":[],"spell":"431:9-431:20|-1|1|2","extent":"431:9-437:13|-1|1|0","uses":[],"kind":255,"storage":0},{"id":94,"usr":11656377528903257480,"detailed_name":"UINT32_FIELD","short_name_offset":0,"short_name_size":12,"hover":"#define UINT32_FIELD(_name)\n   if (buflen < 4) {\n      return false;\n   }\n   memcpy (&rpc->_name, buf, 4);\n   buflen -= 4;\n   buf += 4;","comments":"","declarations":[],"spell":"438:9-438:21|-1|1|2","extent":"438:9-444:13|-1|1|0","uses":[],"kind":255,"storage":0},{"id":95,"usr":376880326143307336,"detailed_name":"INT32_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT32_FIELD(_name)\n   if (buflen < 4) {\n      return false;\n   }\n   memcpy (&rpc->_name, buf, 4);\n   buflen -= 4;\n   buf += 4;","comments":"","declarations":[],"spell":"445:9-445:20|-1|1|2","extent":"445:9-451:13|-1|1|0","uses":[],"kind":255,"storage":0},{"id":96,"usr":4915294414235738264,"detailed_name":"ENUM_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define ENUM_FIELD INT32_FIELD","comments":"","declarations":[],"spell":"452:9-452:19|-1|1|2","extent":"452:9-452:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":97,"usr":17980115929828648837,"detailed_name":"INT64_FIELD","short_name_offset":0,"short_name_size":11,"hover":"#define INT64_FIELD(_name)\n   if (buflen < 8) {\n      return false;\n   }\n   memcpy (&rpc->_name, buf, 8);\n   buflen -= 8;\n   buf += 8;","comments":"","declarations":[],"spell":"453:9-453:20|-1|1|2","extent":"453:9-459:13|-1|1|0","uses":[],"kind":255,"storage":0},{"id":98,"usr":17366373441900209168,"detailed_name":"INT64_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define INT64_ARRAY_FIELD(_len, _name)\n   do {\n      size_t needed;\n      if (buflen < 4) {\n         return false;\n      }\n      memcpy (&rpc->_len, buf, 4);\n      buflen -= 4;\n      buf += 4;\n      needed = BSON_UINT32_FROM_LE (rpc->_len) * 8;\n      if (needed > buflen) {\n         return false;\n      }\n      rpc->_name = (int64_t *) buf;\n      buf += needed;\n      buflen -= needed;\n   } while (0);","comments":"","declarations":[],"spell":"460:9-460:26|-1|1|2","extent":"460:9-476:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":99,"usr":14798287542607799070,"detailed_name":"CSTRING_FIELD","short_name_offset":0,"short_name_size":13,"hover":"#define CSTRING_FIELD(_name)\n   do {\n      size_t __i;\n      bool found = false;\n      for (__i = 0; __i < buflen; __i++) {\n         if (!buf[__i]) {\n            rpc->_name = (const char *) buf;\n            buflen -= __i + 1;\n            buf += __i + 1;\n            found = true;\n            break;\n         }\n      }\n      if (!found) {\n         return false;\n      }\n   } while (0);","comments":"","declarations":[],"spell":"477:9-477:22|-1|1|2","extent":"477:9-493:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":100,"usr":424446635006196341,"detailed_name":"BSON_FIELD","short_name_offset":0,"short_name_size":10,"hover":"#define BSON_FIELD(_name)\n   do {\n      uint32_t __l;\n      if (buflen < 4) {\n         return false;\n      }\n      memcpy (&__l, buf, 4);\n      __l = BSON_UINT32_FROM_LE (__l);\n      if (__l < 5 || __l > buflen) {\n         return false;\n      }\n      rpc->_name = (uint8_t *) buf;\n      buf += __l;\n      buflen -= __l;\n   } while (0);","comments":"","declarations":[],"spell":"494:9-494:19|-1|1|2","extent":"494:9-508:16|-1|1|0","uses":[],"kind":255,"storage":0},{"id":101,"usr":14880226850485841774,"detailed_name":"BSON_ARRAY_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define BSON_ARRAY_FIELD(_name)\n   rpc->_name = (uint8_t *) buf;\n   rpc->_name##_len = (int32_t) buflen;\n   buf = NULL;\n   buflen = 0;","comments":"","declarations":[],"spell":"509:9-509:25|-1|1|2","extent":"509:9-513:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":102,"usr":15527527124791409364,"detailed_name":"BSON_OPTIONAL","short_name_offset":0,"short_name_size":13,"hover":"#define BSON_OPTIONAL(_check, _code)\n   if (buflen) {\n      _code\n   }","comments":"","declarations":[],"spell":"514:9-514:22|-1|1|2","extent":"514:9-517:5|-1|1|0","uses":[],"kind":255,"storage":0},{"id":103,"usr":4741006180640526494,"detailed_name":"IOVEC_ARRAY_FIELD","short_name_offset":0,"short_name_size":17,"hover":"#define IOVEC_ARRAY_FIELD(_name)\n   rpc->_name##_recv.iov_base = (void *) buf;\n   rpc->_name##_recv.iov_len = buflen;\n   rpc->_name = &rpc->_name##_recv;\n   rpc->n_##_name = 1;\n   buf = NULL;\n   buflen = 0;","comments":"","declarations":[],"spell":"518:9-518:26|-1|1|2","extent":"518:9-524:15|-1|1|0","uses":[],"kind":255,"storage":0},{"id":104,"usr":10700736532168482743,"detailed_name":"SECTION_ARRAY_FIELD","short_name_offset":0,"short_name_size":19,"hover":"#define SECTION_ARRAY_FIELD(_name)\n   do {\n      uint32_t __l;\n      mongoc_rpc_section_t *section = &rpc->_name[rpc->n_##_name];\n      section->payload_type = buf[0];\n      buf++;\n      buflen -= 1;\n      memcpy (&__l, buf, 4);\n      __l = BSON_UINT32_FROM_LE (__l);\n      if (section->payload_type == 0) {\n         section->payload.bson_document = buf;\n      } else {\n         const uint8_t *section_buf = buf + 4;\n         section->payload.sequence.size = __l;\n         section->payload.sequence.identifier = (const char *) section_buf;\n         section_buf += strlen ((const char *) section_buf) + 1;\n         section->payload.sequence.bson_documents = section_buf;\n      }\n      buf += __l;\n      buflen -= __l;\n      rpc->n_##_name++;\n   } while (buflen);","comments":"","declarations":[],"spell":"525:9-525:28|-1|1|2","extent":"525:9-546:21|-1|1|0","uses":[],"kind":255,"storage":0},{"id":105,"usr":10904077347839018047,"detailed_name":"RAW_BUFFER_FIELD","short_name_offset":0,"short_name_size":16,"hover":"#define RAW_BUFFER_FIELD(_name)\n   rpc->_name = (void *) buf;\n   rpc->_name##_len = (int32_t) buflen;\n   buf = NULL;\n   buflen = 0;","comments":"","declarations":[],"spell":"547:9-547:25|-1|1|2","extent":"547:9-551:15|-1|1|0","uses":[],"kind":255,"storage":0}]}