16
{"last_modification_time":1520860524,"language":2,"import_file":"/home/justin/MSCVProject/client/web/node_modules/node-sass/src/libsass/src/sass_util.cpp","args_hash":13395560317524322968,"includes":[{"line":0,"resolved_path":"/home/justin/MSCVProject/client/web/node_modules/node-sass/src/libsass/src/sass.hpp"},{"line":1,"resolved_path":"/home/justin/MSCVProject/client/web/node_modules/node-sass/src/libsass/src/node.hpp"}],"dependencies":["/home/justin/MSCVProject/client/web/node_modules/node-sass/src/libsass/src/sass.hpp","/usr/include/c++/8/string","/usr/include/x86_64-linux-gnu/c++/8/bits/c++config.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":6814646043143413472,"detailed_name":"Sass","short_name_offset":0,"short_name_size":4,"kind":3,"hover":"","comments":"","declarations":[],"spell":"4:11-4:15|-1|1|2","extent":"4:1-149:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[0,1],"vars":[],"instances":[],"uses":["4:11-4:15|-1|1|4"]},{"id":1,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4],"uses":[]}],"funcs":[{"id":0,"usr":10037909907415249808,"detailed_name":"int Sass::paths(const int &arrs)","short_name_offset":10,"short_name_size":5,"kind":12,"storage":1,"hover":"","comments":"\n# This is the equivalent of ruby's Sass::Util.paths.\n#\n# Return an array of all possible paths through the given arrays.\n#\n# @param arrs [NodeCollection<NodeCollection<Node>>]\n# @return [NodeCollection<NodeCollection<Node>>]\n#\n# @example\n#   paths([[1, 2], [3, 4], [5]]) #=>\n#     # [[1, 3, 5],\n#     #  [2, 3, 5],\n#     #  [1, 4, 5],\n#     #  [2, 4, 5]]\n\nThe following is the modified version of the ruby code that was more portable to C++. You\nshould be able to drop it into ruby 3.2.19 and get the same results from ruby sass.\n\ndef paths(arrs)\n    // I changed the inject and maps to an iterative approach to make it easier to implement in C++\n  loopStart = [[]]\n\n  for arr in arrs do\n    permutations = []\n    for e in arr do\n      for path in loopStart do\n        permutations.push(path + [e])\n      end\n    end\n    loopStart = permutations\n  end\nend","declarations":[],"spell":"40:8-40:13|0|2|2","extent":"40:3-75:4|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[0,1],"uses":[],"callees":[]},{"id":1,"usr":2685145736543138926,"detailed_name":"int Sass::flatten(int &arr, int n)","short_name_offset":10,"short_name_size":7,"kind":12,"storage":1,"hover":"","comments":"\nThis is the equivalent of ruby sass' Sass::Util.flatten and [].flatten.\nSass::Util.flatten requires the number of levels to flatten, while\n[].flatten doesn't and will flatten the entire array. This function\nsupports both.\n\n# Flattens the first `n` nested arrays. If n == -1, all arrays will be flattened\n#\n# @param arr [NodeCollection] The array to flatten\n# @param n [int] The number of levels to flatten\n# @return [NodeCollection] The flattened array\n\nThe following is the modified version of the ruby code that was more portable to C++. You\nshould be able to drop it into ruby 3.2.19 and get the same results from ruby sass.\n\ndef flatten(arr, n = -1)\nif n != -1 and n == 0 then\n  return arr\nend\n\nflattened = []\n\nfor e in arr do\n  if e.is_a?(Array) then\n    flattened.concat(flatten(e, n - 1))\n  else\n    flattened << e\n  end\nend\n\nreturn flattened\nend","declarations":[],"spell":"111:8-111:15|0|2|2","extent":"111:3-148:4|0|2|0","declaring_type":0,"bases":[],"derived":[],"vars":[2,3,4],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":1815671570451666739,"detailed_name":"const int &arrs","short_name_offset":11,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"40:26-40:30|0|3|2","extent":"40:14-40:30|0|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":1,"usr":1637805231001489596,"detailed_name":"int loopStart","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"42:10-42:19|0|3|2","extent":"42:5-42:19|0|3|0","type":2,"uses":[],"kind":13,"storage":1},{"id":2,"usr":16402820931902800698,"detailed_name":"int &arr","short_name_offset":5,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"111:22-111:25|1|3|2","extent":"111:16-111:25|1|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":3,"usr":15534676621537270469,"detailed_name":"int n","short_name_offset":4,"short_name_size":1,"hover":"","comments":"","declarations":[],"spell":"111:31-111:32|1|3|2","extent":"111:27-111:32|1|3|0","type":2,"uses":["112:9-112:10|1|3|12","112:20-112:21|1|3|12"],"kind":253,"storage":1},{"id":4,"usr":9038116303235075987,"detailed_name":"int flattened","short_name_offset":4,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"116:10-116:19|1|3|2","extent":"116:5-116:19|1|3|0","type":2,"uses":[],"kind":13,"storage":1}]}