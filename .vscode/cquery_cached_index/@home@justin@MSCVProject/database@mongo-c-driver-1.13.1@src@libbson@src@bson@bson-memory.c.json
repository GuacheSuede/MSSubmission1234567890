16
{"last_modification_time":1548363167,"language":1,"import_file":"/home/justin/MSCVProject/database/mongo-c-driver-1.13.1/src/libbson/src/bson/bson-memory.c","args_hash":10433645398913005206,"includes":[{"line":17,"resolved_path":"/usr/include/stdlib.h"},{"line":18,"resolved_path":"/usr/include/string.h"},{"line":19,"resolved_path":"/usr/include/stdio.h"},{"line":20,"resolved_path":"/usr/include/errno.h"}],"dependencies":["/usr/include/stdlib.h","/usr/include/x86_64-linux-gnu/bits/libc-header-start.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/x86_64-linux-gnu/bits/floatn.h","/usr/include/x86_64-linux-gnu/bits/floatn-common.h","/usr/include/x86_64-linux-gnu/sys/types.h","/usr/include/x86_64-linux-gnu/bits/types.h","/usr/include/x86_64-linux-gnu/bits/types/clock_t.h","/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h","/usr/include/x86_64-linux-gnu/bits/types/time_t.h","/usr/include/x86_64-linux-gnu/bits/types/timer_t.h","/usr/include/x86_64-linux-gnu/bits/stdint-intn.h","/usr/include/endian.h","/usr/include/x86_64-linux-gnu/bits/byteswap.h","/usr/include/x86_64-linux-gnu/bits/uintn-identity.h","/usr/include/x86_64-linux-gnu/sys/select.h","/usr/include/x86_64-linux-gnu/bits/select.h","/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h","/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h","/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h","/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h","/usr/include/alloca.h","/usr/include/string.h","/usr/include/x86_64-linux-gnu/bits/types/locale_t.h","/usr/include/strings.h","/usr/include/stdio.h","/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h","/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h","/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h","/usr/include/errno.h","/usr/include/x86_64-linux-gnu/bits/errno.h","/usr/include/linux/errno.h","/usr/include/x86_64-linux-gnu/asm/errno.h","/usr/include/asm-generic/errno.h","/usr/local/lib/clang/7.0.0/include/stddef.h","/usr/include/x86_64-linux-gnu/bits/waitflags.h","/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h","/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h","/usr/local/lib/clang/7.0.0/include/stdarg.h","/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h","/usr/include/x86_64-linux-gnu/bits/types/__FILE.h","/usr/include/x86_64-linux-gnu/bits/types/FILE.h","/usr/include/x86_64-linux-gnu/bits/sys_errlist.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h","/usr/include/x86_64-linux-gnu/bits/waitstatus.h","/usr/include/x86_64-linux-gnu/bits/typesizes.h","/usr/include/x86_64-linux-gnu/bits/endian.h","/usr/include/x86_64-linux-gnu/bits/stdlib-float.h","/usr/include/x86_64-linux-gnu/bits/stdio_lim.h","/usr/include/asm-generic/errno-base.h"],"skipped_by_preprocessor":["31:1-33:6","302:1-304:6"],"types":[{"id":0,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,14],"uses":[]},{"id":1,"usr":5778908825573379114,"detailed_name":"size_t","short_name_offset":0,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[1,4,7,9,13],"uses":["65:14-65:20|-1|1|4","103:15-103:21|-1|1|4","142:15-142:21|-1|1|4","191:19-191:25|-1|1|4","251:17-251:23|-1|1|4"]},{"id":2,"usr":2,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[2,5,6,8,10,11,12],"uses":[]}],"funcs":[{"id":0,"usr":14843210850289572725,"detailed_name":"void *bson_malloc(size_t num_bytes)","short_name_offset":6,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_malloc --\n\n       Allocates @num_bytes of memory and returns a pointer to it.  If\n       malloc failed to allocate the memory, abort() is called.\n\n       Libbson does not try to handle OOM conditions as it is beyond the\n       scope of this library to handle so appropriately.\n\n Parameters:\n       @num_bytes: The number of bytes to allocate.\n\n Returns:\n       A pointer if successful; otherwise abort() is called and this\n       function will never return.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"65:1-65:12|-1|1|2","extent":"64:1-77:2|-1|1|0","bases":[],"derived":[],"vars":[1,2],"uses":[],"callees":["71:88-71:93|1|3|36"]},{"id":1,"usr":18046375158747084355,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["71:88-71:93|0|3|36","109:89-109:94|2|3|36","157:89-157:94|3|3|36"],"callees":[]},{"id":2,"usr":5376989454383823449,"detailed_name":"void *bson_malloc0(size_t num_bytes)","short_name_offset":6,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_malloc0 --\n\n       Like bson_malloc() except the memory is zeroed first. This is\n       similar to calloc() except that abort() is called in case of\n       failure to allocate memory.\n\n Parameters:\n       @num_bytes: The number of bytes to allocate.\n\n Returns:\n       A pointer if successful; otherwise abort() is called and this\n       function will never return.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"103:1-103:13|-1|1|2","extent":"102:1-115:2|-1|1|0","bases":[],"derived":[],"vars":[4,5],"uses":[],"callees":["109:89-109:94|1|3|36"]},{"id":3,"usr":10134198177412791709,"detailed_name":"void *bson_realloc(void *mem, size_t num_bytes)","short_name_offset":6,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_realloc --\n\n       This function behaves similar to realloc() except that if there is\n       a failure abort() is called.\n\n Parameters:\n       @mem: The memory to realloc, or NULL.\n       @num_bytes: The size of the new allocation or 0 to free.\n\n Returns:\n       The new allocation if successful; otherwise abort() is called and\n       this function never returns.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"141:1-141:13|-1|1|2","extent":"140:1-162:2|-1|1|0","bases":[],"derived":[],"vars":[6,7],"uses":["194:11-194:23|4|3|36"],"callees":["157:89-157:94|1|3|36"]},{"id":4,"usr":16356169932149121355,"detailed_name":"void *bson_realloc_ctx(void *mem, size_t num_bytes, void *ctx)","short_name_offset":6,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_realloc_ctx --\n\n       This wraps bson_realloc and provides a compatible api for similar\n       functions with a context\n\n Parameters:\n       @mem: The memory to realloc, or NULL.\n       @num_bytes: The size of the new allocation or 0 to free.\n       @ctx: Ignored\n\n Returns:\n       The new allocation if successful; otherwise abort() is called and\n       this function never returns.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"190:1-190:17|-1|1|2","extent":"189:1-195:2|-1|1|0","bases":[],"derived":[],"vars":[8,9,10],"uses":[],"callees":["194:11-194:23|3|3|36"]},{"id":5,"usr":5598929011123480606,"detailed_name":"void bson_free(void *mem)","short_name_offset":5,"short_name_size":9,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_free --\n\n       Frees @mem using the underlying allocator.\n\n       Currently, this only calls free() directly, but that is subject to\n       change.\n\n Parameters:\n       @mem: An allocation to free.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"221:1-221:10|-1|1|2","extent":"220:1-224:2|-1|1|0","bases":[],"derived":[],"vars":[11],"uses":[],"callees":[]},{"id":6,"usr":16094641135572533289,"detailed_name":"void bson_zero_free(void *mem, size_t size)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_zero_free --\n\n       Frees @mem using the underlying allocator. @size bytes of @mem will\n       be zeroed before freeing the memory. This is useful in scenarios\n       where @mem contains passwords or other sensitive information.\n\n Parameters:\n       @mem: An allocation to free.\n       @size: The number of bytes in @mem.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"250:1-250:15|-1|1|2","extent":"249:1-257:2|-1|1|0","bases":[],"derived":[],"vars":[12,13],"uses":[],"callees":[]},{"id":7,"usr":2053501693341819994,"detailed_name":"void bson_mem_set_vtable(const int *vtable)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"\n--------------------------------------------------------------------------\n\n bson_mem_set_vtable --\n\n       This function will change our allocation vtable.\n\n       It is imperative that this is called at the beginning of the\n       process before any memory has been allocated by the default\n       allocator.\n\n Returns:\n       None.\n\n Side effects:\n       None.\n\n--------------------------------------------------------------------------","declarations":[],"spell":"281:1-281:20|-1|1|2","extent":"280:1-294:2|-1|1|0","bases":[],"derived":[],"vars":[14],"uses":[],"callees":[]},{"id":8,"usr":15702170461550815549,"detailed_name":"void bson_mem_restore_vtable()","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"","declarations":[],"spell":"297:1-297:24|-1|1|2","extent":"296:1-311:2|-1|1|0","bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":1014111442178029252,"detailed_name":"int gMemVtable","short_name_offset":4,"short_name_size":10,"hover":"","comments":"","declarations":[],"spell":"28:26-28:36|-1|1|2","extent":"28:1-28:36|-1|1|0","type":0,"uses":[],"kind":13,"storage":3},{"id":1,"usr":15868123307640138493,"detailed_name":"size_t num_bytes","short_name_offset":7,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"65:21-65:30|0|3|2","extent":"65:14-65:30|0|3|0","type":1,"uses":["69:21-69:30|0|3|12"],"kind":253,"storage":1},{"id":2,"usr":11173747125361647300,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"void *mem = NULL","comments":"","declarations":[],"spell":"67:10-67:13|0|3|2","extent":"67:4-67:20|0|3|0","type":2,"uses":["76:11-76:14|0|3|12"],"kind":13,"storage":1},{"id":3,"usr":6208611483705342026,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["71:19-71:25|0|3|12","109:19-109:25|2|3|12","157:16-157:22|3|3|12","287:16-287:22|7|3|12"],"kind":0,"storage":0},{"id":4,"usr":11241265051863951150,"detailed_name":"size_t num_bytes","short_name_offset":7,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"103:22-103:31|2|3|2","extent":"103:15-103:31|2|3|0","type":1,"uses":["107:21-107:30|2|3|12"],"kind":253,"storage":1},{"id":5,"usr":4817074984245902001,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"void *mem = NULL","comments":"","declarations":[],"spell":"105:10-105:13|2|3|2","extent":"105:4-105:20|2|3|0","type":2,"uses":["114:11-114:14|2|3|12"],"kind":13,"storage":1},{"id":6,"usr":12841534456785332195,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"141:21-141:24|3|3|2","extent":"141:15-141:24|3|3|0","type":2,"uses":["156:24-156:27|3|3|12","161:11-161:14|3|3|12"],"kind":253,"storage":1},{"id":7,"usr":1114184608568702552,"detailed_name":"size_t num_bytes","short_name_offset":7,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"142:22-142:31|3|3|2","extent":"142:15-142:31|3|3|0","type":1,"uses":["149:23-149:32|3|3|12"],"kind":253,"storage":1},{"id":8,"usr":4937988482982204192,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"190:25-190:28|4|3|2","extent":"190:19-190:28|4|3|0","type":2,"uses":["194:25-194:28|4|3|12"],"kind":253,"storage":1},{"id":9,"usr":109785703277048282,"detailed_name":"size_t num_bytes","short_name_offset":7,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"191:26-191:35|4|3|2","extent":"191:19-191:35|4|3|0","type":1,"uses":["194:30-194:39|4|3|12"],"kind":253,"storage":1},{"id":10,"usr":16692257586606081434,"detailed_name":"void *ctx","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"192:25-192:28|4|3|2","extent":"192:19-192:28|4|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":11,"usr":17369834871116545532,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"221:18-221:21|5|3|2","extent":"221:12-221:21|5|3|0","type":2,"uses":[],"kind":253,"storage":1},{"id":12,"usr":9987903061557925758,"detailed_name":"void *mem","short_name_offset":6,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"250:23-250:26|6|3|2","extent":"250:17-250:26|6|3|0","type":2,"uses":["253:21-253:24|6|3|12","254:15-254:18|6|3|12"],"kind":253,"storage":1},{"id":13,"usr":13290376423719282850,"detailed_name":"size_t size","short_name_offset":7,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"251:24-251:28|6|3|2","extent":"251:17-251:28|6|3|0","type":1,"uses":["254:23-254:27|6|3|12"],"kind":253,"storage":1},{"id":14,"usr":11617245383442784097,"detailed_name":"const int *vtable","short_name_offset":11,"short_name_size":6,"hover":"","comments":"","declarations":[],"spell":"281:47-281:53|7|3|2","extent":"281:22-281:53|7|3|0","type":0,"uses":[],"kind":253,"storage":1},{"id":15,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["67:16-67:20|-1|1|4","105:16-105:20|-1|1|4","151:14-151:18|-1|1|4"],"kind":0,"storage":0},{"id":16,"usr":16305029306105557721,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["71:19-71:25|-1|1|4","109:19-109:25|-1|1|4","157:16-157:22|-1|1|4","287:16-287:22|-1|1|4"],"kind":0,"storage":0},{"id":17,"usr":1318659957094207779,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["71:88-71:93|-1|1|4","109:89-109:94|-1|1|4","157:89-157:94|-1|1|4"],"kind":0,"storage":0}]}